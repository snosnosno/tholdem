{
  "tasks": [
    {
      "id": "c66b7c3d-11aa-473e-aa2d-8f184d7cc4d9",
      "name": "1-1. Firestore 데이터 모델 및 보안 규칙 설정",
      "description": "요구사항 명세에 따라 `users`, `staffProfiles`, `tournaments`, `jobPostings`, `applications`, `schedules`, `workLogs`, `payrolls`, `settings` 컬렉션을 설계하고, `firestore.rules` 파일에 각 컬렉션에 대한 CRUD 보안 규칙을 작성 및 업데이트합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-23T18:05:51.101Z",
      "updatedAt": "2025-06-23T18:09:14.709Z",
      "implementationGuide": "1. `firestore.rules` 파일을 엽니다. 2. 기존 `isAdmin`, `isOwner` 함수를 확인합니다. 3. 명세에 정의된 신규 컬렉션들(`tournaments`, `jobPostings`, `applications`, `schedules`, `payrolls`)에 대한 `match` 블록을 추가합니다. 4. 각 `match` 블록 내에 `allow read, create, update, delete` 규칙을 사용자의 역할(admin, staff)에 맞게 설정합니다.",
      "verificationCriteria": "`firestore.rules` 파일에 모든 신규 컬렉션 규칙이 추가되었고, 관리자와 일반 스태프의 접근 권한이 명세대로 제어되는지 확인합니다.",
      "analysisResult": "이 프로젝트는 Firebase와 React를 사용하여 포커 대회 스태프를 관리하는 웹 플랫폼을 개발합니다. 핵심 아키텍처는 프론트엔드(UI/UX)와 백엔드(핵심 로직)를 명확히 분리하는 것입니다. Firestore는 데이터 저장소로 사용되며, 읽기 성능 최적화를 위해 비정규화 패턴을 적용합니다. 핵심 비즈니스 로직(매칭, 정산 등)은 안전하고 확장 가능한 Firebase Functions로 구현합니다. 프론트엔드는 역할 기반 접근 제어(RBAC)를 적용하고, 재사용 가능한 커스텀 훅을 적극 활용하여 개발 효율성과 유지보수성을 높입니다.",
      "summary": "`firestore.rules` 파일에 `tournaments`, `jobPostings`, `applications`, `schedules`, `payrolls` 등 계획된 모든 신규 컬렉션에 대한 보안 규칙을 성공적으로 추가하고 업데이트했습니다. 각 규칙은 기존 헬퍼 함수를 활용하여 관리자와 사용자의 권한을 명세에 맞게 올바르게 제어합니다. 작업이 완벽하게 완료되었습니다.",
      "completedAt": "2025-06-23T18:09:14.708Z"
    },
    {
      "id": "9d6a5410-3397-4ab9-bd75-a51a6278a35a",
      "name": "1-2. 스태프 프로필 등록/수정 페이지 개발",
      "description": "스태프가 로그인 후 자신의 프로필(이름, 연락처, 역할, 언어, 가능 게임, 시급, 계좌 정보 등)을 등록하고 수정할 수 있는 UI 페이지를 개발합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "c66b7c3d-11aa-473e-aa2d-8f184d7cc4d9"
        }
      ],
      "createdAt": "2025-06-23T18:05:51.101Z",
      "updatedAt": "2025-06-23T18:10:32.375Z",
      "implementationGuide": "1. `app2/src/pages`에 `ProfilePage.tsx` 파일을 생성합니다. 2. `useAuth` 훅으로 현재 사용자 정보를, `useDocument('staffProfiles', userId)` 훅으로 프로필 데이터를 가져옵니다. 3. 데이터를 표시하고 수정할 수 있는 폼 컴포넌트를 구현합니다. 4. '저장' 버튼 클릭 시 `updateDocument` 함수를 호출하여 Firestore에 데이터를 업데이트합니다.",
      "verificationCriteria": "스태프가 자신의 프로필 정보를 웹 화면에서 수정하고 저장했을 때, Firestore 데이터베이스에 변경사항이 올바르게 반영되는지 확인합니다.",
      "analysisResult": "이 프로젝트는 Firebase와 React를 사용하여 포커 대회 스태프를 관리하는 웹 플랫폼을 개발합니다. 핵심 아키텍처는 프론트엔드(UI/UX)와 백엔드(핵심 로직)를 명확히 분리하는 것입니다. Firestore는 데이터 저장소로 사용되며, 읽기 성능 최적화를 위해 비정규화 패턴을 적용합니다. 핵심 비즈니스 로직(매칭, 정산 등)은 안전하고 확장 가능한 Firebase Functions로 구현합니다. 프론트엔드는 역할 기반 접근 제어(RBAC)를 적용하고, 재사용 가능한 커스텀 훅을 적극 활용하여 개발 효율성과 유지보수성을 높입니다.",
      "summary": "`useFirestore` 커스텀 훅과 `ProfilePage` 컴포넌트를 성공적으로 생성했으며, `App.tsx`와 `Layout.tsx`를 수정하여 라우팅 및 사이드바 메뉴를 추가했습니다. 이로써 스태프가 자신의 프로필을 웹 UI를 통해 등록하고 수정할 수 있는 기능이 완벽하게 구현되었습니다. 작업이 계획대로 완료되었습니다.",
      "completedAt": "2025-06-23T18:10:32.374Z"
    },
    {
      "id": "51126a5e-e8a4-4caf-b329-72bad7f43a44",
      "name": "1-3. 관리자용 스태프 목록 조회 페이지 개발",
      "description": "관리자가 모든 스태프의 프로필을 검색하고 필터링하며, 상세 정보를 조회할 수 있는 페이지를 개발합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "9d6a5410-3397-4ab9-bd75-a51a6278a35a"
        }
      ],
      "createdAt": "2025-06-23T18:05:51.101Z",
      "updatedAt": "2025-06-23T18:11:25.145Z",
      "implementationGuide": "1. `app2/src/pages`에 `StaffListPage.tsx` 파일을 생성합니다. 2. `useCollection('staffProfiles')` 훅을 사용하여 모든 스태프 목록을 실시간으로 가져옵니다. 3. 이름, 역할 등으로 목록을 필터링할 수 있는 검색 바 UI를 추가합니다. 4. 목록은 테이블 형태로 표시하며, 각 항목 클릭 시 상세 프로필을 보여주는 모달 창을 구현합니다.",
      "verificationCriteria": "관리자가 스태프 목록 페이지에서 특정 스태프를 검색하고, 그 스태프의 상세 정보를 올바르게 확인할 수 있는지 검증합니다.",
      "analysisResult": "이 프로젝트는 Firebase와 React를 사용하여 포커 대회 스태프를 관리하는 웹 플랫폼을 개발합니다. 핵심 아키텍처는 프론트엔드(UI/UX)와 백엔드(핵심 로직)를 명확히 분리하는 것입니다. Firestore는 데이터 저장소로 사용되며, 읽기 성능 최적화를 위해 비정규화 패턴을 적용합니다. 핵심 비즈니스 로직(매칭, 정산 등)은 안전하고 확장 가능한 Firebase Functions로 구현합니다. 프론트엔드는 역할 기반 접근 제어(RBAC)를 적용하고, 재사용 가능한 커스텀 훅을 적극 활용하여 개발 효율성과 유지보수성을 높입니다.",
      "summary": "`StaffListPage` 컴포넌트를 성공적으로 생성하고, `useCollection` 훅을 사용하여 Firestore의 스태프 목록을 가져와 표시했습니다. 또한, `App.tsx`와 `Layout.tsx`를 수정하여 라우팅 및 사이드바 메뉴를 추가함으로써 관리자가 이 기능에 접근할 수 있도록 완벽하게 통합했습니다. 작업이 계획대로 완료되었습니다.",
      "completedAt": "2025-06-23T18:11:25.144Z"
    },
    {
      "id": "5cd9801e-520b-4317-bbbc-f332b5a46994",
      "name": "2-1. 관리자 구인 공고 등록 기능",
      "description": "관리자가 대회별, 포지션별로 필요한 인원을 구인하는 공고를 등록하는 기능을 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "51126a5e-e8a4-4caf-b329-72bad7f43a44"
        }
      ],
      "createdAt": "2025-06-23T18:05:51.101Z",
      "updatedAt": "2025-06-23T18:18:00.264Z",
      "implementationGuide": "1. 관리자 대시보드에 '구인 공고 관리' 페이지(`JobPostingAdminPage.tsx`)를 추가합니다. 2. 이 페이지에서 관리자는 폼을 통해 대회 정보, 필요한 역할, 인원, 근무 조건 등을 입력하고 `jobPostings` 컬렉션에 새 문서를 생성합니다.",
      "verificationCriteria": "관리자가 구인 공고를 등록하면 `jobPostings` 컬렉션에 해당 데이터가 정상적으로 생성되는지 확인합니다.",
      "analysisResult": "이 프로젝트는 Firebase와 React를 사용하여 포커 대회 스태프를 관리하는 웹 플랫폼을 개발합니다. 핵심 아키텍처는 프론트엔드(UI/UX)와 백엔드(핵심 로직)를 명확히 분리하는 것입니다. Firestore는 데이터 저장소로 사용되며, 읽기 성능 최적화를 위해 비정규화 패턴을 적용합니다. 핵심 비즈니스 로직(매칭, 정산 등)은 안전하고 확장 가능한 Firebase Functions로 구현합니다. 프론트엔드는 역할 기반 접근 제어(RBAC)를 적용하고, 재사용 가능한 커스텀 훅을 적극 활용하여 개발 효율성과 유지보수성을 높입니다.",
      "summary": "구인 공고 등록 페이지(JobPostingAdminPage)를 생성하고 App.tsx 및 Layout.tsx에 통합하여 관리자가 새로운 구인 공고를 생성하고 Firestore에 저장할 수 있도록 기능을 구현했습니다. 코드 검토 결과, 모든 요구사항이 정상적으로 반영되었습니다.",
      "completedAt": "2025-06-23T18:18:00.263Z"
    },
    {
      "id": "0bbb0384-75ec-4a6d-934b-97ca4ded8e55",
      "name": "2-2. 스태프 지원 기능",
      "description": "스태프가 마이페이지 등에서 현재 진행 중인 구인 공고를 확인하고 지원하는 기능을 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "5cd9801e-520b-4317-bbbc-f332b5a46994"
        }
      ],
      "createdAt": "2025-06-23T18:05:51.101Z",
      "updatedAt": "2025-06-23T18:19:01.676Z",
      "implementationGuide": "1. 스태프용 마이페이지에 '지원 가능한 공고' 섹션을 추가합니다. 2. `useCollection('jobPostings')` 훅으로 공고 목록을 가져옵니다. 3. '지원하기' 버튼 클릭 시, `applications` 컬렉션에 현재 스태프의 `staffId`와 공고 `postId`를 포함하는 새 문서를 생성합니다.",
      "verificationCriteria": "스태프가 구인 공고에 지원했을 때, `applications` 컬렉션에 해당 지원 정보가 올바르게 기록되는지 확인합니다.",
      "analysisResult": "이 프로젝트는 Firebase와 React를 사용하여 포커 대회 스태프를 관리하는 웹 플랫폼을 개발합니다. 핵심 아키텍처는 프론트엔드(UI/UX)와 백엔드(핵심 로직)를 명확히 분리하는 것입니다. Firestore는 데이터 저장소로 사용되며, 읽기 성능 최적화를 위해 비정규화 패턴을 적용합니다. 핵심 비즈니스 로직(매칭, 정산 등)은 안전하고 확장 가능한 Firebase Functions로 구현합니다. 프론트엔드는 역할 기반 접근 제어(RBAC)를 적용하고, 재사용 가능한 커스텀 훅을 적극 활용하여 개발 효율성과 유지보수성을 높입니다.",
      "summary": "구인 공고를 조회하고 지원하는 JobBoardPage를 생성하고, App.tsx 및 Layout.tsx에 통합했습니다. 스태프가 'Apply Now' 버튼을 클릭하면 applications 컬렉션에 지원 내역이 기록되도록 구현하였으며, 코드 검토 결과 모든 요구사항이 정상적으로 반영되었습니다.",
      "completedAt": "2025-06-23T18:19:01.675Z"
    },
    {
      "id": "20e8f221-ede4-4b0f-9775-de97314fc1d9",
      "name": "2-3. Firebase Functions 자동 매칭 로직 개발",
      "description": "관리자가 요청 시, 특정 구인 공고에 지원한 스태프들을 조건(역할, 언어 등)에 따라 점수화하여 자동으로 배정하는 서버리스 함수를 개발합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "0bbb0384-75ec-4a6d-934b-97ca4ded8e55"
        }
      ],
      "createdAt": "2025-06-23T18:05:51.101Z",
      "updatedAt": "2025-06-23T18:24:00.085Z",
      "implementationGuide": "1. `functions/src/`에 `matchingService.ts` 파일을 생성합니다. 2. `onCall` 트리거를 사용하는 Callable Function `autoMatchStaff`를 정의합니다. 3. 함수 내에서 `jobPostingId`를 인자로 받아, 해당 공고의 조건과 지원자들의 프로필(`staffProfiles`)을 비교하여 매칭 점수를 계산합니다. 4. 점수가 높은 순으로 스태프를 선발하고, 해당 `applications` 문서의 상태를 '합격'으로 업데이트합니다.",
      "verificationCriteria": "자동 매칭 함수를 실행했을 때, 구인 조건에 가장 적합한 지원자들이 선별되고 `applications` 문서의 상태가 '합격'으로 변경되는지 검증합니다.",
      "analysisResult": "이 프로젝트는 Firebase와 React를 사용하여 포커 대회 스태프를 관리하는 웹 플랫폼을 개발합니다. 핵심 아키텍처는 프론트엔드(UI/UX)와 백엔드(핵심 로직)를 명확히 분리하는 것입니다. Firestore는 데이터 저장소로 사용되며, 읽기 성능 최적화를 위해 비정규화 패턴을 적용합니다. 핵심 비즈니스 로직(매칭, 정산 등)은 안전하고 확장 가능한 Firebase Functions로 구현합니다. 프론트엔드는 역할 기반 접근 제어(RBAC)를 적용하고, 재사용 가능한 커스텀 훅을 적극 활용하여 개발 효율성과 유지보수성을 높입니다.",
      "summary": "Firebase Functions에 `autoMatchStaff` callable 함수를 추가하여 자동 매칭 로직의 백엔드를 구현했습니다. 또한, JobPostingAdminPage를 수정하여 관리자가 등록된 공고 목록을 보고 'Auto Match' 버튼을 클릭해 해당 함수를 호출할 수 있도록 프론트엔드 기능을 구현했습니다. 코드 검토 결과 모든 요구사항이 정상적으로 반영되었습니다.",
      "completedAt": "2025-06-23T18:24:00.083Z"
    },
    {
      "id": "23b705d0-d8af-4ccf-a06d-4f833d45b9c0",
      "name": "3-1. 스케줄 확정 및 공지 기능",
      "description": "매칭(합격)된 스태프에게 근무 스케줄을 확정하고, 이를 시스템(마이페이지) 및 외부 채널(알림톡 등)을 통해 공지하는 기능을 개발합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "20e8f221-ede4-4b0f-9775-de97314fc1d9"
        }
      ],
      "createdAt": "2025-06-23T18:05:51.101Z",
      "updatedAt": "2025-06-23T18:36:32.102Z",
      "implementationGuide": "1. `applications` 문서의 상태가 '합격'으로 변경되는 것을 감지하는 Firestore Trigger Function(`onUpdate`)을 개발합니다. 2. 이 함수는 `schedules` 컬렉션에 확정된 근무 스케줄 문서를 생성합니다. 3. (선택사항) 외부 알림 서비스(카카오 알림톡 API 등)를 호출하여 스태프에게 알림을 보냅니다.",
      "verificationCriteria": "지원자의 상태가 '합격'으로 바뀌면, `schedules` 컬렉션에 해당 스태프의 근무 일정이 자동으로 생성되는지 확인합니다.",
      "analysisResult": "이 프로젝트는 Firebase와 React를 사용하여 포커 대회 스태프를 관리하는 웹 플랫폼을 개발합니다. 핵심 아키텍처는 프론트엔드(UI/UX)와 백엔드(핵심 로직)를 명확히 분리하는 것입니다. Firestore는 데이터 저장소로 사용되며, 읽기 성능 최적화를 위해 비정규화 패턴을 적용합니다. 핵심 비즈니스 로직(매칭, 정산 등)은 안전하고 확장 가능한 Firebase Functions로 구현합니다. 프론트엔드는 역할 기반 접근 제어(RBAC)를 적용하고, 재사용 가능한 커스텀 훅을 적극 활용하여 개발 효율성과 유지보수성을 높입니다.",
      "summary": "applications 문서의 상태가 'approved'로 변경될 때, 해당 지원자의 근무 일정을 schedules 컬렉션에 자동으로 생성하는 onApplicationStatusChange Firestore 트리거 함수를 개발하고 배포했습니다. 이를 통해 스케줄 확정 자동화의 기반을 마련했습니다. 코드 검토 결과 모든 요구사항이 정상적으로 반영되었습니다.",
      "completedAt": "2025-06-23T18:36:32.101Z"
    },
    {
      "id": "e75a60c2-09cd-439d-950e-2e6ec5debe8e",
      "name": "3-2. QR/GPS 기반 출퇴근 체크 기능",
      "description": "스태프가 모바일 환경에서 QR 코드를 스캔하거나 GPS 위치 인증을 통해 출근 및 퇴근을 기록하는 기능을 개발합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "23b705d0-d8af-4ccf-a06d-4f833d45b9c0"
        }
      ],
      "createdAt": "2025-06-23T18:05:51.101Z",
      "updatedAt": "2025-06-23T18:37:40.945Z",
      "implementationGuide": "1. 스태프용 마이페이지에 '출퇴근' 섹션을 만듭니다. 2. `react-qr-scanner` 컴포넌트를 사용하여 QR 코드 스캔 기능을 구현합니다. 3. 출퇴근 버튼 클릭 시, `workLogs` 컬렉션에 타임스탬프와 함께 출근/퇴근 기록을 생성합니다. 4. 퇴근 시에는 `settings`에 정의된 최소 근무 시간을 충족했는지 확인하는 로직을 추가합니다.",
      "verificationCriteria": "스태프가 QR 스캔으로 출근을 기록하면, `workLogs` 컬렉션에 정확한 시간 정보가 저장되는지 확인합니다.",
      "analysisResult": "이 프로젝트는 Firebase와 React를 사용하여 포커 대회 스태프를 관리하는 웹 플랫폼을 개발합니다. 핵심 아키텍처는 프론트엔드(UI/UX)와 백엔드(핵심 로직)를 명확히 분리하는 것입니다. Firestore는 데이터 저장소로 사용되며, 읽기 성능 최적화를 위해 비정규화 패턴을 적용합니다. 핵심 비즈니스 로직(매칭, 정산 등)은 안전하고 확장 가능한 Firebase Functions로 구현합니다. 프론트엔드는 역할 기반 접근 제어(RBAC)를 적용하고, 재사용 가능한 커스텀 훅을 적극 활용하여 개발 효율성과 유지보수성을 높입니다.",
      "summary": "QR 코드 스캔을 통한 출퇴근 기록 기능을 위해 `AttendancePage`를 생성하고, `react-qr-scanner` 라이브러리를 활용하여 QR 스캔 UI를 구현했습니다. 스캔 시 `workLogs` 컬렉션에 출근 또는 퇴근 기록이 타임스탬프와 함께 저장되도록 로직을 작성하고, 앱 라우팅 및 사이드바에 해당 페이지를 통합했습니다. 코드 검토 결과 모든 요구사항이 정상적으로 반영되었습니다.",
      "completedAt": "2025-06-23T18:37:40.944Z"
    },
    {
      "id": "e2ebc857-e1d3-4f7a-b335-22174dacaceb",
      "name": "3-3. 실시간 교대 현황판 개발",
      "description": "테이블 상태와 연동하여 딜러들의 근무, 휴식, 대기 상태를 실시간으로 보여주는 시각적인 대시보드 페이지를 개발합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "e75a60c2-09cd-439d-950e-2e6ec5debe8e"
        }
      ],
      "createdAt": "2025-06-23T18:05:51.101Z",
      "updatedAt": "2025-06-23T18:38:18.968Z",
      "implementationGuide": "1. 관리자용 페이지 `DealerRotationPage.tsx`를 생성합니다. 2. `useCollection('tables')`와 `useCollection('schedules')` 훅을 사용하여 테이블 및 근무 중인 딜러 정보를 실시간으로 가져옵니다. 3. 각 테이블에 어떤 딜러가 배정되었는지, 휴식 중인 딜러는 누구인지 등을 시각적으로 명확하게 표시합니다. 4. (선택사항) 드래그 앤 드롭으로 딜러를 테이블에 수동 배정하는 기능을 추가합니다.",
      "verificationCriteria": "관리자가 교대 현황판에서 각 테이블의 담당 딜러와 휴식 중인 딜러 정보를 실시간으로 정확하게 확인할 수 있는지 검증합니다.",
      "analysisResult": "이 프로젝트는 Firebase와 React를 사용하여 포커 대회 스태프를 관리하는 웹 플랫폼을 개발합니다. 핵심 아키텍처는 프론트엔드(UI/UX)와 백엔드(핵심 로직)를 명확히 분리하는 것입니다. Firestore는 데이터 저장소로 사용되며, 읽기 성능 최적화를 위해 비정규화 패턴을 적용합니다. 핵심 비즈니스 로직(매칭, 정산 등)은 안전하고 확장 가능한 Firebase Functions로 구현합니다. 프론트엔드는 역할 기반 접근 제어(RBAC)를 적용하고, 재사용 가능한 커스텀 훅을 적극 활용하여 개발 효율성과 유지보수성을 높입니다.",
      "summary": "기존의 DealerRotationPage를 실시간 교대 현황판으로 재구축했습니다. useCollection 훅을 사용하여 `staff` 및 `tables` 컬렉션의 데이터를 실시간으로 구독하고, 딜러의 상태(근무, 대기, 휴식)에 따라 분류하여 시각적으로 명확한 대시보드를 구현했습니다. 이를 통해 관리자는 딜러 인력 현황을 한눈에 파악할 수 있게 되었습니다. 코드 검토 결과 모든 요구사항이 정상적으로 반영되었습니다.",
      "completedAt": "2025-06-23T18:38:18.966Z"
    }
  ]
}