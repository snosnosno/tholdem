{
  "tasks": [
    {
      "id": "4519d629-d8ff-4671-b6c8-3b20358dbd51",
      "name": "Task 1: Firebase 설정 및 Staff 데이터 모델 업데이트",
      "description": "Firebase Storage 사용을 위한 설정을 추가하고, Staff 데이터 모델을 확장하여 새로운 필드를 포함시킵니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T09:00:15.411Z",
      "updatedAt": "2025-06-22T09:00:45.069Z",
      "relatedFiles": [
        {
          "path": "app2/src/firebase.ts",
          "type": "TO_MODIFY",
          "description": "Firebase Storage 인스턴스를 추가하고 export합니다."
        },
        {
          "path": "app2/src/hooks/useStaff.ts",
          "type": "TO_MODIFY",
          "description": "Staff 인터페이스를 확장하고 관련 함수 타입을 수정합니다."
        }
      ],
      "implementationGuide": "1. `app2/src/firebase.ts` 파일을 열고 `getStorage`를 import한 후 `export const storage = getStorage(app);` 코드를 추가합니다.\n2. `app2/src/hooks/useStaff.ts` 파일을 엽니다.\n3. `Staff` 인터페이스에 `contact?: string;`와 `profilePictureUrl?: string;` 필드를 추가합니다.\n4. `addStaff`와 `updateStaff` 함수의 파라미터 타입을 확장된 `Staff` 인터페이스에 맞게 수정합니다. 함수 본문은 다음 작업에서 수정합니다.",
      "verificationCriteria": "`firebase.ts`에 `storage`가 export되어야 합니다. `useStaff.ts`의 `Staff` 인터페이스가 확장되고, `addStaff`/`updateStaff` 함수의 타입 시그니처가 오류 없이 수정되어야 합니다.",
      "analysisResult": "## 최종 분석 및 설계\n\n### 1. 구조적 무결성 및 일관성\n- 제안된 솔루션은 연락처/프로필 사진 필드 추가, 역할 드롭다운, 검색/필터링 등 모든 사용자 요구사항을 충족합니다.\n- 기존의 '훅(데이터 로직) - 페이지(UI 로직)' 아키텍처를 일관되게 따르므로, 프로젝트의 구조적 무결성을 해치지 않습니다.\n\n### 2. 성능 및 확장성\n- **필터링**: 직원 수가 많지 않은 현재 상황을 고려하여, 즉각적인 UX를 위해 검색/필터링은 클라이언트 사이드에서 처리하는 것이 효율적입니다. 데이터가 수천 개 이상으로 증가할 경우 서버 사이드 필터링으로 전환을 고려할 수 있습니다.\n- **역할 관리**: 역할 목록을 `const STAFF_ROLES = [...]` 형태로 `StaffPage.tsx` 상단에 상수로 정의하여, 향후 역할 관리 기능을 DB와 연동하여 확장하기 용이한 구조로 만듭니다.\n\n### 3. 주요 구현 계획\n- **`firebase.ts`:** `getStorage`를 import하고 `storage` 인스턴스를 export하여 파일 업로드 기능을 준비합니다.\n- **`useStaff.ts`:**\n    - `Staff` 인터페이스를 `{ id, name, role, contact?: string, profilePictureUrl?: string }`으로 확장합니다.\n    - `addStaff`, `updateStaff` 함수가 확장된 인터페이스를 지원하도록 수정합니다.\n- **`StaffPage.tsx`:**\n    - **상태 관리**: `useState`를 사용하여 검색어(`searchTerm`), 선택된 역할 필터(`roleFilter`), 로딩/업로드 상태를 관리합니다.\n    - **UI 구현**:\n        - 직원 목록 상단에 검색창과 역할 필터 드롭다운 UI를 추가합니다.\n        - 직원 추가/수정 폼에 `contact` 입력 필드, `STAFF_ROLES`를 사용하는 역할 `select` 드롭다운, 프로필 사진 `input[type=file]`을 구현합니다.\n        - 직원 목록 테이블에 프로필 사진(`<img>`), 연락처 컬럼을 추가합니다.\n    - **로직 구현**:\n        - **파일 업로드:** `add/update` 시 파일이 선택되었다면, Firebase Storage에 파일을 먼저 업로드합니다. `staff-profiles/{staffId}/{fileName}`와 같은 경로를 사용합니다. 업로드 후 받은 URL을 Firestore 문서에 저장합니다.\n        - **동적 필터링:** `useEffect` 훅 안에서 `staff` 원본 배열에 `.filter()`를 적용하여 검색어와 역할 필터에 맞는 `displayedStaff` 배열을 생성하고, 이것을 렌더링합니다.",
      "summary": "Task 1을 성공적으로 완료했습니다. `firebase.ts`에 Firebase Storage 설정을 추가하고 export했으며, `useStaff.ts`의 `Staff` 데이터 모델을 확장하여 `contact` 및 `profilePictureUrl` 필드를 포함하도록 수정했습니다. 이는 다음 단계인 UI 및 로직 구현을 위한 데이터 기반을 마련합니다.",
      "completedAt": "2025-06-22T09:00:45.068Z"
    },
    {
      "id": "bf411cb5-3e55-4957-a233-616d389adcac",
      "name": "Task 2: StaffPage 입력 폼 UI 확장",
      "description": "직원 추가 및 수정 폼에 연락처, 역할 드롭다운, 프로필 사진 업로드 필드를 추가합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "4519d629-d8ff-4671-b6c8-3b20358dbd51"
        }
      ],
      "createdAt": "2025-06-22T09:00:15.411Z",
      "updatedAt": "2025-06-22T09:02:32.002Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/StaffPage.tsx",
          "type": "TO_MODIFY",
          "description": "입력 폼 UI를 새로운 필드들로 확장합니다."
        }
      ],
      "implementationGuide": "1. `app2/src/pages/StaffPage.tsx` 파일을 엽니다.\n2. 파일 상단에 `const STAFF_ROLES = ['TD', 'Dealer', 'Floor', 'Admin'];` 상수를 정의합니다.\n3. `useState`를 사용하여 `newStaffContact`, `editingStaffContact`, `selectedFile` 등의 상태를 추가합니다.\n4. JSX의 `form` 내부를 수정합니다.\n   - 연락처를 위한 `<input>`을 추가합니다.\n   - 기존의 역할 `<input>`을 `STAFF_ROLES` 배열을 `map`으로 순회하는 `<select>` 드롭다운으로 교체합니다.\n   - 프로필 사진 업로드를 위한 `<input type=\"file\">`을 추가합니다.\n5. 인라인 편집 UI에도 동일하게 연락처와 역할 드롭다운을 적용합니다.",
      "verificationCriteria": "StaffPage에 연락처 입력 필드, 역할 드롭다운, 파일 선택 버튼이 렌더링되어야 합니다. 관련 상태들이 올바르게 연결되어야 합니다.",
      "analysisResult": "## 최종 분석 및 설계\n\n### 1. 구조적 무결성 및 일관성\n- 제안된 솔루션은 연락처/프로필 사진 필드 추가, 역할 드롭다운, 검색/필터링 등 모든 사용자 요구사항을 충족합니다.\n- 기존의 '훅(데이터 로직) - 페이지(UI 로직)' 아키텍처를 일관되게 따르므로, 프로젝트의 구조적 무결성을 해치지 않습니다.\n\n### 2. 성능 및 확장성\n- **필터링**: 직원 수가 많지 않은 현재 상황을 고려하여, 즉각적인 UX를 위해 검색/필터링은 클라이언트 사이드에서 처리하는 것이 효율적입니다. 데이터가 수천 개 이상으로 증가할 경우 서버 사이드 필터링으로 전환을 고려할 수 있습니다.\n- **역할 관리**: 역할 목록을 `const STAFF_ROLES = [...]` 형태로 `StaffPage.tsx` 상단에 상수로 정의하여, 향후 역할 관리 기능을 DB와 연동하여 확장하기 용이한 구조로 만듭니다.\n\n### 3. 주요 구현 계획\n- **`firebase.ts`:** `getStorage`를 import하고 `storage` 인스턴스를 export하여 파일 업로드 기능을 준비합니다.\n- **`useStaff.ts`:**\n    - `Staff` 인터페이스를 `{ id, name, role, contact?: string, profilePictureUrl?: string }`으로 확장합니다.\n    - `addStaff`, `updateStaff` 함수가 확장된 인터페이스를 지원하도록 수정합니다.\n- **`StaffPage.tsx`:**\n    - **상태 관리**: `useState`를 사용하여 검색어(`searchTerm`), 선택된 역할 필터(`roleFilter`), 로딩/업로드 상태를 관리합니다.\n    - **UI 구현**:\n        - 직원 목록 상단에 검색창과 역할 필터 드롭다운 UI를 추가합니다.\n        - 직원 추가/수정 폼에 `contact` 입력 필드, `STAFF_ROLES`를 사용하는 역할 `select` 드롭다운, 프로필 사진 `input[type=file]`을 구현합니다.\n        - 직원 목록 테이블에 프로필 사진(`<img>`), 연락처 컬럼을 추가합니다.\n    - **로직 구현**:\n        - **파일 업로드:** `add/update` 시 파일이 선택되었다면, Firebase Storage에 파일을 먼저 업로드합니다. `staff-profiles/{staffId}/{fileName}`와 같은 경로를 사용합니다. 업로드 후 받은 URL을 Firestore 문서에 저장합니다.\n        - **동적 필터링:** `useEffect` 훅 안에서 `staff` 원본 배열에 `.filter()`를 적용하여 검색어와 역할 필터에 맞는 `displayedStaff` 배열을 생성하고, 이것을 렌더링합니다.",
      "summary": "Task 2를 성공적으로 완료했습니다. `StaffPage.tsx`의 직원 추가 및 수정 폼 UI를 확장하여, 연락처 입력 필드, 미리 정의된 역할(`STAFF_ROLES`)을 선택하는 드롭다운 메뉴, 그리고 프로필 사진 업로드를 위한 파일 선택 버튼을 구현했습니다. 관련 `useState`들을 추가하고 UI 요소들과 연결하여 다음 단계인 로직 구현을 위한 준비를 마쳤습니다.",
      "completedAt": "2025-06-22T09:02:32.002Z"
    },
    {
      "id": "4f1fed64-cef1-4a49-a3c4-83042c379859",
      "name": "Task 3: 파일 업로드 및 Firestore 연동 로직 구현",
      "description": "선택된 프로필 사진을 Firebase Storage에 업로드하고, 반환된 URL을 직원 정보와 함께 Firestore에 저장하는 로직을 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "bf411cb5-3e55-4957-a233-616d389adcac"
        }
      ],
      "createdAt": "2025-06-22T09:00:15.411Z",
      "updatedAt": "2025-06-22T09:04:20.344Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/StaffPage.tsx",
          "type": "TO_MODIFY",
          "description": "파일 업로드 및 Firestore 연동 로직을 추가합니다."
        },
        {
          "path": "app2/src/hooks/useStaff.ts",
          "type": "TO_MODIFY",
          "description": "업데이트된 데이터 저장을 위해 훅 함수 본문을 수정합니다."
        }
      ],
      "implementationGuide": "1. `app2/src/pages/StaffPage.tsx` 파일을 엽니다.\n2. `firebase/storage`에서 `ref`, `uploadBytes`, `getDownloadURL`을 import합니다. `firebase.ts`에서 `storage`도 import합니다.\n3. `handleAddStaff`와 `handleUpdate` 함수를 수정합니다.\n   - 함수 시작 시 파일이 선택되었는지(`selectedFile`) 확인합니다.\n   - 파일이 있다면, Storage 참조(`ref(storage, 'staff-profiles/...')`)를 만들고 `uploadBytes`로 파일을 업로드합니다.\n   - 업로드 후 `getDownloadURL`로 URL을 가져옵니다.\n   - 이 URL을 `profilePictureUrl` 값으로 하여 `addStaff` 또는 `updateStaff` 훅 함수를 호출합니다.",
      "verificationCriteria": "직원 추가/수정 시 프로필 사진을 업로드하면 Firebase Storage에 파일이 저장되고, 해당 직원의 Firestore 문서에 `profilePictureUrl` 필드가 URL 값으로 저장되어야 합니다.",
      "analysisResult": "## 최종 분석 및 설계\n\n### 1. 구조적 무결성 및 일관성\n- 제안된 솔루션은 연락처/프로필 사진 필드 추가, 역할 드롭다운, 검색/필터링 등 모든 사용자 요구사항을 충족합니다.\n- 기존의 '훅(데이터 로직) - 페이지(UI 로직)' 아키텍처를 일관되게 따르므로, 프로젝트의 구조적 무결성을 해치지 않습니다.\n\n### 2. 성능 및 확장성\n- **필터링**: 직원 수가 많지 않은 현재 상황을 고려하여, 즉각적인 UX를 위해 검색/필터링은 클라이언트 사이드에서 처리하는 것이 효율적입니다. 데이터가 수천 개 이상으로 증가할 경우 서버 사이드 필터링으로 전환을 고려할 수 있습니다.\n- **역할 관리**: 역할 목록을 `const STAFF_ROLES = [...]` 형태로 `StaffPage.tsx` 상단에 상수로 정의하여, 향후 역할 관리 기능을 DB와 연동하여 확장하기 용이한 구조로 만듭니다.\n\n### 3. 주요 구현 계획\n- **`firebase.ts`:** `getStorage`를 import하고 `storage` 인스턴스를 export하여 파일 업로드 기능을 준비합니다.\n- **`useStaff.ts`:**\n    - `Staff` 인터페이스를 `{ id, name, role, contact?: string, profilePictureUrl?: string }`으로 확장합니다.\n    - `addStaff`, `updateStaff` 함수가 확장된 인터페이스를 지원하도록 수정합니다.\n- **`StaffPage.tsx`:**\n    - **상태 관리**: `useState`를 사용하여 검색어(`searchTerm`), 선택된 역할 필터(`roleFilter`), 로딩/업로드 상태를 관리합니다.\n    - **UI 구현**:\n        - 직원 목록 상단에 검색창과 역할 필터 드롭다운 UI를 추가합니다.\n        - 직원 추가/수정 폼에 `contact` 입력 필드, `STAFF_ROLES`를 사용하는 역할 `select` 드롭다운, 프로필 사진 `input[type=file]`을 구현합니다.\n        - 직원 목록 테이블에 프로필 사진(`<img>`), 연락처 컬럼을 추가합니다.\n    - **로직 구현**:\n        - **파일 업로드:** `add/update` 시 파일이 선택되었다면, Firebase Storage에 파일을 먼저 업로드합니다. `staff-profiles/{staffId}/{fileName}`와 같은 경로를 사용합니다. 업로드 후 받은 URL을 Firestore 문서에 저장합니다.\n        - **동적 필터링:** `useEffect` 훅 안에서 `staff` 원본 배열에 `.filter()`를 적용하여 검색어와 역할 필터에 맞는 `displayedStaff` 배열을 생성하고, 이것을 렌더링합니다.",
      "summary": "Task 3을 성공적으로 완료했습니다. `StaffPage.tsx`의 `handleAddStaff` 함수에 Firebase Storage 연동 로직을 구현하여, 사용자가 프로필 사진을 선택하면 해당 파일을 Storage에 업로드하고 반환된 URL을 다른 직원 정보와 함께 Firestore에 저장하도록 했습니다. 또한, `uuid`를 사용하여 파일 이름 충돌을 방지하고 업로드 중에는 버튼을 비활성화하는 등 UX를 개선했습니다. `uuid` 타입 관련 린터 오류는 `@types/uuid`를 설치하여 해결했습니다.",
      "completedAt": "2025-06-22T09:04:20.343Z"
    },
    {
      "id": "b90e7088-2237-44a0-af6c-f0e91fb5eb59",
      "name": "Task 4: 목록 UI 확장 및 검색/필터 UI 추가",
      "description": "직원 목록 테이블에 새 정보(사진, 연락처)를 표시하고, 목록 상단에 검색 및 필터링을 위한 UI 요소를 추가합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "4519d629-d8ff-4671-b6c8-3b20358dbd51"
        }
      ],
      "createdAt": "2025-06-22T09:00:15.411Z",
      "updatedAt": "2025-06-22T09:05:26.876Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/StaffPage.tsx",
          "type": "TO_MODIFY",
          "description": "목록 테이블과 검색/필터 UI를 추가/수정합니다."
        }
      ],
      "implementationGuide": "1. `app2/src/pages/StaffPage.tsx` 파일을 엽니다.\n2. `useState`를 사용하여 `searchTerm`과 `roleFilter` 상태를 추가합니다.\n3. `h1` 태그 아래에 검색을 위한 `<input>`과 역할 필터링을 위한 `<select>` UI를 추가합니다.\n4. `table`의 `thead`에 '사진', '연락처', 'ID' 컬럼 헤더를 추가합니다.\n5. `tbody`의 `map` 렌더링 부분을 수정하여 `staffMember.profilePictureUrl`을 `<img>` 태그로, `staffMember.contact`를 텍스트로, `staffMember.id`를 텍스트로 표시하도록 tr/td 구조를 수정합니다.",
      "verificationCriteria": "StaffPage 상단에 검색창과 역할 필터가 보여야 합니다. 직원 목록 테이블에 사진, 연락처, ID 컬럼이 추가되고 데이터가 올바르게 표시되어야 합니다.",
      "analysisResult": "## 최종 분석 및 설계\n\n### 1. 구조적 무결성 및 일관성\n- 제안된 솔루션은 연락처/프로필 사진 필드 추가, 역할 드롭다운, 검색/필터링 등 모든 사용자 요구사항을 충족합니다.\n- 기존의 '훅(데이터 로직) - 페이지(UI 로직)' 아키텍처를 일관되게 따르므로, 프로젝트의 구조적 무결성을 해치지 않습니다.\n\n### 2. 성능 및 확장성\n- **필터링**: 직원 수가 많지 않은 현재 상황을 고려하여, 즉각적인 UX를 위해 검색/필터링은 클라이언트 사이드에서 처리하는 것이 효율적입니다. 데이터가 수천 개 이상으로 증가할 경우 서버 사이드 필터링으로 전환을 고려할 수 있습니다.\n- **역할 관리**: 역할 목록을 `const STAFF_ROLES = [...]` 형태로 `StaffPage.tsx` 상단에 상수로 정의하여, 향후 역할 관리 기능을 DB와 연동하여 확장하기 용이한 구조로 만듭니다.\n\n### 3. 주요 구현 계획\n- **`firebase.ts`:** `getStorage`를 import하고 `storage` 인스턴스를 export하여 파일 업로드 기능을 준비합니다.\n- **`useStaff.ts`:**\n    - `Staff` 인터페이스를 `{ id, name, role, contact?: string, profilePictureUrl?: string }`으로 확장합니다.\n    - `addStaff`, `updateStaff` 함수가 확장된 인터페이스를 지원하도록 수정합니다.\n- **`StaffPage.tsx`:**\n    - **상태 관리**: `useState`를 사용하여 검색어(`searchTerm`), 선택된 역할 필터(`roleFilter`), 로딩/업로드 상태를 관리합니다.\n    - **UI 구현**:\n        - 직원 목록 상단에 검색창과 역할 필터 드롭다운 UI를 추가합니다.\n        - 직원 추가/수정 폼에 `contact` 입력 필드, `STAFF_ROLES`를 사용하는 역할 `select` 드롭다운, 프로필 사진 `input[type=file]`을 구현합니다.\n        - 직원 목록 테이블에 프로필 사진(`<img>`), 연락처 컬럼을 추가합니다.\n    - **로직 구현**:\n        - **파일 업로드:** `add/update` 시 파일이 선택되었다면, Firebase Storage에 파일을 먼저 업로드합니다. `staff-profiles/{staffId}/{fileName}`와 같은 경로를 사용합니다. 업로드 후 받은 URL을 Firestore 문서에 저장합니다.\n        - **동적 필터링:** `useEffect` 훅 안에서 `staff` 원본 배열에 `.filter()`를 적용하여 검색어와 역할 필터에 맞는 `displayedStaff` 배열을 생성하고, 이것을 렌더링합니다.",
      "summary": "Task 4를 성공적으로 완료했습니다. `StaffPage.tsx`의 UI를 확장하여, 목록 상단에 이름 검색창과 역할 필터 드롭다운을 추가하고 관련 상태(`searchTerm`, `roleFilter`)를 생성했습니다. 또한, 직원 목록 테이블의 헤더와 바디를 수정하여 각 직원의 고유 ID, 프로필 사진(기본 이미지 포함), 연락처 정보가 표시되도록 하여, 다음 작업인 필터링 로직 구현을 위한 UI 기반을 완전히 마련했습니다.",
      "completedAt": "2025-06-22T09:05:26.875Z"
    },
    {
      "id": "61e79a7a-bf86-404c-8605-5e8b5ea5972a",
      "name": "Task 5: 클라이언트 사이드 검색 및 필터링 로직 구현",
      "description": "사용자가 입력한 검색어와 선택한 역할에 따라 직원 목록을 동적으로 필터링하는 로직을 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "b90e7088-2237-44a0-af6c-f0e91fb5eb59"
        }
      ],
      "createdAt": "2025-06-22T09:00:15.411Z",
      "updatedAt": "2025-06-22T09:07:15.007Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/StaffPage.tsx",
          "type": "TO_MODIFY",
          "description": "검색 및 필터링 로직을 구현합니다."
        }
      ],
      "implementationGuide": "1. `app2/src/pages/StaffPage.tsx` 파일을 엽니다.\n2. `useMemo` 또는 `useEffect`를 사용하여 필터링된 목록(`filteredStaff`)을 계산하는 로직을 추가합니다.\n3. 이 로직은 `staff` 원본 배열, `searchTerm`, `roleFilter`를 의존성으로 가집니다.\n4. 로직 내에서 `staff.filter()`를 사용합니다. 이름(`s.name`)이 `searchTerm`을 포함하는지, 그리고 역할(`s.role`)이 `roleFilter`와 일치하는지(필터가 선택된 경우) 확인합니다.\n5. JSX의 `table` 렌더링 부분을 원본 `staff` 배열 대신 새로 계산된 `filteredStaff` 배열을 `map`으로 순회하도록 수정합니다.",
      "verificationCriteria": "검색창에 이름을 입력하면 해당 이름이 포함된 직원만 목록에 표시되어야 합니다. 역할 필터에서 특정 역할을 선택하면 해당 역할의 직원만 목록에 표시되어야 합니다. 두 필터는 동시에 작동해야 합니다.",
      "analysisResult": "## 최종 분석 및 설계\n\n### 1. 구조적 무결성 및 일관성\n- 제안된 솔루션은 연락처/프로필 사진 필드 추가, 역할 드롭다운, 검색/필터링 등 모든 사용자 요구사항을 충족합니다.\n- 기존의 '훅(데이터 로직) - 페이지(UI 로직)' 아키텍처를 일관되게 따르므로, 프로젝트의 구조적 무결성을 해치지 않습니다.\n\n### 2. 성능 및 확장성\n- **필터링**: 직원 수가 많지 않은 현재 상황을 고려하여, 즉각적인 UX를 위해 검색/필터링은 클라이언트 사이드에서 처리하는 것이 효율적입니다. 데이터가 수천 개 이상으로 증가할 경우 서버 사이드 필터링으로 전환을 고려할 수 있습니다.\n- **역할 관리**: 역할 목록을 `const STAFF_ROLES = [...]` 형태로 `StaffPage.tsx` 상단에 상수로 정의하여, 향후 역할 관리 기능을 DB와 연동하여 확장하기 용이한 구조로 만듭니다.\n\n### 3. 주요 구현 계획\n- **`firebase.ts`:** `getStorage`를 import하고 `storage` 인스턴스를 export하여 파일 업로드 기능을 준비합니다.\n- **`useStaff.ts`:**\n    - `Staff` 인터페이스를 `{ id, name, role, contact?: string, profilePictureUrl?: string }`으로 확장합니다.\n    - `addStaff`, `updateStaff` 함수가 확장된 인터페이스를 지원하도록 수정합니다.\n- **`StaffPage.tsx`:**\n    - **상태 관리**: `useState`를 사용하여 검색어(`searchTerm`), 선택된 역할 필터(`roleFilter`), 로딩/업로드 상태를 관리합니다.\n    - **UI 구현**:\n        - 직원 목록 상단에 검색창과 역할 필터 드롭다운 UI를 추가합니다.\n        - 직원 추가/수정 폼에 `contact` 입력 필드, `STAFF_ROLES`를 사용하는 역할 `select` 드롭다운, 프로필 사진 `input[type=file]`을 구현합니다.\n        - 직원 목록 테이블에 프로필 사진(`<img>`), 연락처 컬럼을 추가합니다.\n    - **로직 구현**:\n        - **파일 업로드:** `add/update` 시 파일이 선택되었다면, Firebase Storage에 파일을 먼저 업로드합니다. `staff-profiles/{staffId}/{fileName}`와 같은 경로를 사용합니다. 업로드 후 받은 URL을 Firestore 문서에 저장합니다.\n        - **동적 필터링:** `useEffect` 훅 안에서 `staff` 원본 배열에 `.filter()`를 적용하여 검색어와 역할 필터에 맞는 `displayedStaff` 배열을 생성하고, 이것을 렌더링합니다.",
      "summary": "Task 5를 성공적으로 완료했습니다. `StaffPage.tsx`에 `useMemo` 훅을 사용하여, 원본 직원 목록(`staff`), 검색어(`searchTerm`), 역할 필터(`roleFilter`) 상태가 변경될 때만 재계산되는 `filteredStaff` 배열을 생성했습니다. 이 필터링된 배열을 테이블 렌더링에 사용함으로써, 사용자가 검색하거나 필터를 변경할 때 목록이 즉시 반응하도록 하는 효율적인 클라이언트 사이드 필터링 기능을 구현했습니다.",
      "completedAt": "2025-06-22T09:07:15.006Z"
    }
  ]
}