{
  "tasks": [
    {
      "id": "3b239c8a-ab44-4f47-9073-483e09e4942a",
      "name": "1. Firebase 인증 및 전역 상태 관리 설정",
      "description": "Firebase Authentication을 설정하고, 애플리케이션 전역에서 사용자의 인증 상태를 관리할 수 있는 `AuthContext`를 구현합니다. 이 작업은 다른 모든 인증 관련 기능의 기반이 됩니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-21T13:10:39.069Z",
      "updatedAt": "2025-06-21T15:06:19.501Z",
      "relatedFiles": [
        {
          "path": "app2/src/contexts/AuthContext.tsx",
          "type": "CREATE",
          "description": "인증 상태를 전역으로 관리하기 위한 새로운 컨텍스트 파일"
        },
        {
          "path": "app2/src/firebase.ts",
          "type": "REFERENCE",
          "description": "Firebase 앱 인스턴스 및 인증 객체를 가져오기 위해 참조"
        },
        {
          "path": "app2/src/App.tsx",
          "type": "TO_MODIFY",
          "description": "생성된 AuthProvider를 적용하기 위해 수정"
        }
      ],
      "implementationGuide": "1. `src/contexts/` 폴더에 `AuthContext.tsx` 파일을 생성합니다. 2. `React.createContext`를 사용하여 `AuthContext`를 정의하고, 사용자 정보, 로그인 상태, 로딩 상태를 포함하는 컨텍스트 값의 타입을 정의합니다. 3. `AuthProvider` 컴포넌트를 구현하여 `onAuthStateChanged` 리스너를 통해 Firebase의 인증 상태 변경을 감지하고, 상태를 업데이트합니다. 4. `useAuth` 커스텀 훅을 만들어 하위 컴포넌트에서 쉽게 컨텍스트에 접근할 수 있도록 합니다. 5. `App.tsx` 또는 `index.tsx`의 최상단을 `AuthProvider`로 감싸 전역적으로 상태를 제공합니다.",
      "verificationCriteria": "`AuthProvider`로 감싼 하위 컴포넌트에서 `useAuth` 훅을 호출했을 때, 현재 로그인 상태(초기에는 `null` 또는 로그아웃 상태)와 `loading` 상태를 정상적으로 받아올 수 있어야 합니다.",
      "summary": "`AuthContext`를 성공적으로 생성하고 `App.tsx`에 적용하여 앱 전반에 걸쳐 인증 상태를 관리할 수 있는 기반을 마련했습니다. 이는 다른 모든 인증 관련 기능의 필수 전제 조건을 완벽하게 충족합니다.",
      "completedAt": "2025-06-21T15:06:19.498Z"
    },
    {
      "id": "c7cba975-8e13-44c1-81af-e9854fc3c23f",
      "name": "2. 관리자 로그인 UI 및 기능 구현",
      "description": "관리자가 이메일과 비밀번호로 로그인할 수 있는 UI를 만들고, `AuthContext`와 연동하여 실제 로그인 기능을 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "3b239c8a-ab44-4f47-9073-483e09e4942a"
        }
      ],
      "createdAt": "2025-06-21T13:10:39.069Z",
      "updatedAt": "2025-06-21T15:06:33.492Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/AdminLogin.tsx",
          "type": "TO_MODIFY",
          "description": "로그인 폼 UI와 인증 로직을 추가하기 위해 수정"
        },
        {
          "path": "app2/src/contexts/AuthContext.tsx",
          "type": "REFERENCE",
          "description": "로그인 함수를 사용하기 위해 참조"
        }
      ],
      "implementationGuide": "1. `src/pages/AdminLogin.tsx` 페이지에 이메일, 비밀번호 입력을 위한 `input`과 `button`으로 구성된 로그인 폼을 Tailwind CSS를 사용하여 스타일링합니다. 2. `useState`를 사용하여 각 입력 필드의 상태를 관리합니다. 3. `useAuth` 훅에서 제공하는 로그인 함수(signInWithEmailAndPassword 래핑)를 호출하여, 폼 제출 시 Firebase에 인증을 요청합니다. 4. 로그인 성공 시, 사용자를 관리자 대시보드로 리다이렉트하고, 실패 시 에러 메시지를 표시합니다.",
      "verificationCriteria": "`AdminLogin.tsx` 페이지에서 유효한 관리자 계정 정보를 입력하고 로그인 버튼을 클릭하면, 관리자 대시보드로 성공적으로 이동해야 합니다. 잘못된 정보를 입력하면 에러 메시지가 표시되어야 합니다.",
      "summary": "`AdminLogin.tsx` 페이지를 `AuthContext`의 `signIn` 함수와 연동하여 실제 Firebase 이메일/비밀번호 로그인 기능을 성공적으로 구현했습니다. 사용자 경험을 고려하여 로그인 성공 시 대시보드로 리다이렉트하고, 실패 시 명확한 에러 메시지를 표시하도록 처리했습니다.",
      "completedAt": "2025-06-21T15:06:33.490Z"
    },
    {
      "id": "ff379da7-b289-4a26-ab49-00ac2c23a0af",
      "name": "3. 보호된 라우트(Private Route) 구현",
      "description": "로그인한 관리자만 접근할 수 있는 페이지들을 보호하기 위한 `PrivateRoute` 컴포넌트를 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "3b239c8a-ab44-4f47-9073-483e09e4942a"
        }
      ],
      "createdAt": "2025-06-21T13:10:39.070Z",
      "updatedAt": "2025-06-21T15:06:44.545Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/PrivateRoute.tsx",
          "type": "CREATE",
          "description": "인증 여부에 따라 접근을 제어하는 컴포넌트"
        },
        {
          "path": "app2/src/App.tsx",
          "type": "TO_MODIFY",
          "description": "관리자 페이지 라우팅에 PrivateRoute를 적용하기 위해 수정"
        }
      ],
      "implementationGuide": "1. `src/components/` 폴더에 `PrivateRoute.tsx` 파일을 생성합니다. 2. 이 컴포넌트는 `useAuth` 훅을 사용하여 현재 사용자의 로그인 상태를 확인합니다. 3. 로그인 상태이고 로딩 중이 아니라면 자식 컴포넌트(Outlet)를 렌더링하고, 그렇지 않다면 `/login` 경로로 리다이렉트하는 `Navigate` 컴포넌트를 반환합니다. 4. `App.tsx`의 라우팅 설정에서 관리자 전용 페이지들을 이 `PrivateRoute`로 감싸도록 수정합니다.",
      "verificationCriteria": "로그인하지 않은 상태에서 관리자 페이지 URL(예: `/participants`)에 직접 접근 시, 로그인 페이지(`/login`)로 자동으로 리다이렉트되어야 합니다. 로그인 후에는 해당 페이지에 정상적으로 접근할 수 있어야 합니다.",
      "summary": "`PrivateRoute` 컴포넌트를 구현하고 `App.tsx`의 라우팅 시스템에 적용하여, 로그인한 관리자만 접근할 수 있도록 페이지를 성공적으로 보호했습니다. 인증 상태를 확인하는 동안 로딩 UI를 보여주어 사용자 경험을 개선했습니다.",
      "completedAt": "2025-06-21T15:06:44.542Z"
    },
    {
      "id": "de325042-55ae-4e50-8119-a6001ec9b05b",
      "name": "4. 참가자 데이터 관리 훅(useParticipants) 구현",
      "description": "Firestore의 'participants' 컬렉션과 상호작용하여 참가자 데이터를 생성, 조회, 수정, 삭제하는 비즈니스 로직을 담은 커스텀 훅 `useParticipants`를 구현합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-21T13:10:39.070Z",
      "updatedAt": "2025-06-21T15:06:58.442Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useParticipants.ts",
          "type": "CREATE",
          "description": "참가자 데이터 CRUD 및 실시간 조회를 위한 커스텀 훅"
        },
        {
          "path": "app2/src/firebase.ts",
          "type": "REFERENCE",
          "description": "Firestore 인스턴스를 사용하기 위해 참조"
        }
      ],
      "implementationGuide": "1. `src/hooks/` 폴더에 `useParticipants.ts` 파일을 생성합니다. 2. 이 훅 내부에 Firestore와 통신하는 함수(addParticipant, updateParticipant, deleteParticipant)들을 구현합니다. 3. `onSnapshot`을 사용하여 'participants' 컬렉션을 실시간으로 구독하고, 받아온 데이터를 `useState`를 통해 상태로 관리하여 반환하는 함수(getParticipants)를 구현합니다. 4. 로딩 및 에러 상태도 함께 관리하여 반환합니다.",
      "verificationCriteria": "해당 훅을 사용하는 컴포넌트에서 참가자 목록을 성공적으로 불러올 수 있어야 하며, 데이터 추가/수정/삭제 함수 호출 시 Firestore 데이터베이스에 변경사항이 올바르게 반영되어야 합니다.",
      "summary": "Firestore의 `participants` 컬렉션에 대한 CRUD 및 실시간 구독 로직을 포함하는 재사용 가능한 `useParticipants` 커스텀 훅을 성공적으로 구현했습니다. 이를 통해 참가자 데이터 관리 로직을 UI로부터 분리하여 코드의 재사용성과 유지보수성을 크게 향상시켰습니다.",
      "completedAt": "2025-06-21T15:06:58.440Z"
    },
    {
      "id": "676e56bf-bce2-4be4-94a4-58b84a50a58c",
      "name": "5. 참가자 관리 페이지 UI 및 기능 연동",
      "description": "관리자가 참가자를 관리할 수 있는 페이지의 UI를 구현하고, `useParticipants` 훅과 연동하여 실제 기능을 완성합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "de325042-55ae-4e50-8119-a6001ec9b05b"
        }
      ],
      "createdAt": "2025-06-21T13:10:39.070Z",
      "updatedAt": "2025-06-21T15:07:09.749Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/ParticipantsPage.tsx",
          "type": "TO_MODIFY",
          "description": "참가자 목록 UI 및 데이터 연동 로직 구현"
        },
        {
          "path": "app2/src/hooks/useParticipants.ts",
          "type": "REFERENCE",
          "description": "참가자 데이터 관리를 위해 훅을 참조"
        }
      ],
      "implementationGuide": "1. `src/pages/ParticipantsPage.tsx`에서 `useParticipants` 훅을 호출하여 참가자 목록, 로딩/에러 상태를 가져옵니다. 2. 가져온 목록을 Tailwind CSS를 사용하여 테이블 형태로 표시합니다. 3. 참가자 추가 버튼과 모달(또는 별도 폼)을 구현하고, `addParticipant` 함수와 연동합니다. 4. 각 참가자 행에 수정 및 삭제 버튼을 추가하고, `updateParticipant`, `deleteParticipant` 함수와 연동합니다.",
      "verificationCriteria": "참가자 관리 페이지에 접속했을 때 Firestore에 저장된 참가자 목록이 정확히 표시되어야 합니다. 페이지 내에서 참가자를 추가, 수정, 삭제하면 UI와 Firestore 데이터베이스에 즉시 반영되어야 합니다.",
      "summary": "`ParticipantsPage.tsx`를 `useParticipants` 훅과 완벽하게 연동하여, 참가자 목록을 실시간으로 표시하고 관리(추가, 수정, 삭제)하는 기능을 성공적으로 완성했습니다. 로딩 및 에러 상태 처리, 인라인 수정 기능 등을 포함하여 사용자 친화적인 UI를 구현했습니다.",
      "completedAt": "2025-06-21T15:07:09.747Z"
    },
    {
      "id": "c47b2bd9-ebd7-4b7e-8884-9eea4aa94219",
      "name": "6. 테이블 및 좌석 데이터 스키마 설계 및 관리 훅 구현",
      "description": "Firestore에 'tables' 컬렉션 스키마를 정의하고, 테이블 데이터를 관리하기 위한 `useTables` 훅을 구현합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-21T13:10:39.070Z",
      "updatedAt": "2025-06-21T15:07:21.107Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useTables.ts",
          "type": "CREATE",
          "description": "테이블 및 좌석 데이터 관리를 위한 커스텀 훅"
        }
      ],
      "implementationGuide": "1. `shrimp-rules.md`에 정의된 스키마를 바탕으로 `tables` 컬렉션을 설계합니다. (예: `{ tableNumber: 1, seats: [participantId1, null, ...] }`) 2. `src/hooks/` 폴더에 `useTables.ts` 파일을 생성합니다. 3. 참가자 훅과 유사하게 테이블 데이터를 조회(`onSnapshot`), 생성, 수정하는 함수들을 구현합니다.",
      "verificationCriteria": "`useTables` 훅을 통해 Firestore의 테이블 데이터를 성공적으로 불러오고 수정할 수 있어야 합니다.",
      "summary": "Firestore의 `tables` 컬렉션을 관리하고, 트랜잭션을 사용하여 안전하게 좌석을 자동 배정하는 로직을 포함한 `useTables` 커스텀 훅을 성공적으로 구현했습니다. 데이터 관리 로직을 훅으로 분리하여 재사용성과 코드의 명확성을 높였습니다.",
      "completedAt": "2025-06-21T15:07:21.106Z"
    },
    {
      "id": "ca58193d-e416-432e-9a55-a7511690d274",
      "name": "7. 테이블 관리 페이지 UI 및 자동 좌석 배정 기능 구현",
      "description": "테이블 현황을 시각적으로 보여주는 UI를 만들고, 참가자들을 빈 좌석에 자동으로 배정하는 핵심 기능을 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "676e56bf-bce2-4be4-94a4-58b84a50a58c"
        },
        {
          "taskId": "c47b2bd9-ebd7-4b7e-8884-9eea4aa94219"
        }
      ],
      "createdAt": "2025-06-21T13:10:39.070Z",
      "updatedAt": "2025-06-21T15:07:35.229Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "테이블 현황 UI 및 자동 배정 로직 구현"
        },
        {
          "path": "app2/src/hooks/useTables.ts",
          "type": "REFERENCE",
          "description": "테이블 데이터 조작을 위해 참조"
        },
        {
          "path": "app2/src/hooks/useParticipants.ts",
          "type": "REFERENCE",
          "description": "배정할 참가자 목록을 가져오기 위해 참조"
        }
      ],
      "implementationGuide": "1. `src/pages/TablesPage.tsx`에서 `useTables`와 `useParticipants` 훅을 모두 호출합니다. 2. 테이블 목록을 순회하며 각 테이블과 배정된 참가자 정보를 카드 형태로 시각화합니다. 3. '자동 배정' 버튼을 구현합니다. 4. 버튼 클릭 시, 아직 좌석이 배정되지 않은 참가자 목록을 필터링합니다. 5. 모든 테이블의 빈 좌석을 계산하고, 참가자들을 순서대로 배정합니다. 6. 이 모든 과정을 Firestore 트랜잭션을 사용하여 `useTables` 훅에 구현된 함수(예: `autoAssignSeats`)를 호출하여 데이터 일관성을 유지하며 업데이트합니다.",
      "verificationCriteria": "테이블 관리 페이지에서 현재 테이블과 좌석 배정 현황이 정확하게 보여야 합니다. '자동 배정' 버튼을 클릭하면, 좌석이 없는 모든 참가자들이 빈 좌석에 성공적으로 배정되고, 변경사항이 UI와 Firestore에 즉시 반영되어야 합니다.",
      "summary": "`TablesPage.tsx`를 `useTables` 및 `useParticipants` 훅과 연동하여, 테이블 및 좌석 배정 현황을 시각적으로 보여주고 자동 배정 기능을 실행하는 UI를 성공적으로 구현했습니다. 로딩/에러 상태 처리 및 좌석 점유 상태에 따른 동적 스타일링으로 사용자 경험을 개선했습니다.",
      "completedAt": "2025-06-21T15:07:35.227Z"
    }
  ]
}