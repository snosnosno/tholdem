{
  "tasks": [
    {
      "id": "84fa482f-c4e3-4a13-bc3e-b745ad6a08d7",
      "name": "useStaff 훅 생성",
      "description": "직원 데이터(이름, 역할)를 관리하는 `useStaff` 커스텀 훅을 생성합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T08:41:26.643Z",
      "updatedAt": "2025-06-22T08:43:32.271Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useStaff.ts",
          "type": "CREATE",
          "description": "직원 데이터 CRUD 로직을 담을 새로운 훅 파일입니다."
        },
        {
          "path": "app2/src/hooks/useParticipants.ts",
          "type": "REFERENCE",
          "description": "훅의 구조를 참고하기 위한 템플릿 파일입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/hooks/useStaff.ts` 파일을 새로 생성합니다.\n2. 파일 상단에 `Staff` 인터페이스를 `{ id: string, name: string, role: string }`로 정의합니다.\n3. `useParticipants.ts` 파일의 전체적인 구조를 참고하여 `useStaff` 훅을 작성합니다.\n4. `staff` 컬렉션을 참조하도록 Firestore `collection`을 설정합니다.\n5. `onSnapshot`을 사용하여 `staff` 컬렉션의 변경사항을 실시간으로 수신하고, `staff` 상태 배열을 업데이트합니다.\n6. 기본적인 `addStaff`, `updateStaff`, `deleteStaff` 함수를 구현하여 훅의 반환 객체에 포함시킵니다.",
      "verificationCriteria": "`useStaff.ts` 파일이 존재해야 하며, 이 훅은 `staff` 배열과 CRUD 함수들을 정상적으로 반환해야 합니다.",
      "summary": "`useStaff.ts` 커스텀 훅을 성공적으로 생성했습니다. 이 훅은 `useParticipants.ts`의 검증된 구조를 템플릿으로 사용하여, Firestore의 `staff` 컬렉션에 대한 실시간 데이터 조회(`onSnapshot`) 및 CRUD(addStaff, updateStaff, deleteStaff) 기능을 완벽하게 구현했습니다. `Staff` 인터페이스 정의를 포함하여 다음 작업인 UI 페이지 구현에 필요한 모든 요소를 갖추었습니다.",
      "completedAt": "2025-06-22T08:43:32.271Z"
    },
    {
      "id": "35287c1f-2cb1-4671-b61d-2a410ffd966a",
      "name": "StaffPage UI 구현 및 연동",
      "description": "`StaffPage.tsx`에서 `useStaff` 훅을 사용하여 직원 관리 UI를 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "84fa482f-c4e3-4a13-bc3e-b745ad6a08d7"
        }
      ],
      "createdAt": "2025-06-22T08:41:26.644Z",
      "updatedAt": "2025-06-22T08:45:35.273Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/StaffPage.tsx",
          "type": "TO_MODIFY",
          "description": "직원 관리 UI를 구현할 페이지 파일입니다."
        },
        {
          "path": "app2/src/hooks/useStaff.ts",
          "type": "DEPENDENCY",
          "description": "페이지에서 사용할 커스텀 훅 파일입니다."
        },
        {
          "path": "app2/src/pages/ParticipantsPage.tsx",
          "type": "REFERENCE",
          "description": "UI 레이아웃과 로직 흐름을 참고하기 위한 템플릿 파일입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/pages/StaffPage.tsx` 파일을 엽니다. (만약 파일이 없다면 새로 생성합니다)\n2. `ParticipantsPage.tsx`의 UI 구조를 참고하여 페이지를 구성합니다.\n3. `useStaff()` 훅을 호출하여 `staff` 목록과 관리 함수들을 가져옵니다.\n4. 직원 추가 폼(이름, 역할 입력)을 구현하고, `addStaff` 함수와 연결합니다.\n5. 가져온 `staff` 목록을 `map`으로 순회하여 테이블 형태로 출력합니다. 테이블은 '이름', '역할', '관리' 컬럼을 가집니다.\n6. 각 직원 행의 '관리' 컬럼에 '수정'과 '삭제' 버튼을 추가하고, `updateStaff` 및 `deleteStaff` 함수와 연결되는 로직을 구현합니다. 인라인 편집 기능을 위해 `editingStaff` 상태를 활용합니다.",
      "verificationCriteria": "`/staff` 경로에 접속했을 때 직원 관리 페이지가 렌더링되어야 합니다. 페이지에서 직원을 추가, 조회, 수정, 삭제하는 기능이 모두 정상적으로 작동해야 합니다.",
      "summary": "`StaffPage.tsx` UI 구현을 성공적으로 완료했습니다. `ParticipantsPage.tsx`를 템플릿으로 사용하여 일관된 UI/UX를 제공하며, `useStaff` 훅과 연동하여 직원의 추가, 조회, 수정(인라인 편집), 삭제 기능을 완벽하게 구현했습니다. 또한, `Layout.tsx` 사이드바에 'Staff Management' 메뉴를 추가하고 `App.tsx`에 라우팅을 설정하여 앱 전체에 기능을 통합했습니다.",
      "completedAt": "2025-06-22T08:45:35.272Z"
    }
  ]
}