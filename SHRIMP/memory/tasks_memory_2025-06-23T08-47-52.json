{
  "tasks": [
    {
      "id": "f5d90512-5bea-4f5a-87a4-a1ed537cb9d5",
      "name": "[Feature] 반응형 레이아웃을 위한 `useMediaQuery` 훅 생성",
      "description": "`app2/src/hooks/` 디렉토리에 `useMediaQuery.ts` 파일을 새로 생성합니다. 이 커스텀 훅은 특정 미디어 쿼리 문자열을 인자로 받아, 화면 크기가 변경될 때마다 해당 쿼리의 충족 여부를 boolean 값으로 반환합니다. `resize` 이벤트의 과도한 발생을 막기 위해 디바운싱(debouncing)을 적용하여 성능을 최적화합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T18:41:32.284Z",
      "updatedAt": "2025-06-22T18:42:34.916Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useMediaQuery.ts",
          "type": "CREATE",
          "description": "화면 너비를 감지하는 재사용 가능한 커스텀 훅 파일입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/hooks/useMediaQuery.ts` 파일을 생성합니다.\n2. `window.matchMedia` API를 사용하여 미디어 쿼리 상태를 확인하는 훅을 구현합니다.\n3. `useEffect`를 사용하여 컴포넌트 마운트 시 `resize` 이벤트 리스너를 추가하고, 언마운트 시 제거하도록 합니다.\n4. `setTimeout`과 `clearTimeout`을 사용하여, `resize` 이벤트가 발생하고 150ms 동안 추가 이벤트가 없으면 상태를 업데이트하는 디바운싱 로직을 구현합니다.",
      "verificationCriteria": "1. `useMediaQuery('(max-width: 768px)')`를 호출했을 때, 브라우저 창 너비가 768px 이하이면 `true`를, 그보다 크면 `false`를 반환해야 합니다.\n2. 브라우저 창 크기를 조절할 때, 조절이 멈춘 후 잠시 뒤에 값이 정상적으로 변경되어야 합니다 (디바운싱 확인).",
      "summary": "`useMediaQuery.ts` 커스텀 훅을 성공적으로 생성했습니다. 이 훅은 `window.matchMedia` API를 기반으로 하며, 성능 최적화를 위해 150ms의 디바운싱 로직을 포함하고 있습니다. 이제 이 훅을 사용하여 애플리케이션의 다른 부분에서 화면 크기에 따른 반응형 동작을 쉽게 구현할 수 있습니다.",
      "completedAt": "2025-06-22T18:42:34.916Z"
    },
    {
      "id": "732e6cbf-4a3e-4af6-bc08-28c6c267fdf3",
      "name": "[Refactor] `TableCard.tsx`에 `isDraggable` prop 추가",
      "description": "모바일 뷰와 데스크톱 뷰에서 `TableCard`의 동작을 다르게 하기 위해 컴포넌트를 리팩터링합니다. `isDraggable`이라는 boolean prop을 새로 추가하여, 이 값이 `true`일 때만 드래그 핸들이 보이고 드래그 기능이 활성화되도록 수정합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "f5d90512-5bea-4f5a-87a4-a1ed537cb9d5"
        }
      ],
      "createdAt": "2025-06-22T18:41:32.284Z",
      "updatedAt": "2025-06-22T18:43:37.315Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/TableCard.tsx",
          "type": "TO_MODIFY",
          "description": "드래그 기능을 조건부로 활성화/비활성화하기 위해 리팩터링합니다."
        }
      ],
      "implementationGuide": "1. `TableCard.tsx` 파일을 엽니다.\n2. `TableCardProps` 인터페이스에 `isDraggable: boolean;`을 추가합니다.\n3. `useDraggable` 훅의 옵션 객체에 `{ disabled: !isDraggable }`를 추가하여 prop 값에 따라 드래그 기능을 비활성화할 수 있도록 합니다.\n4. 드래그 핸들 SVG 아이콘을 렌더링하는 부분을 `{isDraggable && <button>...</button>}`와 같이 조건부 렌더링으로 감싸줍니다.",
      "verificationCriteria": "1. `TableCard`에 `isDraggable={true}`를 전달하면 기존처럼 드래그 핸들이 보이고 드래그가 가능해야 합니다.\n2. `isDraggable={false}`를 전달하면 드래그 핸들이 보이지 않고, 카드를 드래그할 수 없어야 합니다.",
      "summary": "`TableCard.tsx` 컴포넌트에 `isDraggable` prop을 성공적으로 추가했습니다. 이 prop을 `false`로 설정하면 드래그 핸들이 사라지고 드래그 기능이 비활성화됩니다. 이를 통해 모바일 뷰와 같이 드래그 기능이 필요 없는 환경에서 카드의 동작을 제어할 수 있는 기반을 마련했습니다.",
      "completedAt": "2025-06-22T18:43:37.312Z"
    },
    {
      "id": "cbad605c-9ae0-45d2-b483-fd451c2d4926",
      "name": "[Feature] `TablesPage.tsx`에 반응형 레이아웃 적용",
      "description": "`TablesPage.tsx`에 새로 만든 `useMediaQuery` 훅을 적용하여 화면 크기에 따라 두 가지 다른 레이아웃을 보여주도록 수정합니다. 넓은 화면에서는 기존의 드래그 앤 드롭 캔버스 뷰를, 좁은 화면(모바일)에서는 테이블 카드가 세로로 쌓이는 리스트 뷰를 렌더링합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "732e6cbf-4a3e-4af6-bc08-28c6c267fdf3"
        }
      ],
      "createdAt": "2025-06-22T18:41:32.284Z",
      "updatedAt": "2025-06-22T18:44:34.451Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "화면 크기에 따라 캔버스 뷰와 리스트 뷰를 전환하도록 수정합니다."
        }
      ],
      "implementationGuide": "1. `TablesPage.tsx` 파일을 엽니다.\n2. `useMediaQuery('(max-width: 768px)')`를 호출하여 `isMobile` 변수에 결과를 저장합니다.\n3. 테이블 목록을 렌더링하는 부분을 `isMobile` 값에 따라 분기 처리합니다.\n4. `isMobile`이 `true`일 경우, `<DndContext>` 없이 간단한 `div`와 `map`을 사용하여 `TableCard`를 세로로 나열합니다. 이때 `isDraggable={false}`를 전달하고, `style` prop은 전달하지 않습니다.\n5. `isMobile`이 `false`일 경우, 기존의 `<DndContext>`와 절대 위치를 사용하는 로직을 그대로 유지합니다. 이때 `TableCard`에는 `isDraggable={true}`를 전달합니다.",
      "verificationCriteria": "1. 브라우저 창 너비가 768px 초과일 때, 기존의 드래그 앤 드롭 기능이 정상적으로 동작해야 합니다.\n2. 브라우저 창 너비를 768px 이하로 줄이면, 테이블 카드들이 세로로 정렬된 리스트 형태로 보여야 하며 드래그는 동작하지 않아야 합니다.\n3. 창 크기를 다시 넓히면 드래그 앤 드롭 뷰로 정상적으로 돌아와야 합니다.",
      "summary": "`TablesPage.tsx`에 `useMediaQuery` 훅을 성공적으로 적용하여 반응형 레이아웃을 구현했습니다. 이제 화면 너비가 768px 이하일 경우 테이블이 세로 리스트로 표시되고, 그보다 넓은 화면에서는 기존의 드래그 앤 드롭 기능이 있는 캔버스 뷰가 나타납니다. 모든 계획된 작업이 완료되었습니다.",
      "completedAt": "2025-06-22T18:44:34.450Z"
    }
  ]
}