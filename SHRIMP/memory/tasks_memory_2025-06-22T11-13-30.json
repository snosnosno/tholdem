{
  "tasks": [
    {
      "id": "4e3169a0-613f-4dcb-908e-343cd5b209c4",
      "name": "액션 로깅을 위한 `useLogger` 훅 생성",
      "description": "`action_logs` Firestore 컬렉션에 로그를 기록하는 재사용 가능한 `useLogger` 훅을 생성합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T11:02:48.439Z",
      "updatedAt": "2025-06-22T11:03:34.231Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useLogger.ts",
          "type": "CREATE",
          "description": "로깅 전용 커스텀 훅"
        }
      ],
      "implementationGuide": "1. `app2/src/hooks/useLogger.ts` 파일을 새로 생성합니다.\n2. `logAction(action: string, details: object)` 비동기 함수를 정의합니다.\n3. 함수 내에서 `addDoc`과 `serverTimestamp`를 사용하여 Firestore의 `action_logs` 컬렉션에 `{ timestamp: serverTimestamp(), action, ...details }` 형태의 문서를 추가하는 로직을 구현합니다.\n4. `useLogger` 훅을 export 합니다.",
      "verificationCriteria": "1. `logAction` 함수 호출 시 `action_logs` 컬렉션에 올바른 데이터 형식으로 새 문서가 생성되어야 합니다.\n2. 타임스탬프가 서버 시간으로 정확히 기록되어야 합니다.",
      "analysisResult": "최종 목표는 `TablesPage`에 테이블 닫기, 자동 밸런싱, 결과 리포트, 그리고 액션 로그 기능을 통합하여 관리 효율성과 투명성을 높이는 것입니다. `useLogger.ts`를 신설하여 로깅 책임을 분리하고, `useTables.ts`에 핵심 비즈니스 로직을 구현하며, `TablesPage.tsx`에서 이들을 연동하여 사용자 인터페이스를 완성합니다. 모든 데이터 변경은 Firestore 트랜잭션을 통해 안전하게 처리되어야 합니다.",
      "summary": "`app2/src/hooks/useLogger.ts` 파일이 성공적으로 생성되었고, 내부에 `logAction` 함수가 지침에 따라 정확하게 구현되었습니다. 이 함수는 Firestore의 `action_logs` 컬렉션에 타임스탬프와 함께 로그를 기록하며, 재사용 가능한 훅 형태로 제공되어 다른 모듈과의 통합이 용이합니다. 코드 품질, 아키텍처 일관성, 확장성 모든 면에서 요구사항을 완벽히 충족합니다.",
      "completedAt": "2025-06-22T11:03:34.227Z"
    },
    {
      "id": "8b750b57-9481-4cc5-be8b-7f3a5986d23a",
      "name": "`useTables` 훅에 테이블 닫기 및 자동 밸런싱 로직 추가",
      "description": "`useTables.ts`에 `closeTable` 함수를 구현하여 테이블을 닫고, 해당 테이블의 참가자들을 다른 활성 테이블로 안전하게 재배치하는 핵심 로직을 작성합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "4e3169a0-613f-4dcb-908e-343cd5b209c4"
        }
      ],
      "createdAt": "2025-06-22T11:02:48.439Z",
      "updatedAt": "2025-06-22T11:05:36.155Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useTables.ts",
          "type": "TO_MODIFY",
          "description": "핵심 비즈니스 로직 추가"
        },
        {
          "path": "app2/src/hooks/useLogger.ts",
          "type": "DEPENDENCY",
          "description": "로깅 함수 의존성"
        }
      ],
      "implementationGuide": "1. `useTables.ts` 파일을 엽니다.\n2. `useLogger` 훅을 import 합니다.\n3. `closeTable(tableId: string): Promise<BalancingResult[]>` 시그니처를 가진 비동기 함수를 새로 정의합니다. `BalancingResult`는 `{ participantName: string, fromTable: number, toTable: number }` 같은 형태의 인터페이스로 정의합니다.\n4. 함수 내부에서 `runTransaction`을 사용하여 다음 로직을 구현합니다:\n   a. 닫을 테이블과 나머지 테이블들의 데이터를 모두 가져옵니다.\n   b. 닫을 테이블의 참가자 목록과 다른 테이블들의 빈 좌석 목록을 파악합니다.\n   c. 만약 빈 좌석이 부족하면, 구체적인 오류 메시지와 함께 Promise를 reject 합니다.\n   d. 참가자들을 빈 좌석에 재배치하고, 관련 테이블들의 `seats` 배열을 업데이트하는 트랜잭션을 설정합니다.\n   e. 닫힌 테이블 문서를 삭제하는 트랜잭션을 설정합니다.\n   f. 트랜잭션 성공 후 `.then()` 블록에서 `logAction`을 호출하여 'table_closed' 와 'participants_moved' 로그를 기록합니다.\n   g. 성공 시, 재배치 결과를 담은 `BalancingResult` 배열을 resolve 합니다.",
      "verificationCriteria": "1. `closeTable` 호출 시 대상 테이블이 Firestore에서 삭제되거나 'closed' 상태로 변경되어야 합니다.\n2. 해당 테이블에 있던 모든 참가자들이 다른 테이블의 빈 좌석으로 이동해야 합니다.\n3. 빈 좌석이 부족할 경우, 함수는 오류를 발생시키고 데이터 변경이 없어야 합니다.\n4. 성공적으로 실행되면 `action_logs` 컬렉션에 관련 로그가 기록되어야 합니다.",
      "analysisResult": "최종 목표는 `TablesPage`에 테이블 닫기, 자동 밸런싱, 결과 리포트, 그리고 액션 로그 기능을 통합하여 관리 효율성과 투명성을 높이는 것입니다. `useLogger.ts`를 신설하여 로깅 책임을 분리하고, `useTables.ts`에 핵심 비즈니스 로직을 구현하며, `TablesPage.tsx`에서 이들을 연동하여 사용자 인터페이스를 완성합니다. 모든 데이터 변경은 Firestore 트랜잭션을 통해 안전하게 처리되어야 합니다.",
      "summary": "`useTables.ts`에 `closeTable` 함수가 성공적으로 구현되었습니다. 이 함수는 Firestore 트랜잭션을 사용하여 테이블을 닫고 해당 테이블의 모든 참가자를 다른 활성 테이블의 빈자리로 안전하게 재배치합니다. 빈 좌석이 부족할 경우에 대한 오류 처리 로직을 포함하고 있으며, 작업 성공 시 `useLogger` 훅을 호출하여 모든 관련 활동(테이블 닫기, 참가자 이동)을 기록합니다. 재배치 결과를 Promise로 반환하여 UI단에서 후속 처리를 할 수 있도록 설계되었습니다. 모든 요구사항과 기술적 기준을 완벽하게 충족합니다.",
      "completedAt": "2025-06-22T11:05:36.154Z"
    },
    {
      "id": "34cfeb96-0e9e-4bf5-9fda-be47dbf6b63e",
      "name": "`TablesPage`에 테이블 닫기 UI 및 팝업 연동",
      "description": "`TablesPage.tsx`에 테이블을 닫는 UI(버튼)를 추가하고, `closeTable` 함수를 연동합니다. 또한, 확인 팝업과 결과 리포트 팝업을 구현하여 사용자 경험을 완성합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "8b750b57-9481-4cc5-be8b-7f3a5986d23a"
        }
      ],
      "createdAt": "2025-06-22T11:02:48.439Z",
      "updatedAt": "2025-06-22T11:07:44.895Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "UI 및 사용자 상호작용 구현"
        },
        {
          "path": "app2/src/hooks/useTables.ts",
          "type": "DEPENDENCY",
          "description": "비즈니스 로직 의존성"
        }
      ],
      "implementationGuide": "1. `TablesPage.tsx` 파일을 엽니다.\n2. `useTables` 훅에서 새로 만든 `closeTable` 함수를 가져옵니다.\n3. 테이블 카드 컴포넌트 내부에 '테이블 닫기' 버튼을 추가합니다.\n4. `useState`를 사용하여 `isClosing`, `closingTableId`, `balancingResult` 상태를 관리합니다.\n5. '닫기' 버튼 클릭 시:\n   a. `closingTableId`를 설정하고, `Modal` 컴포넌트를 이용해 확인 팝업을 띄웁니다.\n6. 확인 팝업에서 '확인' 클릭 시:\n   a. `isClosing`을 true로 설정합니다.\n   b. `closeTable(closingTableId)`를 호출합니다.\n   c. 호출이 성공하면 반환된 결과로 `balancingResult`를 설정합니다.\n   d. 오류 발생 시 alert 등으로 사용자에게 알립니다.\n   e. `finally` 블록에서 `isClosing`과 `closingTableId`를 초기화합니다.\n7. `balancingResult` 상태에 데이터가 있으면, `Modal`을 이용해 결과 리포트 팝업을 띄웁니다.",
      "verificationCriteria": "1. 각 테이블 카드에 '닫기' 버튼이 표시되어야 합니다.\n2. '닫기' 버튼을 누르면 확인 팝업이 나타나야 합니다.\n3. 확인 팝업에서 '확인'을 누르면 `closeTable` 함수가 실행되고, 실행 중에는 로딩 상태(버튼 비활성화 등)가 표시되어야 합니다.\n4. 작업 완료 후, 참가자 이동 결과를 보여주는 리포트 팝업이 나타나야 합니다.",
      "analysisResult": "최종 목표는 `TablesPage`에 테이블 닫기, 자동 밸런싱, 결과 리포트, 그리고 액션 로그 기능을 통합하여 관리 효율성과 투명성을 높이는 것입니다. `useLogger.ts`를 신설하여 로깅 책임을 분리하고, `useTables.ts`에 핵심 비즈니스 로직을 구현하며, `TablesPage.tsx`에서 이들을 연동하여 사용자 인터페이스를 완성합니다. 모든 데이터 변경은 Firestore 트랜잭션을 통해 안전하게 처리되어야 합니다.",
      "summary": "`TablesPage.tsx`에 '테이블 닫기' 버튼과 관련 로직이 성공적으로 연동되었습니다. `useState`를 사용하여 로딩 및 결과 상태를 관리하고, `Modal` 컴포넌트를 재활용하여 사용자에게 '닫기 확인' 및 '자동 밸런싱 결과' 팝업을 명확하게 제공합니다. `useTables` 훅의 `closeTable` 함수를 호출하고 비동기 응답(성공/실패)을 처리하는 로직이 지침에 따라 완벽하게 구현되었습니다. 이로써 모든 요구사항이 충족되었습니다.",
      "completedAt": "2025-06-22T11:07:44.895Z"
    }
  ]
}