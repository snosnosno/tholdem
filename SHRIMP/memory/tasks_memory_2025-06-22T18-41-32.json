{
  "tasks": [
    {
      "id": "aad8e1e2-ff5b-40e6-af4e-a9626dccd85b",
      "name": "[Bugfix] `TableCard.tsx`의 클릭 이벤트 복원",
      "description": "`dnd-kit`의 드래그 이벤트 리스너가 카드 전체에 적용되어 발생하는 클릭 비활성화 버그를 수정합니다. 카드 헤더에 별도의 '드래그 핸들' 아이콘을 추가하고, 드래그 관련 `listeners`를 이 핸들에만 적용하여 카드와 내부 버튼들의 `onClick` 이벤트가 정상적으로 동작하도록 복원합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T18:08:19.550Z",
      "updatedAt": "2025-06-22T18:11:02.767Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/TableCard.tsx",
          "type": "TO_MODIFY",
          "description": "드래그 핸들을 추가하고 dnd-kit 리스너를 해당 핸들로 이동시켜 onClick 이벤트를 다시 활성화합니다."
        }
      ],
      "implementationGuide": "1. `TableCard.tsx` 파일을 엽니다.\n2. 카드 헤더 영역(테이블 이름 옆)에 드래그 핸들로 사용할 아이콘을 추가합니다. 간단한 SVG 아이콘을 사용합니다.\n3. `useDraggable`에서 반환된 `listeners`와 `attributes` prop을 카드 전체 `div`에서 제거하고, 새로 추가한 드래그 핸들 아이콘에만 적용합니다.\n4. 카드 전체를 감싸는 `div`에는 `setNodeRef` prop은 그대로 유지하여 드래그 대상임을 `dnd-kit`에 알려줍니다.\n5. 카드 전체 `div`에 적용되어 있던 `onClick` 이벤트가 이제 정상적으로 동작하는지 확인합니다.",
      "verificationCriteria": "1. 테이블 카드를 드래그하면 위치가 이동해야 합니다. 드래그는 새로 추가된 '핸들' 아이콘으로만 가능해야 합니다.\n2. '핸들'이 아닌 카드 몸통 영역을 클릭하면 테이블 상세 정보 모달이 정상적으로 열려야 합니다.\n3. 카드 우측 상단의 'X' (닫기) 버튼이 정상적으로 동작해야 합니다.\n4. '대기 중' 상태일 때 나타나는 '테이블 활성화' 버튼이 정상적으로 동작해야 합니다.\n5. 테이블 이름이나 색상 변경 등 다른 모든 상호작용이 정상적으로 동작해야 합니다.",
      "summary": "`TableCard.tsx` 컴포넌트에 전용 드래그 핸들을 추가하는 수정이 완료되었습니다. `dnd-kit` 이벤트 리스너를 이 핸들로 옮겨, 카드 전체의 `onClick` 이벤트를 비활성화하던 충돌을 해결했습니다. 이제 코드상으로 드래그 기능과 다른 UI 상호작용이 올바르게 분리되었습니다.",
      "completedAt": "2025-06-22T18:11:02.767Z"
    },
    {
      "id": "483281e8-987d-449e-89b1-8c7828bf3779",
      "name": "[Bugfix] `TablesPage.tsx`의 테이블 위치 업데이트 로직 수정",
      "description": "테이블 카드를 드래그한 후 원래 위치로 돌아가는 '스냅백' 버그를 수정합니다. `handleDragEnd` 함수 내에서 로컬 상태와 Firestore 데이터베이스에 위치를 업데이트할 때, 동기화가 맞지 않아 발생하는 문제를 해결하기 위해 상태 업데이트 로직을 안전하게 리팩터링합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "aad8e1e2-ff5b-40e6-af4e-a9626dccd85b"
        }
      ],
      "createdAt": "2025-06-22T18:08:19.550Z",
      "updatedAt": "2025-06-22T18:12:55.771Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "상태 동기화 버그를 해결하기 위해 handleDragEnd를 리팩터링합니다."
        }
      ],
      "implementationGuide": "1. `TablesPage.tsx` 파일을 엽니다.\n2. `handleDragEnd` 함수를 찾습니다.\n3. `setTables`의 콜백 함수(함수형 업데이트)를 사용하여, 콜백 내부에서 새 위치를 계산하고, `updateTablePosition`을 호출하여 Firestore에 데이터를 저장하고, 동시에 로컬 상태를 업데이트하는 코드로 수정합니다.\n4. 이렇게 하면 비동기 문제나 오래된 상태(stale state)를 참조하는 버그를 원천적으로 방지할 수 있습니다.",
      "verificationCriteria": "1. 테이블 카드를 드래그하여 놓으면, 해당 위치에 카드가 고정되어야 합니다.\n2. 페이지를 새로고침해도 카드는 마지막에 드래그하여 놓은 위치에 그대로 있어야 합니다.\n3. 여러 테이블을 여러 번 드래그해도 위치가 정확하게 저장되고 유지되어야 합니다.",
      "summary": "`TablesPage.tsx`의 `handleDragEnd` 함수를 성공적으로 리팩터링했습니다. React의 함수형 상태 업데이트를 사용하여, 드래그가 끝날 때 로컬 상태(`tables`)와 Firestore 데이터베이스가 항상 동일한 최신 위치 값으로 업데이트되도록 수정했습니다. 이를 통해 상태 불일치로 인해 발생하던 '스냅백' 버그를 해결했습니다.",
      "completedAt": "2025-06-22T18:12:55.770Z"
    }
  ]
}