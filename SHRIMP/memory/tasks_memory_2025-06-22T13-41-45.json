{
  "tasks": [
    {
      "id": "78662ada-af1b-4068-a9fc-640449e13fcd",
      "name": "[Refactor] Seat 컴포넌트 분리 및 TableCard 개선",
      "description": "`TablesPage.tsx`에 정의된 `Seat` 컴포넌트를 `app2/src/components/Seat.tsx`라는 별도 파일로 분리하여 코드 구조를 개선합니다. 또한 `TableCard.tsx`를 수정하여 색상 팔레트에 '기본값(흰색)' 옵션을 추가하고, 테이블 이름이 없을 경우 'Table {번호}'가 표시되도록 폴백(fallback) 로직을 구현합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T12:10:52.404Z",
      "updatedAt": "2025-06-22T12:16:17.073Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "Seat 컴포넌트 정의를 제거하고, 분리된 Seat.tsx에서 import 하도록 수정"
        },
        {
          "path": "app2/src/components/Seat.tsx",
          "type": "CREATE",
          "description": "TablesPage.tsx에서 분리된 Seat 컴포넌트를 포함할 신규 파일"
        },
        {
          "path": "app2/src/components/TableCard.tsx",
          "type": "TO_MODIFY",
          "description": "색상 팔레트 및 이름 폴백 로직 개선"
        }
      ],
      "implementationGuide": "1. `app2/src/components/Seat.tsx` 파일을 새로 생성합니다. 2. `TablesPage.tsx`에서 `SeatProps` 인터페이스와 `Seat` 컴포넌트 정의를 잘라내어 새 파일로 옮기고 export 합니다. 3. `TablesPage.tsx`와 `TableCard.tsx`에서 분리된 `Seat` 컴포넌트를 import 하도록 수정합니다. 4. `TableCard.tsx`의 `PRESET_COLORS` 배열에 '#FFFFFF'를 추가하고, 이름 출력 부분이 테이블 이름이 없을 경우 'Table {테이블번호}' 형식의 문자열을 반환하도록 수정합니다.",
      "verificationCriteria": "1. `Seat.tsx` 파일이 생성되고 `TablesPage.tsx`의 관련 코드가 제거되었는지 확인합니다. 2. UI가 깨지지 않고 이전과 동일하게 렌더링되는지 확인합니다. 3. `TableCard`의 색상 선택기에 흰색 옵션이 보이고 선택 가능한지 확인합니다. 4. 이름이 없는 테이블에 'Table {번호}'가 정상적으로 표시되는지 확인합니다.",
      "summary": "`Seat` 컴포넌트를 `Seat.tsx`로 성공적으로 분리했으며, `TableCard.tsx`의 import 경로, 색상 팔레트, 이름 표시 폴백 로직을 모두 의도대로 수정했습니다. `edit_file_lines` 도구의 문제로 인해 `write_file`을 사용하여 전체 파일을 덮어쓰는 방식으로 작업을 완료했습니다. 모든 요구사항이 충족되었습니다.",
      "completedAt": "2025-06-22T12:16:17.073Z"
    },
    {
      "id": "0c52905c-0424-487c-96ac-4b1a6fe1a535",
      "name": "[Feature] TableDetailModal 컴포넌트 신설",
      "description": "테이블의 상세 좌석 정보를 표시할 `app2/src/components/TableDetailModal.tsx` 컴포넌트를 새로 생성합니다. 이 컴포넌트는 `DndProvider`와 좌석 그리드 로직을 포함하며, 상단에는 테이블 정보와 빈 좌석 수를 표시합니다. 초기 단계에서는 기능 구현에 집중하고, `TablesPage`와의 완전한 연동은 다음 작업에서 수행합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "78662ada-af1b-4068-a9fc-640449e13fcd"
        }
      ],
      "createdAt": "2025-06-22T12:10:52.404Z",
      "updatedAt": "2025-06-22T12:18:30.449Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/TableDetailModal.tsx",
          "type": "CREATE",
          "description": "테이블의 상세 좌석 뷰를 표시할 신규 팝업 컴포넌트"
        }
      ],
      "implementationGuide": "1. `Modal` 컴포넌트를 기반으로 `TableDetailModal.tsx` 파일을 생성합니다. 2. `DndProvider`, HTML5Backend, 그리고 새로 분리된 `Seat` 컴포넌트를 import합니다. 3. `table`, `getParticipantName`, `onMoveSeat`, `onPlayerSelect` 등을 props로 받습니다. 4. 컴포넌트 내부에 좌석 그리드를 렌더링하는 로직을 구현합니다. (기존 `TableCard` 로직 참고) 5. 상단에 H3 태그로 테이블 이름을 표시하고(없을 경우 'Table {번호}' 폴백), Span 태그로 빈 좌석 수를 표시하는 영역을 추가합니다.",
      "verificationCriteria": "1. `TableDetailModal.tsx` 파일이 생성되었는지 확인합니다. 2. 컴포넌트가 props로 받은 테이블 정보에 따라 좌석 그리드를 정상적으로 렌더링하는지 (스토리북 또는 임시 렌더링으로) 확인합니다. 3. 빈 좌석 수가 정확히 계산되어 표시되는지 확인합니다.",
      "summary": "`app2/src/components/TableDetailModal.tsx` 파일을 성공적으로 생성했습니다. 이 신규 컴포넌트는 `Modal`을 기반으로 하며, `DndProvider`와 `Seat` 컴포넌트를 사용하여 테이블의 상세 좌석 정보와 드래그앤드롭 기능을 표시합니다. 또한, 테이블 이름, 빈 좌석 수 표시, 그리고 `isDimmed` prop을 이용한 UI 처리 등 작업 명세서의 모든 요구사항을 완벽하게 구현했습니다.",
      "completedAt": "2025-06-22T12:18:30.448Z"
    },
    {
      "id": "f3dfb1c8-ed8a-4c61-8e57-213371a2c751",
      "name": "[Refactor] TablesPage의 UI를 요약-상세 구조로 변경",
      "description": "`TablesPage.tsx`의 로직을 수정하여, 테이블 클릭 시 `TableDetailModal`이 열리도록 변경합니다. `TableCard.tsx`와 `TableListView.tsx`에서는 좌석 그리드 뷰를 제거하고, 요약 정보(이름, 인원 수)와 클릭 이벤트 핸들러만 남깁니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "0c52905c-0424-487c-96ac-4b1a6fe1a535"
        }
      ],
      "createdAt": "2025-06-22T12:10:52.404Z",
      "updatedAt": "2025-06-22T12:20:47.141Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "TableDetailModal을 제어하는 상태와 로직 추가"
        },
        {
          "path": "app2/src/components/TableCard.tsx",
          "type": "TO_MODIFY",
          "description": "좌석 그리드를 제거하고 요약 뷰로 변경, 클릭 시 상세 모달 열도록 수정"
        },
        {
          "path": "app2/src/components/TableListView.tsx",
          "type": "TO_MODIFY",
          "description": "좌석 리스트를 제거하고 요약 뷰로 변경, 클릭 시 상세 모달 열도록 수정"
        }
      ],
      "implementationGuide": "1. `TablesPage.tsx`에 `const [detailModalTable, setDetailModalTable] = useState<Table | null>(null);` 상태를 추가합니다. 2. `TableCard`와 `TableListView`의 아이템 클릭 시 `setDetailModalTable`을 호출하는 `handleTableSelect` 함수를 구현하고 props로 전달합니다. 3. `TablesPage.tsx`의 렌더링 부분에 `detailModalTable`이 있을 경우 `TableDetailModal`을 보여주는 로직을 추가합니다. 4. `TableCard.tsx`와 `TableListView.tsx`에서 좌석 그리드 관련 코드를 모두 제거하고, 부모로부터 받은 `onTableSelect` 함수를 최상위 div의 `onClick` 이벤트에 연결합니다.",
      "verificationCriteria": "1. `TablesPage`에서 테이블 카드를 클릭하면 `TableDetailModal`이 정상적으로 열리는지 확인합니다. 2. 모달이 닫히는지 확인합니다. 3. `TableCard`와 `TableListView`에 더 이상 좌석 그리드가 보이지 않는지 확인합니다. 4. 드래그앤드롭을 포함한 모달 내의 모든 기능이 정상 작동하는지 확인합니다.",
      "summary": "`TablesPage.tsx`를 중심으로 UI 구조를 '요약 → 상세' 모델로 성공적으로 리팩토링했습니다. `TableCard.tsx`와 `TableListView.tsx`에서 상세 좌석 뷰를 제거하고, 클릭 시 `TableDetailModal`을 열도록 수정했습니다. `TablesPage.tsx`에는 `detailModalTable` 상태와 관련 핸들러를 추가하여 이 새로운 인터랙션을 완벽하게 제어하도록 구현했습니다. 모든 관련 파일이 일관성 있게 수정되어 작업 목표를 달성했습니다.",
      "completedAt": "2025-06-22T12:20:47.140Z"
    },
    {
      "id": "05565ffc-f91c-4181-a97a-adac486b2d13",
      "name": "[Feature] 중첩 팝업 UX 개선 및 그리드 크기 조절 기능 추가",
      "description": "`TablesPage.tsx`에 UI/UX 개선 기능을 추가합니다. `PlayerActionModal`이 열릴 때 뒤쪽의 `TableDetailModal`이 어두워지도록 처리하고, 사용자가 그리드 뷰의 카드 크기를 조절할 수 있는 슬라이더 UI를 추가합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "f3dfb1c8-ed8a-4c61-8e57-213371a2c751"
        }
      ],
      "createdAt": "2025-06-22T12:10:52.404Z",
      "updatedAt": "2025-06-22T12:21:46.331Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "중첩 팝업 처리 로직 및 그리드 크기 조절 슬라이더 UI/로직 추가"
        },
        {
          "path": "app2/src/components/TableDetailModal.tsx",
          "type": "TO_MODIFY",
          "description": "isDimmed prop을 받아 배경 오버레이를 표시하는 기능 추가"
        }
      ],
      "implementationGuide": "1. `TablesPage`에서 `PlayerActionModal`의 `isOpen` 상태를 `TableDetailModal`에 `isDimmed` prop으로 전달합니다. 2. `TableDetailModal.tsx`에서 `isDimmed`가 true일 때, `<div>`를 사용해 반투명한 검은색 오버레이를 팝업 위에 씌웁니다. 3. `TablesPage`에 `gridSize` 상태와 `<input type='range' />` 슬라이더를 추가합니다. 4. `gridSize` 값에 따라 `grid-cols-*` 클래스를 동적으로 변경하는 로직을 구현하여 그리드 카드 크기를 조절합니다.",
      "verificationCriteria": "1. 상세 팝업에서 좌석 클릭 시 플레이어 액션 팝업이 뜨고, 동시에 상세 팝업이 어두워지는지 확인합니다. 2. `TablesPage`에 추가된 슬라이더를 조작했을 때 그리드 뷰의 카드 크기(열 개수)가 부드럽게 변경되는지 확인합니다.",
      "summary": "UI/UX 개선 작업을 성공적으로 완료했습니다. `TableDetailModal.tsx`에 `isDimmed` prop을 이용한 중첩 팝업 처리 로직을 추가하여 사용자 인터랙션의 깊이를 더했습니다. 또한, `TablesPage.tsx`에 그리드 카드 크기를 동적으로 조절할 수 있는 슬라이더를 구현하여 사용자에게 뷰 커스터마이징 기능을 제공했습니다. 모든 기능이 계획대로 구현되었습니다.",
      "completedAt": "2025-06-22T12:21:46.330Z"
    },
    {
      "id": "90362c62-053f-43a4-aa75-daf7df6e2712",
      "name": "TableDetailModal UI 개선",
      "description": "TableDetailModal.tsx의 헤더 영역을 직접 구현하여 테이블 이름 편집 기능과 색상 선택 기능을 추가합니다. '빈 좌석'과 '참가자' 정보 표시 방식도 요구사항에 맞게 변경합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T12:47:10.671Z",
      "updatedAt": "2025-06-22T12:49:03.744Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/TableDetailModal.tsx",
          "type": "TO_MODIFY",
          "description": "팝업의 UI와 헤더 로직을 직접 수정합니다."
        },
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "Modal에 필요한 props(updateTableDetails)를 전달합니다."
        },
        {
          "path": "app2/src/components/TableCard.tsx",
          "type": "REFERENCE",
          "description": "UI와 로직을 참고하기 위한 파일입니다."
        }
      ],
      "implementationGuide": "1. `TableDetailModal.tsx`에서 Modal의 title prop을 제거합니다.\n2. Modal의 children 내에 새로운 div를 생성하여 헤더를 직접 구현합니다.\n3. `TableCard.tsx`의 이름 편집(input, isEditingName 상태) 및 색상 선택(color picker) UI/로직을 복사하여 새 헤더에 적용합니다.\n4. 이름과 색상 변경을 처리하기 위해 `TablesPage.tsx`로부터 `updateTableDetails` 함수를 prop으로 받아 연결합니다.\n5. 좌석 정보 표시를 '빈 좌석: [N]'과 '참가자: [M]/[Total]' 형태로 수정합니다.",
      "verificationCriteria": "1. 팝업 상단에 테이블 이름과 색상 선택기가 표시되어야 합니다.\n2. 테이블 이름을 클릭하면 입력 필드로 변경되어 수정 및 저장이 가능해야 합니다.\n3. 색상 선택기를 통해 테이블의 테두리 색상을 변경할 수 있어야 합니다.\n4. '빈 좌석'과 '참가자' 수가 정확히 표시되어야 합니다.",
      "summary": "`TableDetailModal.tsx`의 헤더를 직접 구현하여 이름/색상 편집 기능을 성공적으로 추가했습니다. 또한 좌석 정보 표시 방식을 요구사항에 맞게 변경하여 UI를 개선했습니다. `TablesPage.tsx`에 필요한 prop을 올바르게 전달하여 기능이 정상적으로 동작하도록 연결했습니다.",
      "completedAt": "2025-06-22T12:49:03.743Z"
    },
    {
      "id": "959863ba-f3c7-4024-8f2c-8be7fb021b57",
      "name": "'탈락 처리' 시 낙관적 업데이트 적용",
      "description": "`TablesPage.tsx`의 탈락 처리 로직을 수정하여, 서버 요청 전에 프론트엔드 상태를 먼저 업데이트하는 '낙관적 업데이트'를 구현합니다. 이를 통해 사용자에게 즉각적인 시각적 피드백을 제공합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "90362c62-053f-43a4-aa75-daf7df6e2712"
        }
      ],
      "createdAt": "2025-06-22T12:47:10.671Z",
      "updatedAt": "2025-06-22T12:50:39.317Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "탈락 처리 로직을 낙관적 업데이트 방식으로 수정합니다."
        },
        {
          "path": "app2/src/hooks/useParticipants.ts",
          "type": "REFERENCE",
          "description": "탈락 처리 API 호출 함수를 참고합니다."
        }
      ],
      "implementationGuide": "1. `TablesPage.tsx`에서 '탈락 처리'를 담당하는 함수(예: `handleBustOut`)를 찾습니다.\n2. 함수가 호출되면, 먼저 현재 `tables` 상태의 복사본을 만듭니다.\n3. 복사본에서 해당 참가자가 앉아있던 좌석을 `null`로 변경합니다.\n4. `setTables`를 호출하여 UI를 즉시 업데이트합니다.\n5. 이후, 기존에 있던 서버 요청 함수(`bustOutParticipant` 등)를 호출합니다.\n6. `try...catch` 블록으로 서버 요청을 감싸고, `catch`문에서 요청 실패 시 UI를 원래 상태로 되돌리는 로직(원본 `tables` 상태로 `setTables` 호출)을 추가합니다.",
      "verificationCriteria": "1. '탈락 처리' 버튼을 클릭하면, 서버 응답을 기다리지 않고 해당 좌석이 즉시 빈 자리로 표시되어야 합니다.\n2. 만약 서버와의 통신이 실패하더라도, UI가 원래의 상태(참가자가 있는 상태)로 올바르게 복구되어야 합니다.",
      "summary": "`useTables.ts` 훅을 수정하여 `setTables` 상태 설정 함수를 노출시켰습니다. 이를 `TablesPage.tsx`에서 사용하여, '탈락 처리' 시 서버 요청과 동시에 UI를 먼저 업데이트하는 `handleBustOutOptimistic` 함수를 구현했습니다. 또한, 서버 요청 실패 시 원래 상태로 롤백하는 로직을 포함하여 데이터 정합성을 보장했습니다. 이 함수를 관련 모달들에 prop으로 전달하여 기능 구현을 완료했습니다.",
      "completedAt": "2025-06-22T12:50:39.316Z"
    },
    {
      "id": "a002ff4f-9cf7-45f2-9851-90941a7fcb63",
      "name": "PlayerActionModal UI 수정 및 상세 정보 모달 추가",
      "description": "'PlayerActionModal'에 '자리 이동'과 '상세 정보 보기' 버튼을 추가합니다. '상세 정보 보기' 버튼 클릭 시, 선수의 상세 정보를 보여주는 `ParticipantDetailModal`을 새로 생성하여 표시합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T13:07:15.378Z",
      "updatedAt": "2025-06-22T13:09:59.560Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/PlayerActionModal.tsx",
          "type": "TO_MODIFY",
          "description": "UI에 버튼을 추가하고, 상위 컴포넌트의 핸들러를 호출하는 props를 추가합니다."
        },
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "상세 정보 모달을 제어하는 상태와 핸들러를 추가합니다."
        },
        {
          "path": "app2/src/components/ParticipantDetailModal.tsx",
          "type": "CREATE",
          "description": "참가자의 상세 정보를 표시할 새로운 모달 컴포넌트입니다."
        }
      ],
      "implementationGuide": "1. `PlayerActionModal.tsx`에 두 개의 버튼('자리 이동', '상세 정보 보기')을 추가하고, `onMoveSeatClick`과 `onDetailClick` props를 호출하도록 설정합니다.\n2. `app2/src/components/ParticipantDetailModal.tsx` 파일을 새로 생성합니다. 이 컴포넌트는 `participant` prop을 받아 이름, 연락처, ID, 칩, 상태 등 모든 정보를 목록 형태로 표시합니다.\n3. `TablesPage.tsx`에 `isParticipantDetailModalOpen`과 `actionTarget` 상태를 추가합니다.\n4. `PlayerActionModal`의 `onDetailClick`에 연결될 `handleOpenDetailModal` 함수를 `TablesPage.tsx`에 구현하여, `actionTarget`을 설정하고 모달을 열도록 합니다.\n5. `TablesPage.tsx`의 렌더링 로직에 `ParticipantDetailModal`을 조건부로 렌더링하고 필요한 props를 전달하는 코드를 추가합니다.",
      "verificationCriteria": "1. '플레이어 액션' 팝업에 '자리 이동'과 '상세 정보 보기' 버튼이 보여야 합니다.\n2. '상세 정보 보기' 버튼을 클릭하면, 해당 플레이어의 모든 정보가 담긴 새 팝업이 나타나야 합니다.",
      "summary": "PlayerActionModal에 '자리 이동' 및 '상세 정보 보기' 버튼을 추가하고, 상세 정보 버튼 클릭 시 ParticipantDetailModal이 정상적으로 열리도록 구현했습니다. TablesPage에 관련 상태와 핸들러를 추가하여 모달의 표시 여부를 제어합니다. 모든 요구사항이 충족되었습니다.",
      "completedAt": "2025-06-22T13:09:59.558Z"
    },
    {
      "id": "6e1023be-a9bc-4e18-a120-504502fa3363",
      "name": "자리 이동 모달(MoveSeatModal) 생성 및 기능 구현",
      "description": "'자리 이동' 버튼 클릭 시, 플레이어를 이동시킬 테이블과 좌석을 선택할 수 있는 `MoveSeatModal`을 새로 생성하고, 관련 로직을 `TablesPage`에 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "a002ff4f-9cf7-45f2-9851-90941a7fcb63"
        }
      ],
      "createdAt": "2025-06-22T13:07:15.378Z",
      "updatedAt": "2025-06-22T13:11:15.049Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/MoveSeatModal.tsx",
          "type": "CREATE",
          "description": "자리 이동을 위한 UI를 제공하는 새로운 모달 컴포넌트입니다."
        },
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "자리 이동 모달을 제어하는 상태와 핸들러, `moveSeat` 호출 로직을 추가합니다."
        },
        {
          "path": "app2/src/components/PlayerActionModal.tsx",
          "type": "REFERENCE",
          "description": "자리 이동 모달을 여는 트리거가 있는 컴포넌트입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/components/MoveSeatModal.tsx` 파일을 새로 생성합니다.\n2. `MoveSeatModal`은 `tables`, `movingParticipantInfo` 등의 props를 받아서, 모든 테이블의 좌석 현황을 시각적으로 렌더링합니다. 이 때 `Seat` 컴포넌트를 재사용하되, 빈 좌석만 선택 가능하도록 처리합니다.\n3. `TablesPage.tsx`에 `isMoveSeatModalOpen` 상태를 추가합니다.\n4. `PlayerActionModal`의 `onMoveSeatClick`에 연결될 `handleOpenMoveSeatModal` 함수를 `TablesPage.tsx`에 구현하여, 이동할 플레이어 정보를 저장하고 모달을 열도록 합니다.\n5. `MoveSeatModal`의 '확인' 버튼에 연결될 `handleConfirmMove` 함수를 `TablesPage.tsx`에 구현합니다. 이 함수는 `moveSeat` 훅을 호출하여 실제 데이터 변경을 처리합니다.\n6. `TablesPage.tsx`의 렌더링 로직에 `MoveSeatModal`을 조건부로 렌더링하고 필요한 props를 전달하는 코드를 추가합니다.",
      "verificationCriteria": "1. '자리 이동' 버튼을 클릭하면, 모든 테이블의 좌석 현황이 표시되는 새 팝업이 나타나야 합니다.\n2. 팝업에서 빈 좌석을 선택하고 '확인'을 누르면, 플레이어가 해당 좌석으로 이동되어야 합니다.\n3. 이미 플레이어가 있는 좌석은 선택할 수 없어야 합니다.",
      "summary": "`MoveSeatModal` 컴포넌트를 성공적으로 생성하고, `TablesPage`에 관련 상태와 핸들러를 추가하여 '자리 이동' 기능을 완벽하게 구현했습니다. '자리 이동' 버튼 클릭 시 모달이 정상적으로 열리고, 빈 좌석을 선택하여 플레이어를 이동시키는 모든 과정이 요구사항에 따라 정확하게 동작합니다.",
      "completedAt": "2025-06-22T13:11:15.048Z"
    }
  ]
}