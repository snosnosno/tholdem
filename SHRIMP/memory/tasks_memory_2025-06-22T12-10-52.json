{
  "tasks": [
    {
      "id": "118c9889-ae06-4705-8540-08aa23f33f4b",
      "name": "Task 1: 데이터 모델 및 로직 확장",
      "description": "`Table` 데이터 모델에 `name`과 `borderColor` 필드를 추가하고, 이 필드들을 Firestore에서 업데이트하는 `updateTableDetails` 함수를 `useTables.ts` 훅에 구현합니다. 이는 모든 UI 변경의 기반이 되는 가장 선행되어야 할 작업입니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T11:36:02.755Z",
      "updatedAt": "2025-06-22T11:43:05.940Z",
      "implementationGuide": "1. `app2/src/hooks/useTables.ts` 파일을 엽니다.\n2. `Table` 인터페이스에 `name: string;`과 `borderColor?: string;`을 추가합니다.\n3. `updateTableDetails` 비동기 함수를 `useTables` 훅 내에 새로 만듭니다. 이 함수는 `tableId`와 업데이트할 데이터({ name, borderColor })를 인자로 받습니다.\n4. 함수 내에서 `doc`과 `updateDoc`을 사용하여 Firestore의 `tournaments/{tournamentId}/tables/{tableId}` 문서를 업데이트합니다.",
      "verificationCriteria": "1. Firestore의 테이블 데이터에 `name`과 `borderColor` 필드가 성공적으로 추가 및 수정되는지 확인합니다.\n2. `updateTableDetails` 함수 호출 시 에러 없이 데이터가 업데이트되어야 합니다.",
      "analysisResult": "`TablesPage`의 대규모 기능 개선을 위해 데이터 모델 확장, 컴포넌트 분리, 상태 관리 체계화를 중심으로 작업을 진행합니다. `useTables` 훅에 비즈니스 로직(이름/색상/로그 업데이트)을 추가하고, UI는 `TableGridView`, `TableListView`, `PlayerActionModal` 등 재사용 가능한 컴포넌트로 분리하여 구현합니다. 성능 최적화를 위해 `React.memo`와 `useMemo`를 적극 사용하며, 기존 `react-dnd`와 `Tailwind CSS` 스타일 가이드를 일관되게 따릅니다.",
      "summary": "`useTables.ts`의 `Table` 인터페이스에 `name`과 `borderColor` 필드를 성공적으로 추가했으며, Firestore 문서를 업데이트하는 `updateTableDetails` 함수를 구현하고 export 했습니다. 또한, `openNewTable` 함수가 새 테이블 생성 시 `name` 필드를 초기화하도록 수정하여 요구사항을 모두 충족했습니다.",
      "completedAt": "2025-06-22T11:43:05.939Z"
    },
    {
      "id": "598805eb-d328-4d7d-945b-5a6a6322d182",
      "name": "Task 2: UI 상태 관리 및 뷰 전환 기반 구축",
      "description": "`TablesPage.tsx`에 `viewMode`('grid'|'list')와 `searchTerm` 상태를 추가하고, 뷰 모드를 전환하는 토글 UI를 구현합니다. 이는 그리드 뷰와 리스트 뷰를 동적으로 렌더링하기 위한 사전 작업입니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "118c9889-ae06-4705-8540-08aa23f33f4b"
        }
      ],
      "createdAt": "2025-06-22T11:36:02.755Z",
      "updatedAt": "2025-06-22T11:44:17.622Z",
      "implementationGuide": "1. `TablesPage.tsx`에 `useState`를 사용하여 `viewMode`와 `searchTerm` 상태를 추가합니다.\n2. 페이지 상단에 'Grid'와 'List' 뷰를 선택하는 토글 버튼 그룹을 만듭니다.\n3. 토글 버튼 클릭 시 `setViewMode`가 호출되도록 핸들러를 연결합니다.\n4. 렌더링 부분에서 `viewMode` 값에 따라 기존 그리드 뷰 컴포넌트 또는 새로운 리스트 뷰 컴포넌트(지금은 플레이스홀더)가 조건부로 렌더링되도록 구조를 잡습니다.",
      "verificationCriteria": "1. 뷰 전환 토글 버튼이 화면에 표시되어야 합니다.\n2. 토글 버튼 클릭에 따라 `viewMode` 상태가 'grid'와 'list'로 정상적으로 변경되어야 합니다.",
      "analysisResult": "`TablesPage`의 대규모 기능 개선을 위해 데이터 모델 확장, 컴포넌트 분리, 상태 관리 체계화를 중심으로 작업을 진행합니다. `useTables` 훅에 비즈니스 로직(이름/색상/로그 업데이트)을 추가하고, UI는 `TableGridView`, `TableListView`, `PlayerActionModal` 등 재사용 가능한 컴포넌트로 분리하여 구현합니다. 성능 최적화를 위해 `React.memo`와 `useMemo`를 적극 사용하며, 기존 `react-dnd`와 `Tailwind CSS` 스타일 가이드를 일관되게 따릅니다.",
      "summary": "`TablesPage.tsx`에 `viewMode`와 `searchTerm` 상태를 성공적으로 추가했습니다. 또한, 'Grid'와 'List' 뷰를 전환할 수 있는 토글 버튼 UI를 구현하고, `viewMode` 상태에 따라 그리드 뷰 또는 리스트 뷰 플레이스홀더가 조건부로 렌더링되도록 로직을 올바르게 구성하여 요구사항을 모두 충족했습니다.",
      "completedAt": "2025-06-22T11:44:17.621Z"
    },
    {
      "id": "0f1b2079-bfdd-440c-9f1d-15335e149ead",
      "name": "Task 3: 테이블 이름 및 색상 편집 UI 구현",
      "description": "사용자가 테이블의 제목을 클릭하여 이름을 인라인으로 수정하고, 아이콘을 통해 테두리 색상을 선택하여 변경할 수 있는 UI를 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "118c9889-ae06-4705-8540-08aa23f33f4b"
        }
      ],
      "createdAt": "2025-06-22T11:36:02.755Z",
      "updatedAt": "2025-06-22T11:45:52.215Z",
      "implementationGuide": "1. 테이블 제목(`h3`)을 클릭하면 `input`으로 바뀌는 로직을 구현합니다. `isEditing`과 같은 상태를 로컬에서 관리합니다.\n2. `onBlur` 또는 `Enter` 키 입력 시 `updateTableDetails`를 호출하여 변경된 이름을 저장합니다.\n3. 제목 옆에 색상 팔레트 아이콘을 추가하고, 클릭 시 간단한 색상 선택기(미리 정의된 색상 목록)가 나타나게 합니다.\n4. 색상 선택 시 `updateTableDetails`를 호출하여 `borderColor`를 저장하고, 해당 테이블 컨테이너의 `style`에 테두리 색상을 적용합니다.",
      "verificationCriteria": "1. 테이블 이름을 클릭하면 입력 필드로 변경되어야 합니다.\n2. 이름 수정 후 Firestore에 정상적으로 저장되어야 합니다.\n3. 색상 선택기가 나타나고, 선택한 색상이 테이블 테두리에 즉시 반영되며 Firestore에 저장되어야 합니다.",
      "analysisResult": "`TablesPage`의 대규모 기능 개선을 위해 데이터 모델 확장, 컴포넌트 분리, 상태 관리 체계화를 중심으로 작업을 진행합니다. `useTables` 훅에 비즈니스 로직(이름/색상/로그 업데이트)을 추가하고, UI는 `TableGridView`, `TableListView`, `PlayerActionModal` 등 재사용 가능한 컴포넌트로 분리하여 구현합니다. 성능 최적화를 위해 `React.memo`와 `useMemo`를 적극 사용하며, 기존 `react-dnd`와 `Tailwind CSS` 스타일 가이드를 일관되게 따릅니다.",
      "summary": "`TablesPage`의 그리드 뷰를 `TableCard` 컴포넌트로 성공적으로 분리했습니다. `TableCard` 내부에 인라인 이름 편집 기능과 사전 정의된 색상 팔레트를 이용한 테두리 색상 변경 기능을 구현했으며, 이 변경 사항이 `updateTableDetails` 함수를 통해 Firestore에 올바르게 저장되도록 연동했습니다. 모든 요구사항이 충족되었습니다.",
      "completedAt": "2025-06-22T11:45:52.214Z"
    },
    {
      "id": "10f02a95-6c62-4f6f-8cb5-4b868b9845e4",
      "name": "Task 4: 플레이어 액션 팝업 구현",
      "description": "기존 `Modal.tsx`를 재사용하여 플레이어 클릭 시 열리는 `PlayerActionModal.tsx` 컴포넌트를 생성합니다. 이 팝업에서는 플레이어 정보 조회, 탈락 처리, 자리 이동 시작 등의 액션을 제공합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "118c9889-ae06-4705-8540-08aa23f33f4b"
        }
      ],
      "createdAt": "2025-06-22T11:36:02.755Z",
      "updatedAt": "2025-06-22T11:47:29.545Z",
      "implementationGuide": "1. `PlayerActionModal.tsx` 파일을 새로 생성합니다.\n2. `TablesPage`에 `selectedPlayerInfo` 상태와 모달을 여닫는 핸들러를 추가합니다.\n3. `Seat` 컴포넌트의 `onClick` 이벤트를 수정하여 플레이어가 있을 경우 이 핸들러를 호출하도록 합니다.\n4. `PlayerActionModal` 내부에 플레이어 이름, 현재 테이블/좌석 정보를 표시하고 'Bust Out', 'Move Seat' 버튼을 추가합니다.\n5. 'Bust Out' 버튼은 기존 `bustOutParticipant` 함수를 호출합니다.\n6. 기존 `Seat` 컴포넌트의 마우스 오버 'X' 버튼을 제거합니다.",
      "verificationCriteria": "1. 좌석에 있는 플레이어를 클릭하면 액션 팝업이 열려야 합니다.\n2. 팝업 내 'Bust Out' 버튼이 정상적으로 동작해야 합니다.\n3. 기존 'X' 버튼이 UI에서 사라져야 합니다.",
      "analysisResult": "`TablesPage`의 대규모 기능 개선을 위해 데이터 모델 확장, 컴포넌트 분리, 상태 관리 체계화를 중심으로 작업을 진행합니다. `useTables` 훅에 비즈니스 로직(이름/색상/로그 업데이트)을 추가하고, UI는 `TableGridView`, `TableListView`, `PlayerActionModal` 등 재사용 가능한 컴포넌트로 분리하여 구현합니다. 성능 최적화를 위해 `React.memo`와 `useMemo`를 적극 사용하며, 기존 `react-dnd`와 `Tailwind CSS` 스타일 가이드를 일관되게 따릅니다.",
      "summary": "`PlayerActionModal` 컴포넌트를 성공적으로 생성하고, `Seat` 클릭 시 해당 플레이어의 정보를 담아 모달을 열도록 `TablesPage`와 `TableCard`를 수정했습니다. 또한, 기존 `Seat`의 'X' 버튼을 제거하고 'Bust Out' 기능을 모달 내부로 통합하여 UI를 개선하고 요구사항을 모두 충족했습니다.",
      "completedAt": "2025-06-22T11:47:29.544Z"
    },
    {
      "id": "f3a9906d-a3c8-420a-8945-613baa41245a",
      "name": "Task 5: 컴팩트 그리드 뷰 및 리스트 뷰 구현",
      "description": "기존 그리드 뷰의 좌석 높이를 줄여 더 많은 정보를 표시하고, 텍스트 기반의 새로운 '리스트 뷰'를 구현합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "598805eb-d328-4d7d-945b-5a6a6322d182"
        }
      ],
      "createdAt": "2025-06-22T11:36:02.755Z",
      "updatedAt": "2025-06-22T11:48:30.840Z",
      "implementationGuide": "1. `Seat.tsx`의 `h-20` 클래스를 `h-16` 등으로 수정하여 높이를 줄입니다.\n2. `TableListView.tsx` 컴포넌트를 새로 생성합니다.\n3. 이 컴포넌트는 `tables` 데이터를 받아 각 테이블을 `ul` 또는 `div` 목록 형태로 렌더링하고, 각 테이블 항목 내에 플레이어 목록을 텍스트로 표시합니다.\n4. `TablesPage.tsx`의 조건부 렌더링 로직에 `TableListView`를 연결합니다.",
      "verificationCriteria": "1. 그리드 뷰의 좌석 높이가 줄어들어야 합니다.\n2. 뷰 전환 토글에서 'List'를 선택하면, 테이블과 플레이어 정보가 목록 형태로 표시되어야 합니다.",
      "analysisResult": "`TablesPage`의 대규모 기능 개선을 위해 데이터 모델 확장, 컴포넌트 분리, 상태 관리 체계화를 중심으로 작업을 진행합니다. `useTables` 훅에 비즈니스 로직(이름/색상/로그 업데이트)을 추가하고, UI는 `TableGridView`, `TableListView`, `PlayerActionModal` 등 재사용 가능한 컴포넌트로 분리하여 구현합니다. 성능 최적화를 위해 `React.memo`와 `useMemo`를 적극 사용하며, 기존 `react-dnd`와 `Tailwind CSS` 스타일 가이드를 일관되게 따릅니다.",
      "summary": "`Seat` 컴포넌트의 높이를 줄여 그리드 뷰를 더 컴팩트하게 만들었습니다. 또한, `TableListView` 컴포넌트를 성공적으로 새로 구현하고 `TablesPage`의 뷰 전환 로직에 연결하여, 'List' 모드 선택 시 테이블과 플레이어 정보가 목록 형태로 올바르게 표시되도록 했습니다. 모든 요구사항이 충족되었습니다.",
      "completedAt": "2025-06-22T11:48:30.838Z"
    }
  ]
}