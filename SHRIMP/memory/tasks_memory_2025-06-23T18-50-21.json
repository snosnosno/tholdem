{
  "tasks": [
    {
      "id": "bd6d8556-4b29-46ac-8ef7-51d7422464ab",
      "name": "Task 1: Implement onJobPostingCreated Firebase Function",
      "description": "Add the new Firestore-triggered function to `functions/src/index.ts`. This function will contain the core logic for matching staff to new job postings based on their role and weekly availability.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-23T18:47:45.814Z",
      "updatedAt": "2025-06-23T18:48:20.479Z",
      "relatedFiles": [
        {
          "path": "functions/src/index.ts",
          "type": "TO_MODIFY",
          "description": "Main file for all cloud functions."
        }
      ],
      "implementationGuide": "1. Open `functions/src/index.ts`. \n2. Add a new exported function `onJobPostingCreated` that triggers on document creation in the `jobPostings` collection. \n3. Inside, retrieve the `jobPosting` data. \n4. Fetch the associated `tournament` document to get the date range. \n5. Query `staffProfiles` for users with a matching role. \n6. For each result, fetch their `staffAvailability`. \n7. Implement the simplified matching logic: check if the staff's weekly availability is compatible with the tournament's days of the week. \n8. For each matched staff, create a document in a new `notifications` collection with details about the job posting.",
      "verificationCriteria": "The function `onJobPostingCreated` is correctly implemented in `functions/src/index.ts`, compiles without TS/lint errors, and contains the specified logic.",
      "summary": "The `onJobPostingCreated` function has been successfully implemented in `functions/src/index.ts`. The function is designed to trigger when a new job posting is created, query for staff with a matching role, and check their weekly availability against the tournament's dates. For each staff member who is a match, a new notification is created in the `notifications` collection. The implementation is robust, includes logging, and fulfills all requirements of the task.",
      "completedAt": "2025-06-23T18:48:20.478Z"
    },
    {
      "id": "9f16c23a-bbce-4fe0-9892-2f3fd7d387cd",
      "name": "Task 2: Update Firestore Rules for Notifications",
      "description": "Add security rules for the new `notifications` collection to `firestore.rules` to allow users to access their own notifications.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "bd6d8556-4b29-46ac-8ef7-51d7422464ab"
        }
      ],
      "createdAt": "2025-06-23T18:47:45.814Z",
      "updatedAt": "2025-06-23T18:48:49.403Z",
      "relatedFiles": [
        {
          "path": "firestore.rules",
          "type": "TO_MODIFY",
          "description": "Add security rules for the new notifications collection."
        }
      ],
      "implementationGuide": "Open `firestore.rules`. Add a new match block: `match /notifications/{notificationId} { allow read, update: if request.auth.uid == resource.data.staffId; allow create, delete: if false; }`. This allows a user to read and update (e.g., mark as read) their own notifications, while creation is handled by the backend function.",
      "verificationCriteria": "The new rule is present in `firestore.rules` and correctly allows a user to read/update their own notification documents.",
      "summary": "The `firestore.rules` file has been successfully updated with a new rule for the `/notifications/{notificationId}` path. The rule correctly allows users to read and update their own notification documents, while restricting creation and deletion to backend functions, fulfilling the task's requirements.",
      "completedAt": "2025-06-23T18:48:49.403Z"
    }
  ]
}