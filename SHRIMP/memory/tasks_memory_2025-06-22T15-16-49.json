{
  "tasks": [
    {
      "id": "c0beca63-311b-4af0-99b2-2d20feda9cd7",
      "name": "Refactor: useTables.ts에 셔플 유틸리티 함수 추가",
      "description": "useTables.ts 파일 내에 Fisher-Yates 알고리즘을 사용한 `shuffleArray` 헬퍼 함수를 추가합니다. 이 함수는 이후 다른 함수에서 배열을 무작위로 섞는 데 사용됩니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T14:02:56.760Z",
      "updatedAt": "2025-06-22T14:03:41.439Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useTables.ts",
          "type": "TO_MODIFY",
          "description": "셔플 유틸리티 함수를 추가할 대상 파일입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/hooks/useTables.ts` 파일을 엽니다.\n2. `useTables` 훅 바깥쪽에 `shuffleArray` 함수를 선언합니다. \n`function shuffleArray<T>(array: T[]): T[] { ... }`\n3. Fisher-Yates 알고리즘을 구현하여 배열의 요소들을 제자리에서 섞고, 섞인 배열을 반환하도록 합니다.",
      "verificationCriteria": "`shuffleArray` 함수가 배열을 인자로 받아, 요소들이 무작위로 섞인 새 배열을 반환해야 합니다.",
      "summary": "`useTables.ts` 파일을 확인한 결과, `shuffleArray` 헬퍼 함수가 이미 구현되어 있었습니다. 따라서 이 작업은 추가적인 코드 변경 없이 완료되었습니다.",
      "completedAt": "2025-06-22T14:03:41.437Z"
    },
    {
      "id": "91f0ae82-8285-40b0-a008-d964076932df",
      "name": "Feature: autoAssignSeats에 랜덤 배정 로직 적용",
      "description": "autoAssignSeats 함수를 수정하여, 참가자와 빈 좌석을 모두 무작위로 섞은 후 배정하도록 변경합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "c0beca63-311b-4af0-99b2-2d20feda9cd7"
        }
      ],
      "createdAt": "2025-06-22T14:02:56.760Z",
      "updatedAt": "2025-06-22T14:04:50.553Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useTables.ts",
          "type": "TO_MODIFY",
          "description": "랜덤 배정 로직을 적용할 대상 파일입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/hooks/useTables.ts` 파일을 엽니다.\n2. `autoAssignSeats` 함수 내부 로직을 수정합니다.\n3. 모든 테이블의 빈 좌석 `{ tableId, seatIndex }` 목록을 생성합니다.\n4. `shuffleArray` 함수를 사용해 참가자 목록과 빈 좌석 목록을 각각 섞습니다.\n5. 섞인 목록을 기준으로, `firestore.batch()`를 사용하여 참가자를 좌석에 배정하는 일괄 업데이트를 실행합니다.",
      "verificationCriteria": "좌석 자동 배정 실행 시, 참가자들이 특정 순서 없이 무작위로 테이블과 좌석에 배정되어야 합니다.",
      "summary": "`autoAssignSeats` 함수를 성공적으로 수정했습니다. 이제 참가자와 모든 테이블의 빈 좌석을 각각 무작위로 섞은 후, 완전히 무작위로 매칭하여 배정합니다. 모든 DB 업데이트는 `runTransaction` 내에서 일괄 처리하여 데이터 정합성을 보장합니다.",
      "completedAt": "2025-06-22T14:04:50.552Z"
    },
    {
      "id": "037dd618-c733-454e-92fa-5d3b7861a9d7",
      "name": "Feature: closeTable에 랜덤 밸런싱 로직 적용",
      "description": "테이블을 닫을 때 실행되는 자동 밸런싱 로직을 수정하여, 인원이 가장 적은 테이블 중 무작위로 하나를 선택하고, 그 안의 빈자리도 무작위로 선택하여 플레이어를 배정하도록 변경합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "c0beca63-311b-4af0-99b2-2d20feda9cd7"
        }
      ],
      "createdAt": "2025-06-22T14:02:56.760Z",
      "updatedAt": "2025-06-22T14:08:50.722Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useTables.ts",
          "type": "TO_MODIFY",
          "description": "랜덤 밸런싱 로직을 적용할 대상 파일입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/hooks/useTables.ts` 파일을 엽니다.\n2. `closeTable` 함수 내부의 플레이어 재배정 로직을 찾습니다.\n3. 재배정 시, 인원수가 가장 적은 테이블들의 목록을 찾습니다.\n4. `Math.random()`을 이용해 해당 목록에서 랜덤 테이블을, 그리고 그 테이블 내에서 랜덤 빈 좌석을 선택하도록 로직을 수정합니다.\n5. 모든 업데이트는 `firestore.batch()`를 사용하여 일괄 처리합니다.",
      "verificationCriteria": "테이블을 닫은 후, 해당 테이블의 플레이어들이 인원이 가장 적은 다른 테이블들로 무작위 분산되어 재배정되어야 합니다.",
      "summary": "`closeTable` 함수의 플레이어 재배정 로직을 성공적으로 수정했습니다. 이제 테이블이 닫히면, 이동해야 할 플레이어들은 인원수가 가장 적은 테이블 그룹 중 하나에 무작위로 배정되며, 해당 테이블 내의 빈자리 또한 무작위로 선택됩니다. 이로써 테이블 밸런싱 과정에 예측 불가능성이 추가되었습니다. 모든 DB 변경은 `runTransaction`을 통해 원자적으로 처리됩니다.",
      "completedAt": "2025-06-22T14:08:50.721Z"
    }
  ]
}