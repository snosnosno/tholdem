{
  "tasks": [
    {
      "id": "b67a69d2-4e29-4c95-8001-13b04dcc6736",
      "name": "useParticipants 훅 기능 확장",
      "description": "참가자를 추가함과 동시에 자동으로 빈 좌석에 배정하는 기능을 지원하도록 `useParticipants` 훅을 수정합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T07:20:50.880Z",
      "updatedAt": "2025-06-22T07:29:05.888Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useParticipants.ts",
          "type": "TO_MODIFY",
          "description": "새로운 참가자 추가 및 좌석 배정 로직을 추가하기 위해 수정합니다."
        },
        {
          "path": "app2/src/hooks/useTables.ts",
          "type": "REFERENCE",
          "description": "테이블 데이터 구조와 컬렉션 참조를 위해 사용합니다."
        }
      ],
      "implementationGuide": "1. `app2/src/hooks/useParticipants.ts` 파일을 엽니다.\n2. `Participant` 인터페이스에 `tableId?: string`와 `seatNumber?: number` 선택적 필드를 추가했는지 확인합니다.\n3. 필요한 Firestore 함수(`runTransaction`, `getDocs`, `collection`, `doc`)와 `Table` 인터페이스, `tablesCollection` 상수를 가져옵니다.\n4. `addParticipantAndAssignToSeat`라는 새로운 비동기 함수를 `useParticipants` 훅 내에 생성하고, 훅의 반환 객체에 추가하여 export 합니다.\n5. `runTransaction`을 사용하여 다음 작업을 원자적으로 구현합니다:\n    - `tables` 컬렉션의 모든 문서를 가져와 `Table[]` 형태로 변환합니다.\n    - 각 테이블의 현재 인원수(`seats` 배열에서 `null`이 아닌 값의 개수)를 계산하고, 최소 인원수를 찾습니다.\n    - 최소 인원수를 가진 테이블들(후보 테이블)을 모두 찾습니다.\n    - 이 후보 테이블들에서 모든 빈 좌석(`{tableId: string, seatIndex: number}`)의 목록을 만듭니다.\n    - 빈 좌석 목록이 비어있다면, '빈 좌석이 없습니다.' 에러를 발생시킵니다.\n    - 빈 좌석 목록에서 무작위로 하나의 좌석을 선택합니다 (`Math.random()`).\n    - `participants` 컬렉션에 대한 새 문서 참조를 생성합니다.\n    - 트랜잭션을 사용하여 새 참가자 문서에 참가자 데이터와 선택된 좌석의 `tableId`, `seatNumber`(seatIndex)를 `set` 합니다.\n    - 트랜잭션을 사용하여 선택된 테이블 문서의 `seats` 배열에서 해당 `seatIndex` 위치를 새 참가자 ID로 `update` 합니다.\n    - 성공 시, 배정된 정보를 담은 객체를 반환합니다 (예: `{ success: true, tableNumber: ..., seatNumber: ... }`).",
      "verificationCriteria": "`addParticipantAndAssignToSeat` 함수가 `useParticipants.ts`에 존재하고, 단일 트랜잭션 내에서 참가자를 정확히 생성하고 테이블을 업데이트해야 합니다.",
      "summary": "`useParticipants` 훅에 `addParticipantAndAssignToSeat` 함수를 성공적으로 구현했습니다. 이 함수는 테이블 간 인원 균형을 맞추기 위해 가장 적은 인원을 가진 테이블을 식별하고, 해당 테이블들의 빈자리 중 하나를 무작위로 선택하여 참가자를 배정합니다. 전체 과정은 Firestore 트랜잭션을 통해 원자적으로 처리되어 데이터 정합성을 보장합니다.",
      "completedAt": "2025-06-22T07:29:05.887Z"
    },
    {
      "id": "b00a013d-e537-4123-8ea8-e9ead03b19a2",
      "name": "ParticipantsPage UI 연동",
      "description": "`ParticipantsPage.tsx`에서 새로운 `addParticipantAndAssignToSeat` 함수를 사용하도록 수정합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "b67a69d2-4e29-4c95-8001-13b04dcc6736"
        }
      ],
      "createdAt": "2025-06-22T07:20:50.880Z",
      "updatedAt": "2025-06-22T07:31:40.404Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/ParticipantsPage.tsx",
          "type": "TO_MODIFY",
          "description": "새로운 함수를 호출하도록 UI 로직을 수정합니다."
        },
        {
          "path": "app2/src/hooks/useParticipants.ts",
          "type": "REFERENCE",
          "description": "새로운 `addParticipantAndAssignToSeat` 함수를 가져오기 위해 참조합니다."
        }
      ],
      "implementationGuide": "1. `app2/src/pages/ParticipantsPage.tsx` 파일을 엽니다.\n2. `useParticipants` 훅 구조 분해 할당에 `addParticipantAndAssignToSeat`를 추가합니다.\n3. `handleAdd` 함수를 찾습니다.\n4. 기존 `addParticipant(...)` 호출을 `addParticipantAndAssignToSeat(newParticipant)` 호출로 교체합니다.\n5. `try...catch` 블록으로 호출을 감싸고, 성공 또는 실패 시 `alert`를 사용하여 사용자에게 적절한 피드백을 제공합니다 (예: '참가자가 테이블 X, 좌석 Y에 배정되었습니다.' 또는 에러 메시지).",
      "verificationCriteria": "참가자 페이지의 '추가' 버튼이 `addParticipantAndAssignToSeat` 함수를 호출하고, 결과에 따라 사용자에게 적절한 피드백이 표시되어야 합니다.",
      "summary": "`ParticipantsPage.tsx`의 `handleAdd` 함수를 성공적으로 수정했습니다. 이제 '추가' 버튼을 클릭하면 `useParticipants` 훅에서 새로 구현한 `addParticipantAndAssignToSeat` 함수를 호출합니다. `try...catch` 블록을 사용하여 비동기 작업의 성공 및 실패를 처리하며, 결과에 따라 사용자에게 '참가자 OOO님이 테이블 X, 좌석 Y에 배정되었습니다.'와 같은 성공 메시지나 오류 메시지를 `alert`를 통해 명확하게 전달합니다.",
      "completedAt": "2025-06-22T07:31:40.402Z"
    }
  ]
}