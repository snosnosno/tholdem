{
  "tasks": [
    {
      "id": "05f0a860-2843-453f-bac1-8a2144c7d499",
      "name": "[Backend] 테이블 'standby' 상태 로직 구현",
      "description": "`useTables.ts` 훅을 수정하여 테이블의 데이터 모델과 핵심 로직을 변경합니다. 'standby' 상태를 추가하고, 테이블 생성 시 이 상태로 시작하도록 하며, 테이블을 활성화하는 새로운 함수를 구현하고, 기존 참가자 배정 로직들이 'open' 상태의 테이블만 대상으로 하도록 수정합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-22T16:50:28.885Z",
      "updatedAt": "2025-06-22T16:55:04.599Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useTables.ts",
          "type": "TO_MODIFY",
          "description": "테이블 상태 로직 및 데이터 모델 수정"
        }
      ],
      "implementationGuide": "1. `app2/src/hooks/useTables.ts` 파일의 `Table` 인터페이스에 `status?: 'open' | 'closed' | 'standby';`와 같이 'standby'를 추가합니다.\n2. `openNewTable` 함수 내에서 새로운 테이블 객체를 생성할 때 `status: 'standby'`로 설정합니다.\n3. `updateDoc`을 사용하여 테이블의 status를 'open'으로 변경하는 `activateTable(tableId: string)` 함수를 새로 구현합니다.\n4. `autoAssignSeats`, `closeTable`, `moveSeat` 함수 내에서 처리 대상 테이블을 필터링하는 부분에 `t.status === 'open'` 조건을 명시적으로 추가하여 'standby' 상태의 테이블이 제외되도록 보장합니다.",
      "verificationCriteria": "1. '새 테이블 열기' 실행 시 Firestore DB에 `status: 'standby'`로 테이블이 생성되는지 확인합니다.\n2. `activateTable` 함수 호출 시 해당 테이블의 `status`가 'open'으로 변경되는지 확인합니다.\n3. 참가자 자동 배정 시 'standby' 상태의 테이블에는 참가자가 배정되지 않는지 확인합니다.",
      "summary": "`useTables.ts` 훅에 `standby` 상태를 성공적으로 도입했습니다. `Table` 인터페이스를 확장하고, `openNewTable`이 `standby` 상태로 테이블을 생성하도록 수정했습니다. 테이블을 여는 `activateTable` 함수를 추가했으며, 참가자 배정 로직이 `open` 상태의 테이블만 대상으로 하도록 안전장치를 마련했습니다. 모든 변경 사항은 기존 코드베이스와 일관성을 유지하며 안정적으로 구현되었습니다.",
      "completedAt": "2025-06-22T16:55:04.598Z"
    },
    {
      "id": "b0d307b2-f89a-40c4-8047-d89b6b5befbf",
      "name": "[Frontend] 테이블 'standby' 상태 UI 구현",
      "description": "`TablesPage`와 `TableCard` 컴포넌트를 수정하여 'standby' 상태를 시각적으로 표시하고, 관리자가 테이블을 활성화할 수 있는 UI를 제공합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "05f0a860-2843-453f-bac1-8a2144c7d499"
        }
      ],
      "createdAt": "2025-06-22T16:50:28.885Z",
      "updatedAt": "2025-06-22T16:57:13.788Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "TO_MODIFY",
          "description": "TableCard에 activateTable 함수 전달"
        },
        {
          "path": "app2/src/components/TableCard.tsx",
          "type": "TO_MODIFY",
          "description": "standby 상태 UI 및 활성화 버튼 구현"
        }
      ],
      "implementationGuide": "1. `app2/src/pages/TablesPage.tsx`에서 `useTables` 훅으로부터 새로 만든 `activateTable` 함수를 가져옵니다.\n2. `TableCard` 컴포넌트에 `activateTable` 함수를 prop으로 전달합니다.\n3. `app2/src/components/TableCard.tsx`에서 `activateTable` prop을 받도록 수정합니다.\n4. `table.status === 'standby'` 여부에 따라 조건부 스타일링(예: `bg-gray-200`)과 '대기 중' 뱃지를 추가합니다.\n5. `table.status === 'standby'`일 경우에만 '활성화' 버튼을 표시하고, 클릭 시 `props.activateTable(table.id)`가 호출되도록 구현합니다.",
      "verificationCriteria": "1. 'standby' 상태인 테이블 카드가 시각적으로(예: 다른 배경색, 뱃지) 구분되어 보이는지 확인합니다.\n2. 'standby' 상태인 테이블 카드에만 '활성화' 버튼이 나타나는지 확인합니다.\n3. '활성화' 버튼을 클릭하면 테이블이 'open' 상태로 바뀌고 버튼과 뱃지가 사라지는지 확인합니다.",
      "summary": "`TableCard` 및 `TablesPage` 컴포넌트를 수정하여 테이블의 'standby' 상태에 대한 UI를 성공적으로 구현했습니다. 대기 중인 테이블은 시각적으로 구분되며, '활성화' 버튼을 통해 상태를 변경할 수 있는 기능이 추가되었습니다. 모든 기능이 계획대로 구현되었으며, 사용자 경험을 개선했습니다.",
      "completedAt": "2025-06-22T16:57:13.786Z"
    }
  ]
}