{
  "tasks": [
    {
      "id": "8fe86a38-0f4c-46b0-88b9-f22dd69c88dc",
      "name": "[Backend] processRegistration 함수 권한 축소",
      "description": "`functions/src/index.ts` 파일에 있는 `processRegistration` Cloud Function의 호출 권한을 수정합니다. 기존에 `manager`에게도 허용했던 권한을 다시 `admin` 역할만 가진 사용자만 호출할 수 있도록 제한합니다.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-06-28T21:31:53.092Z",
      "updatedAt": "2025-06-28T21:31:53.092Z",
      "relatedFiles": [
        {
          "path": "functions/src/index.ts",
          "type": "TO_MODIFY",
          "description": "Cloud Function의 권한 확인 로직을 수정할 파일입니다."
        }
      ],
      "implementationGuide": "1. `functions/src/index.ts` 파일을 엽니다.\\n2. `processRegistration` 함수를 찾습니다.\\n3. 함수 상단의 권한 확인 `if` 문을 `if (context.auth?.token?.role !== 'admin')`으로 수정하여, `admin`이 아닐 경우 `permission-denied` 오류를 발생시키도록 변경합니다.",
      "verificationCriteria": "수정 후 Firebase에 함수를 배포했을 때, `manager` 계정으로 가입 승인/거절 시도를 하면 콘솔에 `permission-denied` 오류가 기록되어야 합니다. `admin` 계정으로는 정상적으로 처리되어야 합니다."
    },
    {
      "id": "7a19cc05-26da-4d73-8c5f-45bd2bf312a8",
      "name": "[Frontend] AuthContext 리팩토링 및 호환성 유지",
      "description": "`app2/src/contexts/AuthContext.tsx` 파일을 수정하여, `isAdmin` boolean 대신 명시적인 `role` 문자열을 상태로 관리합니다. 동시에, 기존 코드의 수정을 최소화하기 위해 `role`을 기반으로 계산되는 `isAdmin` 값을 컨텍스트에 함께 제공하여 하위 호환성을 유지합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "8fe86a38-0f4c-46b0-88b9-f22dd69c88dc"
        }
      ],
      "createdAt": "2025-06-28T21:31:53.092Z",
      "updatedAt": "2025-06-28T21:31:53.092Z",
      "relatedFiles": [
        {
          "path": "app2/src/contexts/AuthContext.tsx",
          "type": "TO_MODIFY",
          "description": "인증 컨텍스트를 `role` 기반으로 수정하고 `isAdmin` 호환성을 유지할 파일입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/contexts/AuthContext.tsx` 파일을 엽니다.\\n2. `useState`를 사용하여 `role` 상태(`string | null`)를 추가합니다.\\n3. `onAuthStateChanged` 콜백 내에서, 사용자의 `idTokenResult.claims.role`을 가져와 `role` 상태를 업데이트하는 로직을 추가합니다.\\n4. Context Provider의 `value` 객체에 새로운 `role` 상태와 함께, `const isAdmin = role === 'admin' || role === 'manager';`와 같이 계산된 `isAdmin` 값을 포함시켜 반환합니다.",
      "verificationCriteria": "`useAuth()` 훅을 사용하는 다른 컴포넌트에서 `isAdmin`을 호출했을 때 앱이 깨지지 않아야 합니다. `useAuth()`에서 새로 추가된 `role` 값을 정상적으로 가져올 수 있어야 합니다."
    },
    {
      "id": "1202eca2-d63f-45f1-9d09-1fd7d7c71d6d",
      "name": "[Frontend] AdminRoute 컴포넌트 삭제",
      "description": "더 유연한 `RoleBasedRoute`를 도입하기 위해, 기존의 `app2/src/components/AdminRoute.tsx` 파일을 삭제합니다.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-06-28T21:31:53.092Z",
      "updatedAt": "2025-06-28T21:31:53.092Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/AdminRoute.tsx",
          "type": "TO_MODIFY",
          "description": "새로운 라우트 가드로 대체하기 위해 삭제할 파일입니다."
        }
      ],
      "implementationGuide": "`app2/src/components/AdminRoute.tsx` 파일을 삭제합니다.",
      "verificationCriteria": "해당 파일이 프로젝트에서 완전히 삭제되어야 합니다."
    },
    {
      "id": "5d7d7819-3c27-4f20-b6f9-767166ec9182",
      "name": "[Frontend] RoleBasedRoute 컴포넌트 신규 생성",
      "description": "역할 기반 접근 제어를 처리하는 재사용 가능한 `RoleBasedRoute.tsx` 컴포넌트를 `app2/src/components/` 디렉토리에 새로 생성합니다. 이 컴포넌트는 `allowedRoles`라는 props를 받아, 현재 사용자의 역할이 허용 목록에 있는지 확인합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "1202eca2-d63f-45f1-9d09-1fd7d7c71d6d"
        }
      ],
      "createdAt": "2025-06-28T21:31:53.092Z",
      "updatedAt": "2025-06-28T21:31:53.092Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/RoleBasedRoute.tsx",
          "type": "CREATE",
          "description": "역할 기반 접근 제어를 위한 새로운 라우트 가드 컴포넌트입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/components/RoleBasedRoute.tsx` 파일을 생성합니다.\\n2. `useAuth` 훅에서 `role`과 `loading` 상태를 가져옵니다.\\n3. `props`로 받은 `allowedRoles` 배열에 현재 사용자의 `role`이 포함되어 있으면 `<Outlet />`을, 그렇지 않으면 `/events`로 리디렉션하는 로직을 구현합니다.",
      "verificationCriteria": "컴포넌트가 정상적으로 생성되어야 합니다. `allowedRoles`에 따라 접근 제어가 올바르게 동작해야 합니다."
    },
    {
      "id": "56cd3ba0-b964-47f4-96f2-c6f50ca9ffd6",
      "name": "[Frontend] App.tsx 라우팅 구조 재구성",
      "description": "`app2/src/App.tsx`의 라우팅 구조를 새로 만든 `RoleBasedRoute`를 사용하도록 수정합니다. 가입 승인 페이지는 `admin`만, 나머지 관리자 페이지는 `admin`과 `manager`가 접근할 수 있도록 경로를 분리하고 각각 다른 `allowedRoles`를 적용합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "5d7d7819-3c27-4f20-b6f9-767166ec9182"
        }
      ],
      "createdAt": "2025-06-28T21:31:53.092Z",
      "updatedAt": "2025-06-28T21:31:53.092Z",
      "relatedFiles": [
        {
          "path": "app2/src/App.tsx",
          "type": "TO_MODIFY",
          "description": "새로운 `RoleBasedRoute`를 적용하여 라우팅을 재구성할 파일입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/App.tsx` 파일을 엽니다.\\n2. 기존 `AdminRoute` 임포트를 삭제하고 `RoleBasedRoute`를 임포트합니다.\\n3. `/admin/approvals` 경로를 별도의 `<Route>`로 분리하고, `<RoleBasedRoute allowedRoles={['admin']}>`로 감싸줍니다.\\n4. 나머지 모든 `/admin/*` 경로들은 `<RoleBasedRoute allowedRoles={['admin', 'manager']}>`로 감싸줍니다.",
      "verificationCriteria": "`manager`로 로그인 시 `/admin/approvals`에 접근할 수 없고 `/events`로 리디렉션되어야 합니다. `admin`으로는 모든 관리자 페이지에 접근 가능해야 합니다."
    },
    {
      "id": "5a78db40-c6ea-4a10-ab67-2fe6e9942063",
      "name": "[Frontend] Layout.tsx 메뉴 가시성 분리",
      "description": "`app2/src/components/Layout.tsx`의 사이드바 메뉴를 수정하여, '가입 승인' 메뉴 항목이 `admin` 역할의 사용자에게만 보이도록 설정합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7a19cc05-26da-4d73-8c5f-45bd2bf312a8"
        }
      ],
      "createdAt": "2025-06-28T21:31:53.092Z",
      "updatedAt": "2025-06-28T21:31:53.092Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/Layout.tsx",
          "type": "TO_MODIFY",
          "description": "사이드바 메뉴의 가시성을 `role`에 따라 제어하도록 수정할 파일입니다."
        }
      ],
      "implementationGuide": "1. `app2/src/components/Layout.tsx` 파일을 엽니다.\\n2. `useAuth` 훅에서 `isAdmin`과 함께 `role`을 가져옵니다.\\n3. '가입 승인'을 렌더링하는 `<NavItem>`을 찾습니다.\\n4. 이 `<NavItem>`을 `{role === 'admin' && <NavItem ... />}` 과 같이 조건부 렌더링 구문으로 감싸줍니다.",
      "verificationCriteria": "`manager`로 로그인 시 사이드바에 '가입 승인' 메뉴가 보이지 않아야 합니다. `admin`으로 로그인 시에는 해당 메뉴가 보여야 합니다."
    }
  ]
}