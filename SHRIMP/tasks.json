{
  "tasks": [
    {
      "id": "35ba7223-6b3e-4ac5-bf99-5fb0686ad74e",
      "name": "스태프 모집 공고/지원/선발 페이지 구현",
      "description": "관리자 모집 공고 생성(대회/날짜/포지션별), 프리랜서 지원, 관리자 선발/배정, 지원 현황 관리 UI/로직 구현. Firestore /events, /staffApplications 구조 활용.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-06-23T09:34:40.214Z",
      "updatedAt": "2025-06-23T09:34:40.214Z",
      "relatedFiles": [],
      "implementationGuide": "기존 ParticipantsPage, StaffPage, useParticipants 등 테이블/모달/필터/상태관리 패턴을 재사용 및 확장. Firestore CRUD는 신규 useStaffApplications 훅으로 구현.",
      "verificationCriteria": "관리자 모집 공고 생성, 프리랜서 지원, 지원자 목록 열람 및 선발/배정, 지원 현황 관리가 정상 동작해야 함.",
      "analysisResult": "1. 각 기능은 독립된 React Page로 분리, Firestore 예시 데이터 구조 활용. 2. 기존 ParticipantsPage, StaffPage, TablesPage, useStaff, useParticipants 등 테이블/모달/필터/상태관리/권한 분리 등 공통 UI 및 로직을 재사용 또는 확장. 3. 데이터량이 많아질 수 있으므로 페이징, 비동기 쿼리, 인덱스 활용, 필요시 서버사이드 연동 고려. 4. 네이밍, 컴포넌트 구조, Tailwind 스타일, 상태관리(Context/Hook) 등 기존 패턴을 엄격히 준수. 5. 신규 페이지는 기존 인증/권한 관리(AuthContext), 프로젝트/참여자 관리(TournamentContext, useParticipants 등)와 자연스럽게 연동."
    },
    {
      "id": "78854c5f-7db9-4c68-9ea3-a47fbaf5299f",
      "name": "스태프 배치/로테이션 페이지 구현",
      "description": "날짜/포지션별 근무표, 교대(오전/오후/풀타임) 관리, 자동/수동 배정, 인원 수정 UI/로직 구현. Firestore /assignments 구조 활용.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "35ba7223-6b3e-4ac5-bf99-5fb0686ad74e"
        }
      ],
      "createdAt": "2025-06-23T09:34:40.214Z",
      "updatedAt": "2025-06-23T09:34:40.214Z",
      "relatedFiles": [],
      "implementationGuide": "기존 TablesPage, ParticipantsPage 등 테이블/필터/드래그 UI 패턴을 재사용 및 확장. Firestore CRUD는 신규 useAssignments 훅으로 구현.",
      "verificationCriteria": "날짜/포지션별 근무표, 교대 관리, 자동/수동 배정, 인원 수정이 정상 동작해야 함.",
      "analysisResult": "1. 각 기능은 독립된 React Page로 분리, Firestore 예시 데이터 구조 활용. 2. 기존 ParticipantsPage, StaffPage, TablesPage, useStaff, useParticipants 등 테이블/모달/필터/상태관리/권한 분리 등 공통 UI 및 로직을 재사용 또는 확장. 3. 데이터량이 많아질 수 있으므로 페이징, 비동기 쿼리, 인덱스 활용, 필요시 서버사이드 연동 고려. 4. 네이밍, 컴포넌트 구조, Tailwind 스타일, 상태관리(Context/Hook) 등 기존 패턴을 엄격히 준수. 5. 신규 페이지는 기존 인증/권한 관리(AuthContext), 프로젝트/참여자 관리(TournamentContext, useParticipants 등)와 자연스럽게 연동."
    },
    {
      "id": "b574e89a-13ff-4459-b47a-695f359a8910",
      "name": "출퇴근 및 정산 페이지 구현",
      "description": "출퇴근 기록, 근무시간 자동 계산, 정산 금액 표시, 관리자 승인 UI/로직 구현. Firestore /workLogs 구조 활용.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "78854c5f-7db9-4c68-9ea3-a47fbaf5299f"
        }
      ],
      "createdAt": "2025-06-23T09:34:40.214Z",
      "updatedAt": "2025-06-23T09:34:40.214Z",
      "relatedFiles": [],
      "implementationGuide": "기존 StaffPage, ParticipantsPage 등 테이블/모달/필터/상태관리 패턴을 재사용 및 확장. Firestore CRUD는 신규 useWorkLogs 훅으로 구현.",
      "verificationCriteria": "출퇴근 기록, 근무시간 자동 계산, 정산 금액 표시, 관리자 승인 처리가 정상 동작해야 함.",
      "analysisResult": "1. 각 기능은 독립된 React Page로 분리, Firestore 예시 데이터 구조 활용. 2. 기존 ParticipantsPage, StaffPage, TablesPage, useStaff, useParticipants 등 테이블/모달/필터/상태관리/권한 분리 등 공통 UI 및 로직을 재사용 또는 확장. 3. 데이터량이 많아질 수 있으므로 페이징, 비동기 쿼리, 인덱스 활용, 필요시 서버사이드 연동 고려. 4. 네이밍, 컴포넌트 구조, Tailwind 스타일, 상태관리(Context/Hook) 등 기존 패턴을 엄격히 준수. 5. 신규 페이지는 기존 인증/권한 관리(AuthContext), 프로젝트/참여자 관리(TournamentContext, useParticipants 등)와 자연스럽게 연동."
    }
  ]
}