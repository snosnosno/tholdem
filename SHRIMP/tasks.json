{
  "tasks": [
    {
      "id": "6da6ba96-c01f-4bfb-b4f0-45c1bb86be94",
      "name": "스태프관리 페이지 실시간 출석 현황 대시보드 구현",
      "description": "StaffListPage에 실시간 출석 현황을 표시하는 대시보드 컴포넌트를 추가합니다. 각 스태프의 현재 출석 상태(출근 전/출근/퇴근)를 실시간으로 모니터링하고 표시합니다.",
      "notes": "기존 useShiftSchedule 훅의 WorkLog 인터페이스 활용. Firebase onSnapshot으로 실시간 동기화. 출석 상태는 출근 전(gray), 출근 중(green), 퇴근(blue), 결근(red)으로 구분",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-05T00:15:33.433Z",
      "updatedAt": "2025-07-05T00:31:17.641Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/StaffListPage.tsx",
          "type": "TO_MODIFY",
          "description": "메인 스태프 관리 페이지",
          "lineStart": 1,
          "lineEnd": 858
        },
        {
          "path": "app2/src/hooks/useShiftSchedule.ts",
          "type": "REFERENCE",
          "description": "WorkLog 인터페이스 및 데이터 구조",
          "lineStart": 34,
          "lineEnd": 54
        },
        {
          "path": "app2/src/components",
          "type": "CREATE",
          "description": "AttendanceStatusCard 컴포넌트 생성 예정"
        }
      ],
      "implementationGuide": "1. AttendanceStatusCard 컴포넌트 생성\\n2. Firebase workLogs 컬렉션에서 당일 출석 데이터 실시간 구독\\n3. 스태프별 출석 상태 계산 로직 구현\\n4. StaffListPage 테이블에 출석 상태 컬럼 추가\\n5. 출석 상태별 색상 및 아이콘 표시",
      "verificationCriteria": "1. StaffListPage에서 각 스태프의 실시간 출석 상태가 정확히 표시됨\\n2. 출석 상태 변경 시 UI가 자동으로 업데이트됨\\n3. 출석 상태별 색상과 아이콘이 직관적으로 표시됨\\n4. 성능 이슈 없이 실시간 동기화가 작동함",
      "analysisResult": "스태프관리 페이지에 기존 QR 출석 시스템을 통합하여 포괄적인 근무 관리 기능을 구현. 기존 AttendancePage, EventDetailPage, useShiftSchedule 등의 완전히 구현된 기능들을 재사용하여 StaffListPage에 실시간 출석 현황, QR 관리, 시간 수정, 예외 처리, 급여 연동 기능을 단계적으로 통합.",
      "summary": "스태프관리 페이지에 실시간 출석 현황 대시보드를 성공적으로 구현했습니다. AttendanceStatusCard 컴포넌트와 useAttendanceStatus 훅을 생성하여 Firebase 실시간 동기화를 통한 출석 상태 모니터링 기능을 완성했습니다. 4가지 출석 상태(출근전/출근중/퇴근/결근)의 색상 코딩과 다국어 지원이 포함되어 있으며, StaffListPage 테이블에 통합되어 매니저가 스태프들의 실시간 출석 현황을 한눈에 볼 수 있습니다.",
      "completedAt": "2025-07-05T00:31:17.640Z"
    },
    {
      "id": "ba1f7b80-7fc9-4268-9fa6-5a0d3f827dd2",
      "name": "QR 코드 생성 및 관리 기능 통합",
      "description": "매니저가 StaffListPage에서 직접 출석용 QR 코드를 생성하고 관리할 수 있는 기능을 구현합니다. EventDetailPage의 기존 QR 생성 로직을 재사용합니다.",
      "notes": "기존 EventDetailPage 코드를 재사용하여 개발 시간 단축. QRCodeSVG 라이브러리 활용. 생성된 QR 코드는 현재 이벤트/날짜 기준으로 생성",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "6da6ba96-c01f-4bfb-b4f0-45c1bb86be94"
        }
      ],
      "createdAt": "2025-07-05T00:15:33.433Z",
      "updatedAt": "2025-07-05T00:39:44.514Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/admin/EventDetailPage.tsx",
          "type": "REFERENCE",
          "description": "QR 코드 생성 로직 참조",
          "lineStart": 197,
          "lineEnd": 210
        },
        {
          "path": "app2/src/pages/StaffListPage.tsx",
          "type": "TO_MODIFY",
          "description": "QR 생성 기능 추가",
          "lineStart": 450,
          "lineEnd": 500
        },
        {
          "path": "app2/src/components",
          "type": "CREATE",
          "description": "QRCodeGeneratorModal 컴포넌트 생성"
        }
      ],
      "implementationGuide": "1. EventDetailPage의 handleGenerateQrCode 로직을 QRCodeGeneratorModal로 분리\\n2. StaffListPage에 QR 생성 버튼 추가\\n3. 생성된 QR 코드를 모달로 표시\\n4. QR 코드 URL 포맷: /attend/token 형식 유지\\n5. Firebase Functions generateEventQrToken 재사용",
      "verificationCriteria": "1. StaffListPage에서 QR 코드 생성 버튼이 정상 작동함\\n2. 생성된 QR 코드가 모달로 올바르게 표시됨\\n3. 생성된 QR 코드를 AttendancePage에서 정상 스캔 가능\\n4. 기존 Firebase Functions와 호환성 유지",
      "analysisResult": "스태프관리 페이지에 기존 QR 출석 시스템을 통합하여 포괄적인 근무 관리 기능을 구현. 기존 AttendancePage, EventDetailPage, useShiftSchedule 등의 완전히 구현된 기능들을 재사용하여 StaffListPage에 실시간 출석 현황, QR 관리, 시간 수정, 예외 처리, 급여 연동 기능을 단계적으로 통합.",
      "summary": "StaffListPage에 QR 코드 생성 및 관리 기능을 성공적으로 통합했습니다. EventDetailPage의 기존 QR 생성 로직을 재사용 가능한 QRCodeGeneratorModal 컴포넌트로 분리하고, StaffListPage 헤더에 QR 생성 버튼을 추가했습니다. Firebase generateQrCodeToken 함수와의 완전한 호환성을 유지하며, Toast 알림, 로딩 상태, 에러 처리 등의 사용자 경험을 개선했습니다. 생성된 QR 코드는 AttendancePage에서 정상적으로 스캔 가능하며, 매니저가 출석 관리를 위한 QR 코드를 쉽게 생성할 수 있습니다.",
      "completedAt": "2025-07-05T00:39:44.512Z"
    },
    {
      "id": "ee059db8-02a6-4010-9a0d-fb2f80b4740e",
      "name": "출퇴근 시간 수정 및 관리 기능 구현",
      "description": "매니저가 스태프의 출퇴근 시간을 수정하고 관리할 수 있는 기능을 구현합니다. WorkLog 데이터의 actualStartTime/actualEndTime 필드를 수정할 수 있습니다.",
      "notes": "매니저 권한만 시간 수정 가능. 시간 수정 시 totalWorkMinutes 자동 재계산. 기존 useShiftSchedule의 WorkLog 구조 활용",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "ba1f7b80-7fc9-4268-9fa6-5a0d3f827dd2"
        }
      ],
      "createdAt": "2025-07-05T00:15:33.433Z",
      "updatedAt": "2025-07-05T01:20:00.170Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useShiftSchedule.ts",
          "type": "REFERENCE",
          "description": "WorkLog 데이터 구조",
          "lineStart": 34,
          "lineEnd": 54
        },
        {
          "path": "app2/src/pages/StaffListPage.tsx",
          "type": "TO_MODIFY",
          "description": "시간 수정 기능 추가",
          "lineStart": 600,
          "lineEnd": 700
        },
        {
          "path": "app2/src/components",
          "type": "CREATE",
          "description": "WorkTimeEditor 컴포넌트 생성"
        }
      ],
      "implementationGuide": "1. WorkTimeEditor 컴포넌트 생성\\n2. 스태프별 출퇴근 시간 수정 모달 구현\\n3. WorkLog 문서 업데이트 함수 작성\\n4. 시간 유효성 검증 로직 추가\\n5. 수정 이력 로깅 기능 포함",
      "verificationCriteria": "1. 매니저가 스태프의 출퇴근 시간을 정확히 수정할 수 있음\\n2. 시간 수정 시 자동으로 총 근무시간이 재계산됨\\n3. 잘못된 시간 입력에 대한 유효성 검증이 작동함\\n4. 시간 수정 이력이 로그에 기록됨",
      "analysisResult": "스태프관리 페이지에 기존 QR 출석 시스템을 통합하여 포괄적인 근무 관리 기능을 구현. 기존 AttendancePage, EventDetailPage, useShiftSchedule 등의 완전히 구현된 기능들을 재사용하여 StaffListPage에 실시간 출석 현황, QR 관리, 시간 수정, 예외 처리, 급여 연동 기능을 단계적으로 통합.",
      "summary": "Phase 3 출퇴근 시간 수정 및 관리 기능이 성공적으로 구현되었습니다. WorkTimeEditor 컴포넌트와 StaffListPage 통합이 완료되었고, 컴파일 에러도 해결되었습니다. 매니저가 스태프의 출퇴근 시간을 수정할 수 있는 기능이 정상적으로 동작합니다.",
      "completedAt": "2025-07-05T01:20:00.168Z"
    },
    {
      "id": "811532b1-1468-40dc-afc7-7c1fc4dc3c8e",
      "name": "예외 상황 처리 시스템 구현",
      "description": "지각, 조퇴, 결근 등의 예외 상황을 자동으로 감지하고 처리하는 시스템을 구현합니다. 설정된 기준 시간과 실제 출퇴근 시간을 비교하여 예외 상황을 판단합니다.",
      "notes": "지각: 예정 시간 + 15분 초과, 조퇴: 예정 시간 - 30분 미만, 결근: 출석 기록 없음. 예외 상황 발생 시 Toast 알림 표시",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "ee059db8-02a6-4010-9a0d-fb2f80b4740e"
        }
      ],
      "createdAt": "2025-07-05T00:15:33.433Z",
      "updatedAt": "2025-07-05T02:07:53.573Z",
      "relatedFiles": [
        {
          "path": "app2/src/hooks/useShiftSchedule.ts",
          "type": "TO_MODIFY",
          "description": "WorkLog 인터페이스 확장",
          "lineStart": 34,
          "lineEnd": 54
        },
        {
          "path": "app2/src/pages/StaffListPage.tsx",
          "type": "TO_MODIFY",
          "description": "예외 상황 표시 기능",
          "lineStart": 400,
          "lineEnd": 600
        },
        {
          "path": "app2/src/components",
          "type": "CREATE",
          "description": "AttendanceExceptionHandler 컴포넌트"
        }
      ],
      "implementationGuide": "1. AttendanceExceptionHandler 컴포넌트 생성\\n2. 예외 상황 자동 감지 로직 구현 (지각/조퇴/결근)\\n3. 예외 사유 입력 기능 추가\\n4. WorkLog에 exception 필드 추가\\n5. 예외 상황별 색상 코딩 및 알림",
      "verificationCriteria": "1. 지각/조퇴/결근 상황이 자동으로 정확히 감지됨\\n2. 예외 상황별로 적절한 색상과 아이콘이 표시됨\\n3. 매니저가 예외 사유를 입력하고 수정할 수 있음\\n4. 예외 상황 발생 시 Toast 알림이 정상 표시됨",
      "analysisResult": "스태프관리 페이지에 기존 QR 출석 시스템을 통합하여 포괄적인 근무 관리 기능을 구현. 기존 AttendancePage, EventDetailPage, useShiftSchedule 등의 완전히 구현된 기능들을 재사용하여 StaffListPage에 실시간 출석 현황, QR 관리, 시간 수정, 예외 처리, 급여 연동 기능을 단계적으로 통합.",
      "summary": "Phase 4 예외 상황 처리 시스템이 성공적으로 구현되었습니다. AttendanceStatusCard에 exception prop을 추가하여 예외 상황을 시각적으로 표시하고, AttendanceExceptionHandler 컴포넌트를 통해 자동 예외 감지 및 매니저 처리 기능을 완성했습니다. StaffListPage에서 실시간 예외 상황 모니터링이 가능하며, 다국어 지원과 Toast 알림이 통합되어 있습니다.",
      "completedAt": "2025-07-05T02:07:53.572Z"
    },
    {
      "id": "ff675829-9513-4ce1-a51d-1e3e706c672c",
      "name": "급여처리 연동 및 데이터 집계 시스템 구현",
      "description": "출퇴근 기록 데이터를 급여처리 시스템과 연동하기 위한 데이터 집계 및 전송 기능을 구현합니다. 월별/주별 근무시간 합계와 예외 상황을 포함한 급여 계산용 데이터를 준비합니다.",
      "notes": "기존 PayrollPage와 호환되는 데이터 형식 사용. 정규 근무시간, 초과 근무시간, 지각/조퇴 차감 시간 등을 구분하여 집계",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "811532b1-1468-40dc-afc7-7c1fc4dc3c8e"
        }
      ],
      "createdAt": "2025-07-05T00:15:33.433Z",
      "updatedAt": "2025-07-05T02:25:55.055Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/PayrollPage.tsx",
          "type": "REFERENCE",
          "description": "기존 급여 처리 페이지",
          "lineStart": 1,
          "lineEnd": 100
        },
        {
          "path": "app2/src/pages/StaffListPage.tsx",
          "type": "TO_MODIFY",
          "description": "급여 데이터 연동 기능",
          "lineStart": 800,
          "lineEnd": 858
        },
        {
          "path": "app2/src/utils",
          "type": "CREATE",
          "description": "PayrollDataGenerator 유틸리티"
        }
      ],
      "implementationGuide": "1. PayrollDataGenerator 유틸리티 함수 생성\\n2. 월별/주별 근무시간 집계 로직 구현\\n3. 예외 상황 포함 급여 계산 데이터 구조 정의\\n4. 기존 PayrollPage와 연동 인터페이스 구현\\n5. 데이터 내보내기 기능 추가",
      "verificationCriteria": "1. 월별/주별 근무시간이 정확히 집계됨\\n2. 예외 상황이 급여 계산에 반영됨\\n3. 급여처리 페이지에서 데이터를 정상 불러올 수 있음\\n4. 데이터 내보내기가 올바른 형식으로 작동함",
      "analysisResult": "스태프관리 페이지에 기존 QR 출석 시스템을 통합하여 포괄적인 근무 관리 기능을 구현. 기존 AttendancePage, EventDetailPage, useShiftSchedule 등의 완전히 구현된 기능들을 재사용하여 StaffListPage에 실시간 출석 현황, QR 관리, 시간 수정, 예외 처리, 급여 연동 기능을 단계적으로 통합.",
      "summary": "Phase 5 급여처리 연동 및 데이터 집계 시스템이 성공적으로 구현되었습니다. PayrollDataGenerator 클래스를 통한 자동 급여 계산, usePayrollData 훅을 통한 Firebase 연동, PayrollSummaryModal을 통한 직관적인 UI, StaffListPage 통합을 통해 완전한 급여 관리 시스템을 구축했습니다. 직무별 시급 차등, 예외상황 처리, CSV 내보내기 등 모든 핵심 기능이 완성되었습니다.",
      "completedAt": "2025-07-05T02:25:55.054Z"
    }
  ]
}