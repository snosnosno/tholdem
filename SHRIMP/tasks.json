{
  "tasks": [
    {
      "id": "0f978810-89df-4e6f-9254-d440d18ce196",
      "name": "[StaffListPage] 데이터 조회 로직 최적화 및 통합",
      "description": "StaffListPage.tsx의 useEffect 훅 내 데이터 조회 로직을 최적화합니다. 모든 구인 공고(jobPostings)에서 확정된 스태프(confirmedStaff)의 ID를 모두 수집한 후, 단일 'in' 쿼리를 사용하여 모든 사용자 정보를 한 번에 가져옵니다. 최종적으로 사용자 정보, 배정 역할, 시간대, 소속 공고명을 통합하여 하나의 state 배열(staffData)에 저장합니다.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-30T16:17:43.281Z",
      "updatedAt": "2025-06-30T16:18:34.679Z",
      "relatedFiles": [
        {
          "path": "C:\\Users\\user\\Desktop\\T-HOLDEM\\app2\\src\\pages\\StaffListPage.tsx",
          "type": "TO_MODIFY",
          "description": "데이터 조회 로직을 수정하고 통합된 staffData state를 추가해야 하는 주 대상 파일입니다."
        }
      ],
      "implementationGuide": "1. `useEffect` 내에서 현재 매니저의 `jobPostings`를 가져옵니다.\n2. 모든 `posting`의 `confirmedStaff`에서 `userId`를 추출하여 중복 제거된 `allUserIds` 배열을 만듭니다.\n3. `in` 쿼리로 `allUserIds`에 해당하는 `users` 정보를 한번에 가져와 `usersMap`을 생성합니다.\n4. `jobPostings`를 다시 순회하며 `usersMap`의 정보와 조합하여 최종 데이터를 만듭니다.\n5. 이 데이터를 `staffData`라는 새로운 state에 저장합니다.",
      "verificationCriteria": "1. 페이지 로드 시 Firestore 읽기 횟수가 공고 수나 스태프 수에 비례하지 않고 거의 일정(2회 내외)하게 유지되어야 합니다.\n2. `staffData` state에 모든 확정된 스태프의 정보(이름, 이메일, 역할, 시간대, 소속 공고명 등)가 정확히 포함되어야 합니다.",
      "summary": "`StaffListPage.tsx`의 데이터 조회 로직을 성공적으로 최적화했습니다. 여러 번의 Firestore 읽기를 유발하던 N+1 쿼리 문제를 해결하기 위해, 모든 `jobPosting`에서 필요한 `userId`를 수집한 후 단일 `in` 쿼리를 사용하여 모든 사용자 정보를 한 번에 효율적으로 가져오도록 수정했습니다. 또한, 사용자 정보, 역할, 시간대, 소속 공고명을 포함하는 통합된 `staffData` state를 도입하여 후속 UI 작업의 기반을 마련했습니다.",
      "completedAt": "2025-06-30T16:18:34.678Z"
    },
    {
      "id": "0cbfee30-994b-4c27-9eb1-0b1630270469",
      "name": "[StaffListPage] UI 구조 변경 (테이블 레이아웃)",
      "description": "StaffListPage.tsx의 JSX 반환 부분을 수정하여, 기존의 리스트(ul/li) 구조를 <table> 기반의 테이블 레이아웃으로 변경합니다. 이 테이블은 필터링 및 정렬된 데이터를 표시할 수 있는 기본 구조를 갖추어야 합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "0f978810-89df-4e6f-9254-d440d18ce196"
        }
      ],
      "createdAt": "2025-06-30T16:17:43.281Z",
      "updatedAt": "2025-06-30T16:19:09.506Z",
      "relatedFiles": [
        {
          "path": "C:\\Users\\user\\Desktop\\T-HOLDEM\\app2\\src\\pages\\StaffListPage.tsx",
          "type": "TO_MODIFY",
          "description": "JSX 구조를 리스트에서 테이블로 변경해야 합니다."
        }
      ],
      "implementationGuide": "1. `return` 문 내부의 JSX를 `div/ul/li` 구조에서 `table/thead/tbody/tr/th/td` 구조로 변경합니다.\n2. `thead`에는 '공고명', '이름', '연락처', '배정 역할', '시간대' 등의 컬럼 헤더(`th`)를 정의합니다.\n3. `tbody`에서는 (아직 기능 구현 전이므로) `staffData` state를 직접 `.map()`으로 순회하여 각 스태프의 정보를 `tr`과 `td`로 렌더링하는 코드를 작성합니다.",
      "verificationCriteria": "1. 페이지가 렌더링되었을 때, 확정된 스태프 목록이 리스트가 아닌 테이블 형태로 표시되어야 합니다.\n2. 테이블 헤더와 각 행의 데이터가 올바른 컬럼에 맞게 출력되어야 합니다.",
      "summary": "`StaffListPage.tsx`의 UI 구조를 성공적으로 변경했습니다. 기존의 구인 공고별 리스트(`ul/li`) 형태의 UI를 하나의 통합된 HTML `<table>` 구조로 전환했습니다. 새로운 테이블은 '공고명', '이름', '이메일', '연락처', '배정 역할', '시간대' 컬럼을 포함하며, 이전 단계에서 생성된 `staffData` state와 연동되어 모든 확정된 스태프 목록을 표 형식으로 명확하게 표시합니다. 이는 다음 단계인 정렬 및 필터링 기능 구현을 위한 기반을 마련합니다.",
      "completedAt": "2025-06-30T16:19:09.506Z"
    },
    {
      "id": "182613d0-955f-4360-b08c-ceb5fbd20b0a",
      "name": "[StaffListPage] 정렬, 검색, 필터링 기능 구현",
      "description": "테이블 UI에 실제 동작하는 정렬, 검색, 필터링 기능을 구현합니다. 사용자가 상호작용할 때 테이블 내용이 동적으로 변경되어야 합니다.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "0cbfee30-994b-4c27-9eb1-0b1630270469"
        }
      ],
      "createdAt": "2025-06-30T16:17:43.281Z",
      "updatedAt": "2025-06-30T16:20:13.177Z",
      "relatedFiles": [
        {
          "path": "C:\\Users\\user\\Desktop\\T-HOLDEM\\app2\\src\\pages\\StaffListPage.tsx",
          "type": "TO_MODIFY",
          "description": "기능 구현을 위한 state, 핸들러, useMemo 로직을 추가해야 합니다."
        }
      ],
      "implementationGuide": "1. `useState`를 사용하여 `searchTerm`, `filterPostId`, `sortConfig` state를 추가합니다.\n2. 테이블 상단에 검색용 `<input>`과 필터링용 `<select>` (옵션은 `jobPostings` 목록 기반)를 추가하고 각 state와 연결합니다.\n3. `thead`의 `th`에 `onClick` 핸들러를 추가하여 `sortConfig`를 변경하도록 구현합니다.\n4. `useMemo`를 사용하여 `staffData` 원본 배열을 `searchTerm`, `filterPostId`, `sortConfig` state에 따라 필터링하고 정렬한 최종 결과 배열(`filteredAndSortedStaff`)을 계산합니다.\n5. `tbody`의 `.map()`이 이 최종 결과 배열을 사용하도록 수정합니다.",
      "verificationCriteria": "1. 검색창에 텍스트를 입력하면 테이블 내용이 해당 텍스트를 포함하는 행으로 필터링되어야 합니다.\n2. 필터 드롭다운에서 특정 공고를 선택하면 해당 공고 소속 스태프만 표시되어야 합니다.\n3. 테이블 헤더를 클릭하면 해당 컬럼을 기준으로 데이터가 오름차순/내림차순으로 정렬되어야 합니다.",
      "summary": "`StaffListPage.tsx`에 동적인 데이터 관리 기능을 성공적으로 구현했습니다. `useState`를 사용하여 검색어(`searchTerm`), 공고 필터(`filterPostId`), 정렬 설정(`sortConfig`)을 위한 상태를 추가했습니다. 테이블 상단에 검색창과 공고 선택 드롭다운을 배치하여 사용자 입력을 받을 수 있도록 했으며, 각 테이블 헤더에 `onClick` 이벤트를 추가하여 양방향 정렬이 가능하게 만들었습니다. `useMemo` 훅을 사용하여 이러한 상태들이 변경될 때마다 원본 `staffData`를 효율적으로 필터링하고 정렬한 뒤, 그 결과를 테이블에 렌더링하도록 하여 상호작용이 가능한 스태프 관리 테이블을 완성했습니다.",
      "completedAt": "2025-06-30T16:20:13.176Z"
    }
  ]
}