{
  "tasks": [
    {
      "id": "7b8a5d83-6f6d-490e-a257-91801886f77d",
      "name": "통합 스케줄 데이터 훅 구현 (useIntegratedSchedule)",
      "description": "workLogs와 applications 컬렉션을 병렬로 조회하고 통합된 스케줄 데이터 구조로 변환하는 커스텀 훅을 구현합니다. Firebase onSnapshot을 사용하여 실시간 구독을 유지하고, 데이터를 IntegratedScheduleItem 인터페이스로 통합합니다.",
      "notes": "기존 useToast, formatDate 유틸리티 재사용, Firebase 실시간 구독 패턴 유지",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-28T16:55:36.403Z",
      "updatedAt": "2025-07-28T16:55:36.403Z",
      "relatedFiles": [
        {
          "path": "src/hooks/useShiftSchedule.ts",
          "type": "REFERENCE",
          "description": "WorkLog 인터페이스 참조"
        },
        {
          "path": "src/pages/JobBoardPage.tsx",
          "type": "REFERENCE",
          "description": "applications 구조 참조",
          "lineStart": 310,
          "lineEnd": 350
        },
        {
          "path": "src/utils/timeUtils.ts",
          "type": "REFERENCE",
          "description": "시간 포맷팅 함수 재사용"
        },
        {
          "path": "src/hooks/useIntegratedSchedule.ts",
          "type": "CREATE",
          "description": "새로운 통합 훅 생성"
        }
      ],
      "implementationGuide": "1. src/hooks/useIntegratedSchedule.ts 파일 생성\n2. IntegratedScheduleItem 인터페이스 정의 (type: 'application' | 'confirmed' | 'completed')\n3. workLogs와 applications를 병렬로 조회하는 Firebase 쿼리 구현\n4. 조회된 데이터를 통합 구조로 변환하는 로직 구현\n5. 날짜별 정렬 및 필터링 기능 추가\n6. 에러 처리 및 로딩 상태 관리",
      "verificationCriteria": "1. workLogs와 applications 병렬 조회 성공\n2. 데이터 통합 변환 정확성\n3. 실시간 업데이트 동작 확인\n4. 타입 안전성 보장",
      "analysisResult": "내 스케줄 페이지를 개선하여 workLogs, applications, jobPostings 데이터를 통합하고, 지원중/확정/완료 상태를 명확히 구분하여 표시하는 통합 스케줄 시스템 구현"
    },
    {
      "id": "0ceba26b-b5d4-4ec7-b74f-71bea41ef0e4",
      "name": "공고 정보 연동 서비스 구현",
      "description": "jobPostings 컬렉션에서 공고 상세 정보(위치, 상세주소, 시간대별 정보)를 조회하고 캐싱하는 서비스를 구현합니다. 이미 조회된 공고 정보는 메모리에 캐싱하여 성능을 최적화합니다.",
      "notes": "기존 JobPosting 타입 재사용, 배치 쿼리로 Firebase 읽기 횟수 최소화",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7b8a5d83-6f6d-490e-a257-91801886f77d"
        }
      ],
      "createdAt": "2025-07-28T16:55:36.403Z",
      "updatedAt": "2025-07-28T16:55:36.403Z",
      "relatedFiles": [
        {
          "path": "src/types/jobPosting.ts",
          "type": "REFERENCE",
          "description": "JobPosting 인터페이스 사용"
        },
        {
          "path": "src/hooks/useIntegratedSchedule.ts",
          "type": "TO_MODIFY",
          "description": "공고 정보 조회 로직 추가"
        }
      ],
      "implementationGuide": "1. useIntegratedSchedule 훅에 jobPostings 조회 로직 추가\n2. Map 객체를 사용한 공고 정보 캐싱 구현\n3. 공고 ID 배열로 일괄 조회하는 배치 쿼리 구현\n4. 캐시 만료 시간 설정 (15분)\n5. 공고 정보와 스케줄 데이터 병합",
      "verificationCriteria": "1. 공고 정보 조회 성공\n2. 캐싱 동작 확인\n3. 배치 쿼리 효율성\n4. 메모리 사용량 적정성",
      "analysisResult": "내 스케줄 페이지를 개선하여 workLogs, applications, jobPostings 데이터를 통합하고, 지원중/확정/완료 상태를 명확히 구분하여 표시하는 통합 스케줄 시스템 구현"
    },
    {
      "id": "f0ad1e93-9ec2-424d-bee6-829db3b89fb0",
      "name": "스케줄 아이템 컴포넌트 구현",
      "description": "통합된 스케줄 데이터를 표시하는 재사용 가능한 컴포넌트를 구현합니다. 지원중/확정/완료 상태에 따라 다른 UI를 표시하고, 공고 정보를 함께 보여줍니다.",
      "notes": "기존 프로젝트의 카드 디자인 패턴 유지, Tailwind CSS 클래스 활용",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-28T16:55:36.403Z",
      "updatedAt": "2025-07-28T16:55:36.403Z",
      "relatedFiles": [
        {
          "path": "src/components/StaffCard.tsx",
          "type": "REFERENCE",
          "description": "카드 디자인 패턴 참조"
        },
        {
          "path": "src/components/ScheduleItem.tsx",
          "type": "CREATE",
          "description": "새 컴포넌트 생성"
        }
      ],
      "implementationGuide": "1. src/components/ScheduleItem.tsx 생성\n2. 타입별 UI 구분 (지원중: 노란색, 확정: 파란색, 완료: 초록색)\n3. 상태 아이콘 및 라벨 표시\n4. 공고 제목, 위치, 시간 정보 표시\n5. 오늘 일정 강조 표시\n6. 반응형 디자인 적용",
      "verificationCriteria": "1. 상태별 UI 구분 명확성\n2. 반응형 디자인 동작\n3. 접근성 준수\n4. 재사용성 확보",
      "analysisResult": "내 스케줄 페이지를 개선하여 workLogs, applications, jobPostings 데이터를 통합하고, 지원중/확정/완료 상태를 명확히 구분하여 표시하는 통합 스케줄 시스템 구현"
    },
    {
      "id": "2859cba9-06c3-4a6d-800f-b72408537f0c",
      "name": "내 스케줄 페이지 리팩토링",
      "description": "기존 MySchedulePage를 리팩토링하여 통합 스케줄 훅을 사용하도록 변경합니다. 필터링 옵션을 확장하고 새로운 UI 컴포넌트를 적용합니다.",
      "notes": "기존 페이지 구조 최대한 유지, 점진적 개선",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7b8a5d83-6f6d-490e-a257-91801886f77d"
        },
        {
          "taskId": "f0ad1e93-9ec2-424d-bee6-829db3b89fb0"
        }
      ],
      "createdAt": "2025-07-28T16:55:36.403Z",
      "updatedAt": "2025-07-28T16:55:36.403Z",
      "relatedFiles": [
        {
          "path": "src/pages/MySchedulePage.tsx",
          "type": "TO_MODIFY",
          "description": "페이지 리팩토링"
        },
        {
          "path": "src/hooks/useIntegratedSchedule.ts",
          "type": "DEPENDENCY",
          "description": "통합 훅 사용"
        },
        {
          "path": "src/components/ScheduleItem.tsx",
          "type": "DEPENDENCY",
          "description": "컴포넌트 사용"
        }
      ],
      "implementationGuide": "1. MySchedulePage.tsx 수정\n2. useIntegratedSchedule 훅으로 데이터 소스 변경\n3. 필터 옵션 추가 (전체/지원중/확정/완료)\n4. ScheduleItem 컴포넌트 사용\n5. 빈 상태 UI 개선\n6. 로딩 및 에러 처리 개선",
      "verificationCriteria": "1. 모든 스케줄 데이터 표시\n2. 필터링 기능 정상 동작\n3. 실시간 업데이트 확인\n4. UI/UX 일관성",
      "analysisResult": "내 스케줄 페이지를 개선하여 workLogs, applications, jobPostings 데이터를 통합하고, 지원중/확정/완료 상태를 명확히 구분하여 표시하는 통합 스케줄 시스템 구현"
    },
    {
      "id": "18ea9bbc-9869-4718-9b92-eb78d6caa8b1",
      "name": "성능 최적화 및 페이지네이션",
      "description": "대량의 스케줄 데이터를 효율적으로 처리하기 위한 성능 최적화를 수행합니다. 가상 스크롤링 또는 페이지네이션을 구현하고, 메모이제이션을 적용합니다.",
      "notes": "기존 useInfiniteScroll 훅 재사용 가능",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "2859cba9-06c3-4a6d-800f-b72408537f0c"
        }
      ],
      "createdAt": "2025-07-28T16:55:36.403Z",
      "updatedAt": "2025-07-28T16:55:36.403Z",
      "relatedFiles": [
        {
          "path": "src/hooks/useInfiniteScroll.ts",
          "type": "REFERENCE",
          "description": "무한 스크롤 훅 재사용"
        },
        {
          "path": "src/pages/MySchedulePage.tsx",
          "type": "TO_MODIFY",
          "description": "성능 최적화 적용"
        },
        {
          "path": "src/hooks/useIntegratedSchedule.ts",
          "type": "TO_MODIFY",
          "description": "페이지네이션 로직 추가"
        }
      ],
      "implementationGuide": "1. useMemo로 필터링된 데이터 메모이제이션\n2. 무한 스크롤 또는 페이지네이션 구현 (useInfiniteScroll 훅 활용)\n3. 이미지 지연 로딩 적용\n4. 컴포넌트 최적화 (React.memo)\n5. 쿼리 제한 설정 (한 번에 20개씩)",
      "verificationCriteria": "1. 대량 데이터 처리 성능\n2. 메모리 사용량 안정성\n3. 스크롤 성능 부드러움\n4. 초기 로딩 속도",
      "analysisResult": "내 스케줄 페이지를 개선하여 workLogs, applications, jobPostings 데이터를 통합하고, 지원중/확정/완료 상태를 명확히 구분하여 표시하는 통합 스케줄 시스템 구현"
    }
  ]
}