{
  "tasks": [
    {
      "id": "7f57bb5c-c4e1-4e2e-8988-57f171a01c9d",
      "name": "Console 사용 제거 및 Logger 마이그레이션",
      "description": "105개의 console 사용을 구조화된 logger 시스템으로 완전 교체. 34개 파일에 분산된 console.log/warn/error를 자동화 스크립트를 활용하여 일괄 변환.",
      "notes": "serviceWorkerRegistration.ts는 특수 케이스로 별도 처리 필요. 개발 환경에서만 로깅되도록 환경 체크 추가.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": "app2/src/utils/logger.ts",
          "type": "REFERENCE",
          "description": "기존 logger 시스템"
        },
        {
          "path": "app2/src/utils/replaceConsoleLog.js",
          "type": "TO_MODIFY",
          "description": "자동화 스크립트"
        },
        {
          "path": "app2/src/**/*.ts",
          "type": "TO_MODIFY",
          "description": "console 사용 파일들"
        }
      ],
      "implementationGuide": "1. replaceConsoleLog.js 스크립트 검토 및 개선\n2. console.log → logger.info 변환\n3. console.error → logger.error(message, error, context) 변환\n4. console.warn → logger.warn 변환\n5. 각 파일에 logger import 추가\n6. 컨텍스트 정보 추가 (component, operation)",
      "verificationCriteria": "1. npm run build 성공\n2. console 사용 0개 확인 (grep 검색)\n3. 로그 레벨별 적절한 분류\n4. 컨텍스트 정보 포함 여부",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    },
    {
      "id": "b29dbb4b-44b7-4de2-bee0-51c62bf97e20",
      "name": "DnD 라이브러리 통일 (@dnd-kit으로 일원화)",
      "description": "react-dnd를 제거하고 @dnd-kit으로 통일. 4개 파일(Seat.tsx, TableCard.tsx, TableDetailModal.tsx, TablesPage.tsx)의 DnD 구현 마이그레이션.",
      "notes": "기존 드래그 앤 드롭 기능이 정상 작동하도록 철저한 테스트 필요. 좌석 이동 기능이 핵심.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/Seat.tsx",
          "type": "TO_MODIFY",
          "description": "react-dnd 사용 컴포넌트"
        },
        {
          "path": "app2/src/components/TableCard.tsx",
          "type": "TO_MODIFY",
          "description": "테이블 카드 컴포넌트"
        },
        {
          "path": "app2/src/components/TableDetailModal.tsx",
          "type": "TO_MODIFY",
          "description": "테이블 상세 모달"
        },
        {
          "path": "app2/src/pages/TablesPage.tsx",
          "type": "REFERENCE",
          "description": "@dnd-kit 사용 예시"
        }
      ],
      "implementationGuide": "1. Seat.tsx의 useDrag/useDrop을 @dnd-kit의 useDraggable/useDroppable로 변경\n2. react-dnd의 DndProvider를 @dnd-kit의 DndContext로 교체\n3. 드래그 앤 드롭 로직 재구현\n4. package.json에서 react-dnd, react-dnd-html5-backend 제거\n5. 번들 크기 측정 및 비교",
      "verificationCriteria": "1. 좌석 드래그 앤 드롭 정상 작동\n2. react-dnd 의존성 완전 제거\n3. 번들 크기 감소 확인\n4. 빌드 성공",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    },
    {
      "id": "67f1e786-3a8b-42db-8290-25efc50d18f6",
      "name": "테스트 인프라 복구 및 환경 설정",
      "description": "깨진 테스트 환경 복구. 누락된 의존성 설치, vi → jest 마이그레이션, Firebase 모킹 수정으로 테스트 실행 가능하도록 환경 정상화.",
      "notes": "현재 13개 테스트 스위트 중 12개 실패. 기본적인 의존성 문제부터 해결.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": "app2/src/__tests__/setup/firebase-mock.ts",
          "type": "TO_MODIFY",
          "description": "Firebase 모킹 설정"
        },
        {
          "path": "app2/src/__tests__/setup/test-utils.tsx",
          "type": "TO_MODIFY",
          "description": "테스트 유틸리티"
        },
        {
          "path": "app2/package.json",
          "type": "TO_MODIFY",
          "description": "의존성 추가"
        }
      ],
      "implementationGuide": "1. npm install --save-dev @testing-library/user-event @firebase/rules-unit-testing\n2. firebase-mock.ts의 vi.fn() → jest.fn() 변경\n3. 테스트 설정 파일 검토 및 수정\n4. 각 테스트 파일의 import 경로 확인\n5. npm test 실행 및 오류 해결",
      "verificationCriteria": "1. npm test 실행 시 의존성 오류 없음\n2. 최소 50% 테스트 통과\n3. 테스트 커버리지 리포트 생성 가능",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    },
    {
      "id": "5f2561a7-2dbc-40ef-95ca-b0d85d914023",
      "name": "GitHub Actions CI/CD 파이프라인 구축",
      "description": "자동 빌드, 테스트, 배포를 위한 GitHub Actions 워크플로우 설정. PR 검증, 메인 브랜치 자동 배포 프로세스 구축.",
      "notes": "Firebase 배포 토큰은 firebase login:ci 명령으로 생성. 환경별 배포 전략 고려.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "67f1e786-3a8b-42db-8290-25efc50d18f6"
        }
      ],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": ".github/workflows/ci.yml",
          "type": "CREATE",
          "description": "CI 워크플로우"
        },
        {
          "path": ".github/workflows/deploy.yml",
          "type": "CREATE",
          "description": "배포 워크플로우"
        },
        {
          "path": ".github/pull_request_template.md",
          "type": "CREATE",
          "description": "PR 템플릿"
        }
      ],
      "implementationGuide": "1. .github/workflows/ci.yml 작성 (빌드, 테스트, 린트)\n2. .github/workflows/deploy.yml 작성 (Firebase 배포)\n3. GitHub Secrets 설정 (FIREBASE_TOKEN 등)\n4. 브랜치 보호 규칙 설정\n5. PR 템플릿 작성",
      "verificationCriteria": "1. PR 생성 시 자동 빌드/테스트 실행\n2. 메인 브랜치 머지 시 자동 배포\n3. 빌드 상태 배지 표시\n4. 실패 시 알림 설정",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    },
    {
      "id": "531f0401-cc88-4b77-bd37-2b28a4a06d71",
      "name": "Sentry 에러 모니터링 도입",
      "description": "실시간 에러 추적 및 성능 모니터링을 위한 Sentry 통합. logger 시스템과 연동하여 프로덕션 에러 자동 수집.",
      "notes": "개발 환경에서는 비활성화. 민감한 정보 필터링 규칙 설정 필수.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "7f57bb5c-c4e1-4e2e-8988-57f171a01c9d"
        }
      ],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": "app2/src/App.tsx",
          "type": "TO_MODIFY",
          "description": "Sentry 초기화"
        },
        {
          "path": "app2/src/utils/logger.ts",
          "type": "TO_MODIFY",
          "description": "Sentry 통합"
        },
        {
          "path": "app2/.env.example",
          "type": "TO_MODIFY",
          "description": "Sentry DSN 추가"
        }
      ],
      "implementationGuide": "1. npm install @sentry/react\n2. Sentry 프로젝트 생성 및 DSN 획득\n3. App.tsx에 Sentry 초기화 코드 추가\n4. logger.error()와 Sentry 연동\n5. 소스맵 업로드 설정\n6. 환경별 설정 분리",
      "verificationCriteria": "1. 에러 발생 시 Sentry 대시보드에 표시\n2. 소스맵으로 정확한 에러 위치 파악\n3. 성능 메트릭 수집 확인\n4. 개발 환경 비활성화 확인",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    },
    {
      "id": "d0270acf-1171-416b-8f3e-31f14c5f7337",
      "name": "주요 컴포넌트 단위 테스트 작성",
      "description": "핵심 비즈니스 로직을 가진 컴포넌트들의 단위 테스트 작성. StaffManagement, JobPosting, Tournament 관련 컴포넌트 우선 작성.",
      "notes": "기존 테스트 파일 참고하여 일관된 패턴 유지. React Testing Library 베스트 프랙티스 준수.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "67f1e786-3a8b-42db-8290-25efc50d18f6"
        }
      ],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/__tests__/",
          "type": "TO_MODIFY",
          "description": "기존 테스트 파일들"
        },
        {
          "path": "app2/src/components/jobPosting/__tests__/",
          "type": "CREATE",
          "description": "새 테스트 디렉토리"
        }
      ],
      "implementationGuide": "1. StaffRow, StaffCard 컴포넌트 테스트 복구\n2. JobCard, JobPostingForm 테스트 작성\n3. TournamentTable 관련 테스트 작성\n4. Firebase 모킹 패턴 확립\n5. 테스트 커버리지 70% 목표",
      "verificationCriteria": "1. 각 컴포넌트 최소 3개 이상 테스트 케이스\n2. 엣지 케이스 처리 검증\n3. 사용자 인터랙션 시뮬레이션\n4. 커버리지 70% 달성",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    },
    {
      "id": "b7896a33-548a-40d9-ac87-6d9233cba191",
      "name": "FullCalendar를 LightweightCalendar로 완전 교체",
      "description": "MySchedulePage에서 사용 중인 FullCalendar를 기존 구현된 LightweightCalendar로 교체. 번들 크기 96% 감소 목표.",
      "notes": "기존 LightweightCalendar 구현 참고. 달력 뷰 전환, 이벤트 클릭 등 기능 보존.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": "app2/src/pages/MySchedulePage/index.tsx",
          "type": "TO_MODIFY",
          "description": "FullCalendar 사용 페이지"
        },
        {
          "path": "app2/src/components/LightweightCalendar.tsx",
          "type": "REFERENCE",
          "description": "경량 캘린더 구현"
        }
      ],
      "implementationGuide": "1. MySchedulePage의 FullCalendar import 제거\n2. LightweightCalendar 컴포넌트로 교체\n3. 이벤트 데이터 포맷 변환\n4. 상호작용 기능 재구현\n5. package.json에서 @fullcalendar/* 의존성 제거",
      "verificationCriteria": "1. 캘린더 기능 정상 작동\n2. 번들 크기 500KB 이상 감소\n3. 성능 개선 측정\n4. 사용자 경험 동일 유지",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    },
    {
      "id": "70df23b1-1c4e-47c7-b527-e3ebe1318f41",
      "name": "react-data-grid를 LightweightDataGrid로 완전 교체",
      "description": "남은 react-data-grid 사용처를 모두 찾아 LightweightDataGrid로 교체. 번들 크기 85% 감소 목표.",
      "notes": "기존 LightweightDataGrid 패턴 활용. 가상화 성능 유지 중요.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/LightweightDataGrid/",
          "type": "REFERENCE",
          "description": "경량 데이터그리드 구현"
        },
        {
          "path": "app2/src/**/*.tsx",
          "type": "TO_MODIFY",
          "description": "react-data-grid 사용 파일"
        }
      ],
      "implementationGuide": "1. react-data-grid 사용처 전체 검색\n2. 각 사용처를 LightweightDataGrid로 변경\n3. 컬럼 정의 및 데이터 포맷 조정\n4. 정렬, 필터링 기능 재구현\n5. package.json에서 react-data-grid 제거",
      "verificationCriteria": "1. 데이터 테이블 기능 정상 작동\n2. 번들 크기 170KB 이상 감소\n3. 가상화 성능 유지\n4. 정렬/필터 기능 작동",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    },
    {
      "id": "21db1d57-aae2-45ed-afc0-713436b4208c",
      "name": "react-icons를 커스텀 SVG 아이콘으로 교체",
      "description": "react-icons 의존성을 제거하고 필요한 아이콘만 SVG로 직접 구현. 번들 크기 92% 감소 목표.",
      "notes": "@heroicons/react 활용 고려. 자주 사용하는 아이콘만 구현.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": "app2/src/components/icons/",
          "type": "CREATE",
          "description": "커스텀 아이콘 디렉토리"
        },
        {
          "path": "app2/src/**/*.tsx",
          "type": "TO_MODIFY",
          "description": "react-icons 사용 파일"
        }
      ],
      "implementationGuide": "1. react-icons 사용처 전체 검색 (FaPlus, FaThList 등)\n2. 사용 중인 아이콘 목록 작성\n3. components/icons/ 디렉토리에 SVG 컴포넌트 생성\n4. import 경로 일괄 변경\n5. package.json에서 react-icons 제거",
      "verificationCriteria": "1. 모든 아이콘 정상 표시\n2. 번들 크기 60KB 이상 감소\n3. 아이콘 품질 유지\n4. 타입 안전성 보장",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    },
    {
      "id": "064616a9-ae58-4372-945d-455bd0dd6078",
      "name": "Context API를 Zustand로 완전 마이그레이션",
      "description": "AuthContext, TournamentContext, ToastContext, JobPostingContext를 Zustand 스토어로 전환. 성능 향상 및 보일러플레이트 감소.",
      "notes": "기존 tournamentStore.ts 패턴 참고. 점진적 마이그레이션 전략 수립.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-08-04T08:14:57.058Z",
      "updatedAt": "2025-08-04T08:14:57.058Z",
      "relatedFiles": [
        {
          "path": "app2/src/stores/tournamentStore.ts",
          "type": "REFERENCE",
          "description": "Zustand 패턴 참고"
        },
        {
          "path": "app2/src/contexts/",
          "type": "TO_MODIFY",
          "description": "Context 파일들"
        },
        {
          "path": "app2/src/stores/",
          "type": "CREATE",
          "description": "새 스토어 파일들"
        }
      ],
      "implementationGuide": "1. tournamentStore 패턴 분석\n2. authStore, toastStore, jobPostingStore 생성\n3. Context Provider 제거 및 스토어 훅으로 교체\n4. 컴포넌트에서 useContext → useStore 변경\n5. 불필요한 리렌더링 제거 확인",
      "verificationCriteria": "1. 상태 관리 기능 동일 유지\n2. 성능 개선 측정\n3. 타입 안전성 유지\n4. 리렌더링 최적화 확인",
      "analysisResult": "T-HOLDEM 프로젝트의 CLAUDE.md 문서 기반 개선사항 구현. React 18 + TypeScript + Firebase 기반 홀덤 토너먼트 관리 플랫폼의 기술 부채 해결 및 성능 최적화."
    }
  ]
}