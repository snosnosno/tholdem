{
  "tasks": [
    {
      "id": "5efd7cc3-a871-497a-9cf5-03c4e9020da6",
      "name": "Firebase 컬렉션 구조 및 데이터 관계 상세 분석",
      "description": "T-HOLDEM 프로젝트의 4개 핵심 Firebase 컬렉션(jobPostings, applications, staff, workLogs)의 데이터 구조, 필드 관계, ID 연결 방식을 상세 분석하고 문서화합니다. 각 컬렉션의 역할과 데이터 흐름을 파악하여 중복 문제의 근본 원인을 식별합니다.",
      "notes": "실제 데이터 구조를 파악하기 위해 Firebase 규칙과 타입 정의를 모두 참조해야 합니다. 특히 assignedDates 배열과 다중 이벤트 생성 로직에 주목하세요.",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-31T17:39:36.414Z",
      "updatedAt": "2025-07-31T17:39:36.414Z",
      "relatedFiles": [
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/types/common.ts",
          "type": "REFERENCE",
          "description": "핵심 컬렉션 인터페이스 정의",
          "lineStart": 1,
          "lineEnd": 117
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/types/jobPosting.ts",
          "type": "REFERENCE",
          "description": "JobPosting 및 Application 상세 타입",
          "lineStart": 1,
          "lineEnd": 754
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/firestore.rules",
          "type": "REFERENCE",
          "description": "Firebase 보안 규칙 및 컬렉션 구조",
          "lineStart": 1,
          "lineEnd": 215
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/hooks/useScheduleData.ts",
          "type": "REFERENCE",
          "description": "현재 데이터 통합 로직",
          "lineStart": 72,
          "lineEnd": 526
        }
      ],
      "implementationGuide": "1. 각 컬렉션의 인터페이스 정의 분석\\n   - jobPostings: 공고 기본 정보, timeSlots, dateSpecificRequirements\\n   - applications: 지원자 정보, assignedDates 배열, 다중 선택 필드\\n   - staff: 확정 직원, userId 연결 관계\\n   - workLogs: 근무 기록, dealerId/staffId 호환성\\n\\n2. ID 연결 관계 매핑\\n   - users.id → applications.applicantId → staff.userId → workLogs.staffId\\n   - applications.postId → jobPostings.id\\n   - 호환성 필드 (dealerId) 분석\\n\\n3. 데이터 흐름 시나리오 작성\\n   - 정상 흐름: 공고 생성 → 지원 → 확정 → 근무 기록\\n   - 예외 상황: 다중 날짜 지원, 중복 데이터 발생\\n\\n4. 현재 useScheduleData.ts 로직 분석\\n   - convertToScheduleEvent 함수의 각 소스별 처리 방식\\n   - 중복 제거 키 생성 로직\\n   - 우선순위 적용 방식",
      "verificationCriteria": "1. 4개 컬렉션의 데이터 구조와 관계가 정확히 문서화되었는가\\n2. ID 연결 방식과 호환성 필드의 역할이 명확히 설명되었는가\\n3. 중복 문제의 근본 원인이 구체적으로 식별되었는가\\n4. 데이터 흐름 시나리오가 실제 코드와 일치하는가",
      "analysisResult": "T-HOLDEM 프로젝트의 Firebase 컬렉션 구조 분석 및 공고→지원→확정→출퇴근 데이터 연동 흐름 파악을 통해 useScheduleData.ts의 중복 문제 원인을 식별하고 해결방안을 제시합니다. 4개 핵심 컬렉션(jobPostings, applications, staff, workLogs)의 관계와 ID 연결 방식을 분석하여 중복 제거 로직 개선 및 데이터 통합 최적화를 목표로 합니다."
    },
    {
      "id": "cd202acf-958a-4ac3-a392-e03e5957e87d",
      "name": "중복 제거 로직 문제점 분석 및 개선방안 설계",
      "description": "useScheduleData.ts의 현재 중복 제거 로직을 분석하여 다중 날짜 이벤트 생성, 부적절한 중복 키, ID 연결 불일치 등의 문제점을 파악하고 개선된 중복 제거 알고리즘을 설계합니다.",
      "notes": "다중 날짜 이벤트 생성과 중복 제거 로직의 상호작용을 특히 주의깊게 분석해야 합니다. 기존 코드의 의도를 유지하면서 개선하는 것이 중요합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "5efd7cc3-a871-497a-9cf5-03c4e9020da6"
        }
      ],
      "createdAt": "2025-07-31T17:39:36.414Z",
      "updatedAt": "2025-07-31T17:39:36.414Z",
      "relatedFiles": [
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/hooks/useScheduleData.ts",
          "type": "TO_MODIFY",
          "description": "중복 제거 로직 개선 대상",
          "lineStart": 563,
          "lineEnd": 591
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/hooks/useScheduleData.ts",
          "type": "TO_MODIFY",
          "description": "다중 날짜 이벤트 생성 로직",
          "lineStart": 271,
          "lineEnd": 330
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/utils/scheduleUtils.ts",
          "type": "REFERENCE",
          "description": "스케줄 유틸리티 함수들",
          "lineStart": 1,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "1. 현재 중복 제거 로직 분석\\n   - uniqueSchedules Map의 키 생성 방식\\n   - workLogs 우선순위 적용 로직\\n   - 다중 날짜 이벤트 처리 방식\\n\\n2. 문제점 식별\\n   - 중복 키 부족: eventId만으로는 소스 구분 불가\\n   - 다중 이벤트 충돌: assignedDates 배열에서 여러 이벤트 생성\\n   - ID 매핑 불일치: staffId/dealerId 혼재\\n\\n3. 개선된 중복 제거 알고리즘 설계\\n   - 사용자 ID 포함 키: date-eventId-role-userId\\n   - 소스별 우선순위 시스템: workLogs(3) > applications(2) > staff(1)\\n   - 스마트 이벤트 통합: 같은 사용자-공고 조합 처리\\n\\n4. 성능 최적화 고려사항\\n   - Map vs Set 비교\\n   - 메모리 사용량 최적화\\n   - 실시간 구독 타이밍 이슈 해결",
      "verificationCriteria": "1. 현재 중복 제거 로직의 문제점이 구체적으로 분석되었는가\\n2. 개선 알고리즘이 모든 중복 시나리오를 고려하는가\\n3. 성능과 메모리 사용량 최적화가 포함되었는가\\n4. 기존 코드와의 호환성이 유지되는가",
      "analysisResult": "T-HOLDEM 프로젝트의 Firebase 컬렉션 구조 분석 및 공고→지원→확정→출퇴근 데이터 연동 흐름 파악을 통해 useScheduleData.ts의 중복 문제 원인을 식별하고 해결방안을 제시합니다. 4개 핵심 컬렉션(jobPostings, applications, staff, workLogs)의 관계와 ID 연결 방식을 분석하여 중복 제거 로직 개선 및 데이터 통합 최적화를 목표로 합니다."
    },
    {
      "id": "becac90e-b9d0-4259-a802-47260fcb549d",
      "name": "날짜 처리 및 ID 연결 표준화",
      "description": "Timestamp/string 혼재 문제를 해결하기 위한 날짜 처리 표준화와 staffId/dealerId 호환성 문제를 해결하는 ID 연결 표준화 방안을 구현합니다.",
      "notes": "기존 데이터의 호환성을 유지하면서 점진적으로 표준화하는 방식을 채택해야 합니다. TypeScript strict mode를 고려한 타입 안전성도 중요합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "5efd7cc3-a871-497a-9cf5-03c4e9020da6"
        }
      ],
      "createdAt": "2025-07-31T17:39:36.414Z",
      "updatedAt": "2025-07-31T17:39:36.414Z",
      "relatedFiles": [
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/utils/scheduleUtils.ts",
          "type": "TO_MODIFY",
          "description": "날짜 처리 유틸리티 함수들",
          "lineStart": 1,
          "lineEnd": 100
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/utils/dateUtils.ts",
          "type": "REFERENCE",
          "description": "기존 날짜 유틸리티 함수",
          "lineStart": 1,
          "lineEnd": 50
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/hooks/useScheduleData.ts",
          "type": "TO_MODIFY",
          "description": "날짜 변환 로직 적용",
          "lineStart": 494,
          "lineEnd": 511
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/types/schedule.ts",
          "type": "REFERENCE",
          "description": "스케줄 이벤트 타입 정의",
          "lineStart": 1,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "1. 날짜 처리 표준화\\n   - safeDateToString 유틸리티 개선\\n   - 모든 날짜를 YYYY-MM-DD 문자열로 통일\\n   - Timestamp 변환 로직 일원화\\n   - 날짜 필드명 우선순위 정의\\n\\n2. ID 연결 표준화\\n   - getUserId 헬퍼 함수 구현\\n   - 소스별 ID 추출 로직 정의\\n   - staffId/dealerId 호환성 유지\\n   - 타입 안전성 보장\\n\\n3. 유틸리티 함수 개선\\n   - extractDateFromFields 최적화\\n   - parseTimeString 안정성 향상\\n   - 에러 처리 강화\\n\\n4. 테스트 케이스 작성\\n   - 다양한 날짜 형식 테스트\\n   - ID 연결 시나리오 테스트\\n   - 경계값 테스트",
      "verificationCriteria": "1. 모든 날짜 처리가 YYYY-MM-DD 문자열로 통일되었는가\\n2. ID 연결이 일관되고 타입 안전한가\\n3. 기존 데이터와의 호환성이 유지되는가\\n4. 에러 처리가 적절히 구현되었는가",
      "analysisResult": "T-HOLDEM 프로젝트의 Firebase 컬렉션 구조 분석 및 공고→지원→확정→출퇴근 데이터 연동 흐름 파악을 통해 useScheduleData.ts의 중복 문제 원인을 식별하고 해결방안을 제시합니다. 4개 핵심 컬렉션(jobPostings, applications, staff, workLogs)의 관계와 ID 연결 방식을 분석하여 중복 제거 로직 개선 및 데이터 통합 최적화를 목표로 합니다."
    },
    {
      "id": "9596c9a7-2f64-427e-9d29-e4d3235fbb74",
      "name": "개선된 중복 제거 로직 구현",
      "description": "분석 결과를 바탕으로 개선된 중복 제거 알고리즘을 useScheduleData.ts에 구현하고, 다중 날짜 이벤트 처리 방식을 최적화합니다.",
      "notes": "기존 로직의 의도를 유지하면서 점진적으로 개선해야 합니다. 실시간 구독으로 인한 성능 이슈도 고려해야 합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "cd202acf-958a-4ac3-a392-e03e5957e87d"
        },
        {
          "taskId": "becac90e-b9d0-4259-a802-47260fcb549d"
        }
      ],
      "createdAt": "2025-07-31T17:39:36.414Z",
      "updatedAt": "2025-07-31T17:39:36.414Z",
      "relatedFiles": [
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/hooks/useScheduleData.ts",
          "type": "TO_MODIFY",
          "description": "중복 제거 로직 구현",
          "lineStart": 544,
          "lineEnd": 591
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/hooks/useScheduleData.ts",
          "type": "TO_MODIFY",
          "description": "convertToScheduleEvent 함수 개선",
          "lineStart": 72,
          "lineEnd": 526
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/types/schedule.ts",
          "type": "REFERENCE",
          "description": "ScheduleEvent 인터페이스",
          "lineStart": 16,
          "lineEnd": 46
        }
      ],
      "implementationGuide": "1. 새로운 중복 제거 키 시스템 구현\\n   - 사용자 ID 포함 키 생성\\n   - 소스 컬렉션 구분\\n   - 날짜-공고-역할-사용자 조합\\n\\n2. 우선순위 기반 중복 해결\\n   - workLogs > applications > staff 우선순위\\n   - 데이터 완성도 평가\\n   - 최신 데이터 우선 원칙\\n\\n3. 다중 날짜 이벤트 최적화\\n   - 스마트 이벤트 통합\\n   - 중복 방지 메커니즘\\n   - 성능 최적화\\n\\n4. 실시간 구독 로직 개선\\n   - 타이밍 이슈 해결\\n   - 배치 업데이트 처리\\n   - 메모리 누수 방지",
      "verificationCriteria": "1. 중복 데이터가 완전히 제거되는가\\n2. 우선순위 로직이 정확히 동작하는가\\n3. 다중 날짜 이벤트가 올바르게 처리되는가\\n4. 성능 저하 없이 동작하는가",
      "analysisResult": "T-HOLDEM 프로젝트의 Firebase 컬렉션 구조 분석 및 공고→지원→확정→출퇴근 데이터 연동 흐름 파악을 통해 useScheduleData.ts의 중복 문제 원인을 식별하고 해결방안을 제시합니다. 4개 핵심 컬렉션(jobPostings, applications, staff, workLogs)의 관계와 ID 연결 방식을 분석하여 중복 제거 로직 개선 및 데이터 통합 최적화를 목표로 합니다."
    },
    {
      "id": "bdfb5039-f473-4d42-8bea-a4a2317ee89f",
      "name": "데이터 통합 테스트 및 성능 최적화",
      "description": "개선된 데이터 통합 로직의 정확성을 검증하고, 대용량 데이터 처리 성능을 최적화하며, 다양한 시나리오에 대한 통합 테스트를 수행합니다.",
      "notes": "실제 운영 환경에서 발생할 수 있는 다양한 예외 상황을 고려한 견고한 시스템을 구축해야 합니다. 한국어 로깅을 유지하되 성능에 영향을 주지 않도록 주의하세요.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "9596c9a7-2f64-427e-9d29-e4d3235fbb74"
        }
      ],
      "createdAt": "2025-07-31T17:39:36.414Z",
      "updatedAt": "2025-07-31T17:39:36.414Z",
      "relatedFiles": [
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/__tests__/hooks/useScheduleData.test.ts",
          "type": "CREATE",
          "description": "useScheduleData 훅 테스트 파일",
          "lineStart": 1,
          "lineEnd": 200
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/hooks/useScheduleData.ts",
          "type": "TO_MODIFY",
          "description": "성능 최적화 및 에러 처리 개선",
          "lineStart": 528,
          "lineEnd": 898
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/utils/performanceTest.ts",
          "type": "REFERENCE",
          "description": "성능 테스트 유틸리티",
          "lineStart": 1,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "1. 통합 테스트 시나리오 작성\\n   - 정상 데이터 흐름 테스트\\n   - 중복 데이터 처리 테스트\\n   - 다중 날짜 이벤트 테스트\\n   - 예외 상황 처리 테스트\\n\\n2. 성능 최적화 구현\\n   - 메모리 사용량 최적화\\n   - 실시간 구독 성능 개선\\n   - 배치 처리 최적화\\n   - 캐싱 전략 적용\\n\\n3. 에러 핸들링 강화\\n   - Firebase 연결 오류 처리\\n   - 데이터 형식 오류 복구\\n   - 타임아웃 처리\\n   - 롤백 메커니즘\\n\\n4. 모니터링 및 로깅\\n   - 성능 메트릭 수집\\n   - 오류 추적 시스템\\n   - 디버깅 정보 최적화\\n   - 운영 모드 로그 정리",
      "verificationCriteria": "1. 모든 테스트 케이스가 통과하는가\\n2. 성능 요구사항을 만족하는가 (2초 내 데이터 로딩)\\n3. 메모리 누수가 없는가\\n4. 에러 상황에서 안정적으로 복구되는가",
      "analysisResult": "T-HOLDEM 프로젝트의 Firebase 컬렉션 구조 분석 및 공고→지원→확정→출퇴근 데이터 연동 흐름 파악을 통해 useScheduleData.ts의 중복 문제 원인을 식별하고 해결방안을 제시합니다. 4개 핵심 컬렉션(jobPostings, applications, staff, workLogs)의 관계와 ID 연결 방식을 분석하여 중복 제거 로직 개선 및 데이터 통합 최적화를 목표로 합니다."
    },
    {
      "id": "e9eccc93-8465-430b-a10f-abd080dd8c79",
      "name": "Firebase 쿼리 최적화 및 인덱스 설정",
      "description": "대용량 데이터 처리를 위한 Firebase 쿼리 최적화와 복합 인덱스 설정을 통해 전체 시스템의 성능을 향상시킵니다.",
      "notes": "Firebase 인덱스 생성에는 시간이 걸리므로 단계적으로 적용해야 합니다. 기존 쿼리와의 호환성도 유지해야 합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "bdfb5039-f473-4d42-8bea-a4a2317ee89f"
        }
      ],
      "createdAt": "2025-07-31T17:39:36.414Z",
      "updatedAt": "2025-07-31T17:39:36.414Z",
      "relatedFiles": [
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/firestore.indexes.json",
          "type": "TO_MODIFY",
          "description": "Firestore 인덱스 설정 파일",
          "lineStart": 1,
          "lineEnd": 50
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/hooks/useScheduleData.ts",
          "type": "TO_MODIFY",
          "description": "최적화된 쿼리 적용",
          "lineStart": 593,
          "lineEnd": 743
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/firebase.ts",
          "type": "REFERENCE",
          "description": "Firebase 설정 및 쿼리 함수",
          "lineStart": 180,
          "lineEnd": 420
        }
      ],
      "implementationGuide": "1. 쿼리 성능 분석\\n   - 현재 쿼리 실행 계획 분석\\n   - 병목 지점 식별\\n   - 인덱스 누락 사항 확인\\n\\n2. 복합 인덱스 설계\\n   - workLogs: (dealerId, date) 복합 인덱스\\n   - applications: (applicantId, status, postId) 복합 인덱스\\n   - staff: (userId, userRole) 복합 인덱스\\n   - jobPostings: (status, createdBy, startDate) 복합 인덱스\\n\\n3. 쿼리 최적화 구현\\n   - 필요한 필드만 조회하도록 최적화\\n   - 페이지네이션 적용\\n   - 캐싱 전략 구현\\n\\n4. firestore.indexes.json 업데이트\\n   - 인덱스 정의 추가\\n   - 배포 가이드 작성\\n   - 모니터링 설정",
      "verificationCriteria": "1. 모든 필요한 인덱스가 정의되었는가\\n2. 쿼리 성능이 개선되었는가 (50% 이상 속도 향상)\\n3. 인덱스 비용이 합리적인가\\n4. 배포 가이드가 명확한가",
      "analysisResult": "T-HOLDEM 프로젝트의 Firebase 컬렉션 구조 분석 및 공고→지원→확정→출퇴근 데이터 연동 흐름 파악을 통해 useScheduleData.ts의 중복 문제 원인을 식별하고 해결방안을 제시합니다. 4개 핵심 컬렉션(jobPostings, applications, staff, workLogs)의 관계와 ID 연결 방식을 분석하여 중복 제거 로직 개선 및 데이터 통합 최적화를 목표로 합니다."
    },
    {
      "id": "732eed8f-42bd-4688-ae67-d30920b8cece",
      "name": "종합 문서화 및 사용 가이드 작성",
      "description": "분석 결과, 해결 방안, 개선 사항을 종합하여 한국어로 상세한 기술 문서를 작성하고, 개발팀을 위한 사용 가이드를 제공합니다.",
      "notes": "개발팀의 기존 문서화 스타일과 일관성을 유지하고, 한국어 중심의 명확한 설명을 제공해야 합니다. 실제 사용 예제도 포함하세요.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "e9eccc93-8465-430b-a10f-abd080dd8c79"
        }
      ],
      "createdAt": "2025-07-31T17:39:36.414Z",
      "updatedAt": "2025-07-31T17:39:36.414Z",
      "relatedFiles": [
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/docs/FIREBASE_COLLECTION_ANALYSIS.md",
          "type": "CREATE",
          "description": "Firebase 컬렉션 구조 분석 문서",
          "lineStart": 1,
          "lineEnd": 300
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/docs/SCHEDULE_DATA_INTEGRATION_GUIDE.md",
          "type": "CREATE",
          "description": "스케줄 데이터 통합 개발자 가이드",
          "lineStart": 1,
          "lineEnd": 200
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/CLAUDE.md",
          "type": "TO_MODIFY",
          "description": "프로젝트 문서 업데이트",
          "lineStart": 90,
          "lineEnd": 120
        },
        {
          "path": "C:/Users/user/Desktop/T-HOLDEM/app2/src/hooks/useScheduleData.ts",
          "type": "TO_MODIFY",
          "description": "코드 주석 및 JSDoc 추가",
          "lineStart": 1,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "1. 기술 분석 보고서 작성\\n   - Firebase 컬렉션 구조 상세 분석\\n   - 데이터 연동 흐름 다이어그램\\n   - 중복 문제 원인 및 해결 과정\\n   - 성능 개선 결과\\n\\n2. 개발자 가이드 작성\\n   - 새로운 중복 제거 로직 사용법\\n   - 날짜 처리 표준화 가이드\\n   - ID 연결 방식 설명\\n   - 에러 처리 방법\\n\\n3. 운영 가이드 작성\\n   - Firebase 인덱스 관리\\n   - 성능 모니터링 방법\\n   - 문제 해결 체크리스트\\n   - 데이터 무결성 검증\\n\\n4. 코드 주석 및 문서 업데이트\\n   - JSDoc 주석 추가\\n   - README 업데이트\\n   - 타입 정의 문서화\\n   - 마이그레이션 가이드",
      "verificationCriteria": "1. 모든 분석 결과가 명확히 문서화되었는가\\n2. 개발자가 쉽게 이해하고 적용할 수 있는가\\n3. 한국어 설명이 정확하고 이해하기 쉬운가\\n4. 실제 사용 예제가 포함되었는가",
      "analysisResult": "T-HOLDEM 프로젝트의 Firebase 컬렉션 구조 분석 및 공고→지원→확정→출퇴근 데이터 연동 흐름 파악을 통해 useScheduleData.ts의 중복 문제 원인을 식별하고 해결방안을 제시합니다. 4개 핵심 컬렉션(jobPostings, applications, staff, workLogs)의 관계와 ID 연결 방식을 분석하여 중복 제거 로직 개선 및 데이터 통합 최적화를 목표로 합니다."
    }
  ]
}