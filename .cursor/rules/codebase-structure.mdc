---
description: T-HOLDEM 프로젝트 코드베이스 구조 및 아키텍처 가이드
globs: 
alwaysApply: true
---

# 📁 T-HOLDEM 코드베이스 구조 가이드

## 🎯 프로젝트 개요

T-HOLDEM은 **홀덤 토너먼트 운영 플랫폼**으로, React + TypeScript + Firebase를 기반으로 구축된 웹 애플리케이션입니다.

### 핵심 기능
- **딜러 교대 관리 시스템** (Excel 방식 그리드)
- **QR 코드 출석 체크** (실시간 동기화)
- **역할 기반 스태프 관리** (Admin/Manager/Dealer)
- **토너먼트 운영 도구** (참가자, 테이블, 상금 관리)
- **급여 관리 시스템** (자동 계산 및 처리)

## 📂 프로젝트 디렉토리 구조

```
C:\Users\user\Desktop\T-HOLDEM\
├── app2/                     # 🎯 React 메인 애플리케이션
│   ├── public/
│   │   ├── locales/         # 🌍 다국어 번역 파일 (ko/en)
│   │   └── index.html
│   ├── src/
│   │   ├── components/      # 🧩 재사용 가능한 컴포넌트
│   │   ├── pages/          # 📄 페이지 컴포넌트
│   │   │   ├── admin/      # 👑 관리자 전용 페이지
│   │   │   └── dealer/     # 👨‍💼 딜러 전용 페이지
│   │   ├── hooks/          # 🎣 커스텀 훅
│   │   ├── contexts/       # 🏪 React Context
│   │   ├── utils/          # 🔧 유틸리티 함수
│   │   ├── types/          # 📋 TypeScript 타입 정의
│   │   └── firebase.ts     # 🔥 Firebase 설정
│   ├── package.json        # 📦 프론트엔드 의존성
│   └── tailwind.config.js  # 🎨 Tailwind CSS 설정
├── functions/               # ⚡ Firebase Cloud Functions
│   ├── src/
│   │   └── index.ts        # 🔥 서버리스 백엔드 함수
│   ├── test/               # 🧪 테스트
│   └── package.json        # 📦 백엔드 의존성
├── scripts/                # 🛠️ 마이그레이션 스크립트
├── SHRIMP/                 # 🦐 Shrimp Task Manager
│   └── WebGUI.md          # 📊 Task Manager UI 링크
├── 개발로그/                # 📝 개발 문서 및 로그
├── firebase.json           # 🔥 Firebase 프로젝트 설정
├── firestore.rules         # 🔒 Firestore 보안 규칙
├── firestore.indexes.json  # 📊 Firestore 인덱스 설정
└── README.md              # 📖 프로젝트 문서
```

## 🏗️ 아키텍처 개요

### 기술 스택
- **Frontend**: React 18 + TypeScript + Tailwind CSS
- **State Management**: React Context + React Query
- **Backend**: Firebase (Firestore + Functions + Auth)
- **UI Components**: react-data-grid, DaisyUI, Heroicons
- **Development**: ESLint, Prettier, Firebase CLI

### 프로젝트 구조 (Mermaid)
```mermaid
graph TB
    subgraph "T-HOLDEM 프로젝트 구조"
        A[T-HOLDEM 루트] --> B[app2/ - React 앱]
        A --> C[functions/ - Firebase Functions]
        A --> D[scripts/ - 마이그레이션 스크립트]
        A --> E[SHRIMP/ - Task Manager]
        A --> F[개발로그/ - 문서]
        
        B --> B1[src/components/ - 컴포넌트]
        B --> B2[src/pages/ - 페이지]
        B --> B3[src/hooks/ - 커스텀 훅]
        B --> B4[src/contexts/ - React Context]
        B --> B5[src/utils/ - 유틸리티]
        B --> B6[public/locales/ - 다국어]
        
        B2 --> B2A[admin/ - 관리자 페이지]
        B2 --> B2B[dealer/ - 딜러 페이지]
        B2 --> B2C[일반 페이지들]
        
        C --> C1[src/index.ts - 클라우드 함수]
        C --> C2[test/ - 테스트]
        
        E --> E1[WebGUI.md - Task Manager UI]
        
        F --> F1[사업계획서 PDF]
        F --> F2[기능 설계서 PDF]
        F --> F3[개발 로그 txt]
    end
```

## 🔐 역할 기반 접근 권한

### 사용자 역할 분류
1. **Admin** (관리자): 전체 시스템 관리
2. **Manager** (매니저): 이벤트 및 스태프 관리
3. **Dealer** (딜러): 개인 업무 및 출석 관리

### 권한 체계 (Mermaid)
```mermaid
graph TB
    subgraph "T-HOLDEM 역할 기반 접근 권한"
        A[사용자 로그인] --> B{역할 확인}
        
        B -->|Admin| C[관리자 권한]
        B -->|Manager| D[매니저 권한]
        B -->|Dealer| E[딜러 권한]
        
        C --> C1[전체 시스템 관리]
        C --> C2[사용자 관리]
        C --> C3[승인 시스템]
        C --> C4[모든 이벤트 관리]
        C --> C5[전체 급여 관리]
        
        D --> D1[이벤트 관리]
        D --> D2[스태프 관리]
        D --> D3[교대 스케줄링]
        D --> D4[급여 처리]
        D --> D5[딜러 로테이션]
        
        E --> E1[이벤트 목록 조회]
        E --> E2[구인 게시판]
        E --> E3[출석 체크]
        E --> E4[개인 프로필]
        E --> E5[급여 확인]
        
        subgraph "공통 기능"
            F[프로필 관리]
            G[알림 시스템]
            H[다국어 지원]
        end
        
        C1 --> F
        D1 --> F
        E1 --> F
        
        C2 --> G
        D2 --> G
        E2 --> G
        
        C3 --> H
        D3 --> H
        E3 --> H
    end
```

## 📊 데이터 모델 구조

### Firestore Collections
- **users**: 사용자 정보 (인증 + 프로필)
- **events**: 토너먼트 이벤트
- **staff**: 스태프 정보 (딜러 포함)
- **shiftSchedules**: 교대 스케줄
- **workLogs**: 근무 기록
- **jobPostings**: 구인 게시판
- **participants**: 참가자 정보
- **tables**: 테이블 정보

### 데이터 관계도 (Mermaid)
```mermaid
erDiagram
    USERS {
        string id PK
        string email
        string name
        string role
        string photoURL
        timestamp createdAt
        timestamp updatedAt
    }
    
    EVENTS {
        string id PK
        string title
        string description
        timestamp startDate
        timestamp endDate
        string status
        object prizeStructure
        object blindStructure
        string createdBy FK
        timestamp createdAt
    }
    
    STAFF {
        string id PK
        string name
        string role
        string email
        string photoURL
        string status
        string assignedTableId FK
        timestamp createdAt
        timestamp updatedAt
    }
    
    SHIFT_SCHEDULES {
        string id PK
        string eventId FK
        string date
        number timeInterval
        string startTime
        string endTime
        object scheduleData
        timestamp createdAt
        timestamp updatedAt
    }
    
    WORK_LOGS {
        string id PK
        string eventId FK
        string dealerId FK
        string dealerName
        string date
        string type
        string scheduledStartTime
        string scheduledEndTime
        number totalWorkMinutes
        number totalBreakMinutes
        array tableAssignments
        string status
        timestamp createdAt
    }
    
    JOB_POSTINGS {
        string id PK
        string eventId FK
        string title
        string description
        string position
        number salary
        string status
        timestamp applicationDeadline
        string createdBy FK
        timestamp createdAt
    }
    
    PARTICIPANTS {
        string id PK
        string eventId FK
        string name
        string email
        string phone
        number buyIn
        string status
        timestamp registeredAt
    }
    
    TABLES {
        string id PK
        string eventId FK
        string name
        number seatCount
        string status
        string assignedDealerId FK
        timestamp createdAt
    }
    
    USERS ||--o{ EVENTS : creates
    USERS ||--o{ JOB_POSTINGS : creates
    EVENTS ||--o{ SHIFT_SCHEDULES : has
    EVENTS ||--o{ WORK_LOGS : contains
    EVENTS ||--o{ JOB_POSTINGS : has
    EVENTS ||--o{ PARTICIPANTS : contains
    EVENTS ||--o{ TABLES : has
    STAFF ||--o{ WORK_LOGS : performs
    STAFF ||--o{ TABLES : assigned_to
```

## 🎯 핵심 컴포넌트 및 페이지

### 주요 컴포넌트 (app2/src/components/)
- **Layout.tsx**: 메인 레이아웃 (네비게이션, 사이드바)
- **PrivateRoute.tsx**: 로그인 검증 라우트
- **RoleBasedRoute.tsx**: 역할 기반 라우트 가드
- **ShiftGridComponent.tsx**: 교대 관리 엑셀 그리드
- **QRScannerModal.tsx**: QR 코드 스캔 모달
- **Toast.tsx**: 알림 시스템

### 관리자 페이지 (app2/src/pages/admin/)
- **DashboardPage.tsx**: 관리자 대시보드
- **EventsListPage.tsx**: 이벤트 목록 관리
- **UserManagementPage.tsx**: 사용자 관리
- **PayrollAdminPage.tsx**: 급여 관리
- **Approval.tsx**: 승인 시스템

### 딜러 페이지 (app2/src/pages/dealer/)
- **DealerEventsListPage.tsx**: 딜러용 이벤트 목록

### 공통 페이지 (app2/src/pages/)
- **Login.tsx**: 로그인
- **ProfilePage.tsx**: 프로필 관리
- **PayrollPage.tsx**: 급여 확인
- **AttendancePage.tsx**: 출석 체크
- **ShiftSchedulePage.tsx**: 교대 스케줄 관리

## 🔧 핵심 커스텀 훅 (app2/src/hooks/)

### 데이터 관리 훅
- **useAuth**: 인증 상태 관리
- **useEvents**: 이벤트 데이터 관리
- **useShiftSchedule**: 교대 스케줄 관리
- **useParticipants**: 참가자 데이터 관리
- **usePayrollData**: 급여 데이터 관리

### UI 관리 훅
- **useToast**: 알림 메시지 관리
- **useMediaQuery**: 반응형 디자인
- **useDebounceSearch**: 검색 디바운스
- **useInfiniteScroll**: 무한 스크롤

## 🛠️ 유틸리티 함수 (app2/src/utils/)

### 핵심 유틸리티
- **shiftValidation.ts**: 교대 스케줄 검증 로직
- **timeUtils.ts**: 시간 처리 유틸리티
- **attendanceExceptionUtils.ts**: 출석 예외 처리
- **searchUtils.ts**: 검색 관련 유틸리티
- **payroll/**: 급여 계산 로직

### 검증 규칙
- **ERROR**: 테이블 중복 배정 (동일 시간대 같은 테이블에 여러 딜러)
- **WARNING**: 연속 근무 4시간 초과, 휴식시간 30분 미만
- **INFO**: 스케줄 공백 2시간 초과

## 🔥 Firebase 설정

### Firebase 서비스
- **Authentication**: 사용자 인증
- **Firestore**: NoSQL 데이터베이스
- **Functions**: 서버리스 백엔드
- **Storage**: 파일 저장소

### Cloud Functions (functions/src/index.ts)
- **recordAttendance**: QR 코드 출석 기록
- **logAction**: 사용자 액션 로깅
- **payrollCalculation**: 급여 계산 (향후 추가 예정)

### Firebase 에뮬레이터 설정
```json
{
  "auth": { "port": 9099 },
  "functions": { "port": 5001 },
  "firestore": { "port": 8080 },
  "ui": { "enabled": true }
}
```

## 🌍 다국어 지원 (app2/public/locales/)

### 지원 언어
- **한국어** (ko/): 기본 언어
- **영어** (en/): 국제 사용자 지원

### 번역 파일
- **translation.json**: 공통 번역 파일
- **i18next** 설정으로 실시간 언어 변경 지원

## 📝 개발 로그 및 문서 (개발로그/)

### 주요 문서
- **T-holdem 홀덤 토너먼트 운영 플랫폼 사업계획서.pdf**: 사업 계획서
- **토너먼트 관리 시스템 기능 상세 기획.pdf**: 기능 상세 설계
- **웹 기반 홀덤 토너먼트 운영 플랫폼 수익모델 설계 보고서.pdf**: 수익 모델
- **1.txt ~ 10.txt**: 개발 진행 로그

## 🦐 Shrimp Task Manager 연동

### SHRIMP 디렉토리
- **WebGUI.md**: Task Manager UI 링크
- 포트 번호: 현재 60042 (최근 변경)

### 연동 기능
- 작업 계획 및 실행 관리
- 프로젝트 표준 규칙 적용
- 개발 진행 상황 추적

## 🚀 개발 환경 및 스크립트

### 개발 서버 실행
```bash
# React 개발 서버
cd app2 && npm start

# Firebase 에뮬레이터
firebase emulators:start

# 통합 개발 환경
npm run dev
```

### 배포 스크립트
```bash
# 프로덕션 빌드
npm run build

# Firebase 배포
firebase deploy
```

## 🔍 중요 파일 위치 요약

### 🎯 핵심 설정 파일
- `firebase.json`: Firebase 프로젝트 설정
- `app2/package.json`: 프론트엔드 의존성
- `functions/package.json`: 백엔드 의존성
- `firestore.rules`: 데이터베이스 보안 규칙

### 🎨 스타일 설정
- `app2/tailwind.config.js`: Tailwind CSS 설정
- `app2/src/index.css`: 전역 스타일

### 🔐 인증 및 라우팅
- `app2/src/App.tsx`: 메인 라우팅 설정
- `app2/src/contexts/AuthContext.tsx`: 인증 관리
- `app2/src/components/RoleBasedRoute.tsx`: 역할 기반 라우팅

### 📊 데이터 관리
- `app2/src/firebase.ts`: Firebase 설정
- `app2/src/hooks/`: 데이터 관리 훅들
- `app2/src/utils/`: 비즈니스 로직 유틸리티

## 🎯 개발 시 주의사항

### 파일 수정 시 우선순위
1. **읽기 전용**: 설정 파일 먼저 확인
2. **단순 수정**: 컴포넌트 내용 변경
3. **복잡한 수정**: 훅이나 유틸리티 함수 변경
4. **구조 변경**: 라우팅이나 컨텍스트 변경

### 디버깅 및 로깅
- **브라우저 콘솔**: 프론트엔드 오류
- **Firebase 에뮬레이터**: 백엔드 로그
- **firestore-debug.log**: Firestore 디버그 로그

---

**문서 버전**: 1.0.0  
**최종 업데이트**: 2025년 1월  
**적용 범위**: T-HOLDEM 프로젝트 전체  
**작성자**: Shrimp AI Assistant