---
description: Shrimp-AI 작업 규칙 및 지침
globs: 
alwaysApply: true
---
# 🦐 Shrimp-AI 작업 규칙 v3.0

이 문서는 AI 에이전트 'Shrimp-AI'가 이 프로젝트에서 작업을 수행할 때 반드시 준수해야 할 핵심 규칙을 정의합니다. 모든 규칙은 작업의 안정성과 예측 가능성을 높이는 것을 목표로 합니다.

## 📁 1. 파일 경로 규칙

### 1.1 절대 경로 사용 원칙
- **프로젝트 루트**: `C:\Users\user\Desktop\T-HOLDEM`
- 모든 파일 시스템 도구 사용 시 절대 경로만 사용
- 상대 경로 사용 금지

### 1.2 작업 전 경로 확인 절차
1. `mcp_filesystem_list_directory`로 파일/폴더 존재 확인
2. `mcp_edit-file-lines_get_file_lines`로 타겟 라인 주변 확인 (context: 3-5줄)
3. 추측 기반 작업 절대 금지

## ✏️ 2. 파일 수정 규칙

### 2.1 상황별 최적 도구 선택
1. **정확한 소규모 수정** (1-3줄)
   - `search_replace`: 고유한 컨텍스트가 있는 경우
   - `mcp_filesystem_edit_file`: 정확한 라인 기반 수정

2. **중간 규모 수정** (함수/컴포넌트 일부)
   - `edit_file`: Claude가 컨텍스트 이해 가능한 경우
   - `mcp_filesystem_edit_file`: git-style diff 검토 필요시

3. **대규모 수정** (새 컴포넌트/대폭 변경)
   - `mcp_filesystem_write_file`: 안전성 최우선

4. **위험한 수정** (복잡한 로직/중요 파일)
   - `mcp_filesystem_write_file`: 항상 전체 교체

### 2.2 도구별 검증 절차
#### A. search_replace
✅ 1단계: `grep_search`로 대상 텍스트 확인
✅ 2단계: 충분한 컨텍스트 포함 여부 검토
✅ 3단계: 실행 후 결과 확인

#### B. mcp_filesystem_edit_file  
✅ 1단계: `dryRun: true`로 diff 미리보기
✅ 2단계: git-style diff 검토
✅ 3단계: 실행 후 파일 상태 확인

#### C. edit_file
✅ 1단계: 수정 대상 범위 명확히 정의
✅ 2단계: `// ... existing code ...` 패턴 적절히 활용
✅ 3단계: 실행 후 구문 오류 검사

#### D. mcp_filesystem_write_file
✅ 1단계: 전체 파일 내용 준비 및 검토
✅ 2단계: 기존 파일 백업 (필요시)
✅ 3단계: 실행 후 컴파일/린트 검사

#### E. mcp_edit-file-lines_edit_file_lines (레거시 - 제한적 사용)
✅ 1단계: `mcp_edit-file-lines_get_file_lines`로 타겟 라인 확인
✅ 2단계: `dryRun: true`로 미리보기
✅ 3단계: diff 검토 후 `approve_edit`
✅ 4단계: 결과 확인

### 2.3 안전성 단계별 접근
#### 🟢 안전 레벨 (바로 실행 가능)
- `search_replace`: 3줄 이하 단순 수정
- `mcp_filesystem_edit_file`: 단일 함수 내부 수정

#### 🟡 주의 레벨 (검증 필수)
- `edit_file`: 컴포넌트 일부 수정
- `mcp_edit-file-lines_edit_file_lines`: 복잡한 블록 수정

#### 🔴 위험 레벨 (전체 교체 권장)
- 100줄 이상 파일의 구조적 변경
- 여러 함수/컴포넌트 동시 수정
- 중요한 설정 파일 (package.json, tsconfig.json 등)

**추가 안전 규칙:**
- **dryRun 의심스러우면**: 즉시 전체 교체 방식 전환
- **단일 책임**: 한 번에 하나의 논리적 수정만
- **3회 제한**: 같은 파일 linter 오류 수정 최대 3회

### 2.4 병렬 작업 최적화
- **읽기 작업**: 항상 병렬 실행 (`mcp_filesystem_read_multiple_files`)
- **검색 작업**: 동시 실행 (`grep_search` + `codebase_search`)
- **검증 작업**: `mcp_edit-file-lines_get_file_lines` + `mcp_filesystem_get_file_info` 병렬
- **순차 필수**: 파일 수정 → 검증 → 커밋

## 🔄 3. Git 워크플로우 (간소화)

### 3.1 자동 처리 - Master 브랜치 직접 작업
```bash
파일 수정 → git add → git commit (자동)
```

### 3.2 Git 초기화
- `.git` 없으면 `git init` 실행
- 첫 커밋 시 `.gitignore` 자동 생성

### 3.3 커밋 메시지 규칙
```
feat: 새 기능 추가
fix: 버그 수정
chore: 기타 작업
test: 테스트 관련
docs: 문서 수정
style: 코드 스타일
refactor: 리팩토링
perf: 성능 개선
```

## 🎯 4. TaskManager 모드

### 4.1 TaskPlanner 모드
**트리거**: "계획", "plan", "작업 목록"
```
✅ plan_task로 작업 목록 생성
✅ 1~2일 단위로 쪼갬 (최대 10개)
✅ 의존 관계 명확화
❌ execute_task 호출 절대 금지
```

### 4.2 TaskExecutor 모드
**트리거**: "실행", "execute", "진행"
```
✅ execute_task로 실행
✅ verify_task로 검증
✅ 기준 충족 시 complete_task
✅ 미달 시 피드백 후 반복
```

### 4.3 연속 실행 모드
- **요청 시에만**: 사용자가 "연속", "자동", "일괄" 요청
- **자동 처리**: 여러 작업 순차 실행
- **중단 가능**: 언제든 수동 모드 전환

### 4.4 TaskManager 초기화
```
init_project_rules: 프로젝트 표준 설정
- 코딩 스타일 분석
- 아키텍처 규약 생성
- 일관성 유지 규칙
```

## 🛡️ 5. 안전 및 검증

### 5.1 필수 검증 항목
- 파일 존재 여부
- 라인 번호 정확성
- dryRun 결과 검토
- Git 상태 확인

### 5.2 오류 처리 및 복구
```
dryRun 실패 → 전체 교체 방식 전환
get_file_lines 오류 → mcp_filesystem_read_file 대체
TaskExecutor 중단 → 상태 복구 후 재시도
연속 실행 오류 → 수동 모드 전환
```

### 5.3 작업 승인 필수
- **Shrimp 작업 삭제**: 반드시 동의 필요
- **프로젝트 초기화**: 반드시 동의 필요  
- **대규모 변경**: 작업 전 동의 필요
- **연속 실행 시작**: 사용자 확인 필요

## 🔧 6. 도구 사용 우선순위

### 6.1 파일 작업 도구 우선순위
1. **읽기**: 
   - `mcp_filesystem_read_file` (단일 파일)
   - `mcp_filesystem_read_multiple_files` (여러 파일 병렬)

2. **검색**: 
   - `grep_search` + `codebase_search` (병렬 실행)
   - `mcp_edit-file-lines_search_file` (정확한 위치 찾기)

3. **수정**: 상황별 최적 도구
   - 소규모: `search_replace` → `mcp_filesystem_edit_file`
   - 중간: `edit_file` → `mcp_filesystem_edit_file`  
   - 대규모: `mcp_filesystem_write_file`

4. **폴더 관리**: `mcp_filesystem_*`

### 6.2 데이터베이스 접속
```bash
mysql -u root -e "쿼리" [데이터베이스명]
# 예시: mysql -u root -e "SHOW DATABASES;"
```
- **HOST**: localhost  
- **USER**: root
- **PASSWORD**: (빈값)
- **사용DB**: 프로젝트별 확인 필요

### 6.3 서버 및 로그 정보
- **URL**: `http://localhost` (not /site)
- **로그 경로**: `C:\Users\user\Desktop\T-HOLDEM\logs`
- **에러 로그**: 해당 폴더에 자동 기록

## ⚠️ 7. 중요 금지사항 및 필수사항

### ❌ 절대 금지
- 상대 경로 사용
- dryRun 없는 파일 수정 (mcp_edit-file-lines 사용시)
- 임의 Shrimp 작업 삭제
- 추측 기반 작업
- 동시 여러 부분 수정
- TaskPlanner에서 execute_task 호출

### ✅ 반드시 수행
- 절대 경로 사용
- 사전 확인 절차
- 상황별 최적 도구 선택
- 단계별 승인 요청
- Git 자동 커밋 (master 브랜치)
- 작업 전 파일 위치/내용 재확인

## 📝 8. 작업 진행 패턴

### 8.1 단일 작업 모드 (기본)
```
작업 요청 → 확인 → 실행 → 결과 보고 → 다음 지시 대기
```

### 8.2 계획 수립 모드 (TaskPlanner)
```
"plan task 요청" → plan_task 도구 → 작업 목록 생성 → 사용자 검토
```

### 8.3 실행 모드 (TaskExecutor)  
```
"execute task ID" → execute_task → verify_task → complete_task
```

### 8.4 연속 실행 모드
```
"연속 실행" 요청 → 확인 → 순차 실행 → 중간 보고 → 완료
```

### 8.5 효율적인 편집 워크플로우
#### 패턴 A: 빠른 수정 (5분 이내)
```
검색(병렬) → 소규모 수정 도구 → 즉시 확인
```

#### 패턴 B: 안전한 수정 (10-15분)
```
읽기(병렬) → 중간 도구 + 검증 → 커밋
```

#### 패턴 C: 대규모 수정 (30분+)
```
분석(병렬) → 전체 교체 → 단계별 검증 → 커밋
```

---
**버전**: v3.0  
**최종 수정**: 2025년 1월  
**적용 범위**: T-HOLDEM 프로젝트 전체  
**주요 개선사항**: 도구별 최적화, 병렬 작업 지원, 안전성 단계별 접근