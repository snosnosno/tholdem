---
description: Shrimp-AI 작업 규칙 및 지침
globs: 
alwaysApply: true
---
# 🦐 Shrimp-AI 작업 규칙 v3.1

이 문서는 AI 에이전트 'Shrimp-AI'가 이 프로젝트에서 작업을 수행할 때 반드시 준수해야 할 핵심 규칙을 정의합니다. 모든 규칙은 작업의 안정성과 예측 가능성을 높이는 것을 목표로 합니다.

## 📁 1. 파일 경로 규칙

### 1.1 절대 경로 사용 원칙
- **프로젝트 루트**: `C:\Users\user\Desktop\T-HOLDEM`
- 모든 파일 시스템 도구 사용 시 절대 경로만 사용
- 상대 경로 사용 금지

### 1.2 작업 전 경로 확인 절차
1. `mcp_filesystem_list_directory`로 파일/폴더 존재 확인
2. `mcp_edit-file-lines_get_file_lines`로 타겟 라인 주변 확인 (context: 3-5줄)
3. 추측 기반 작업 절대 금지

## ✏️ 2. 파일 수정 규칙

### 2.1 파일 수정 방식 (유저 룰 기반)
1. **기본 원칙**: 
   - 파일을 write할 때는 3개~5개 섹션으로 나누어 먼저 하나 write하고 나머지는 edit로 추가
   - 파일을 edit할 때는 3개~5개 섹션으로 나누어 순차적으로 하나씩 진행
   - 파일 읽기, 생성, 수정은 `edit-file-lines` 사용
   - 폴더 생성, 폴더 내 파일 조회, 파일 이동 등은 `filesystem` 사용

2. **주 편집 도구**: `mcp_edit-file-lines_edit_file_lines`
   - 항상 `dryRun: true`로 설정 (매우 중요)
   - 작업 전 반드시 소스 위치 재확인
   - 파일 수정 시마다 편집하려는 부분 근처 확인 후 진행

3. **보완 도구들** (효율성 향상용)
   - `search_replace`: 정확한 1-3줄 단순 수정
   - `mcp_filesystem_edit_file`: git-style diff 검토 필요시
   - `mcp_filesystem_write_file`: 대규모 변경 또는 위험한 수정
   - `edit_file`: Claude 컨텍스트 이해 가능한 중간 수정

### 2.2 도구별 검증 절차
#### A. mcp_edit-file-lines_edit_file_lines (주력 도구)
✅ 1단계: `mcp_edit-file-lines_get_file_lines`로 타겟 라인 확인
✅ 2단계: `dryRun: true`로 미리보기 (필수)
✅ 3단계: diff 검토 후 `approve_edit`
✅ 4단계: 결과 확인

#### B. search_replace (보완 도구)
✅ 1단계: `grep_search`로 대상 텍스트 확인
✅ 2단계: 충분한 컨텍스트 포함 여부 검토
✅ 3단계: 실행 후 결과 확인

#### C. mcp_filesystem_edit_file (보완 도구)
✅ 1단계: `dryRun: true`로 diff 미리보기
✅ 2단계: git-style diff 검토
✅ 3단계: 실행 후 파일 상태 확인

#### D. mcp_filesystem_write_file (대규모 수정용)
✅ 1단계: 전체 파일 내용 준비 및 검토
✅ 2단계: 기존 파일 백업 (필요시)
✅ 3단계: 실행 후 컴파일/린트 검사

### 2.3 안전성 단계별 접근
#### 🟢 안전 레벨 (바로 실행 가능)
- `mcp_edit-file-lines_edit_file_lines`: 3줄 이하 단순 수정
- `search_replace`: 정확한 텍스트 매칭

#### 🟡 주의 레벨 (검증 필수)
- `edit_file`: 컴포넌트 일부 수정
- `mcp_filesystem_edit_file`: 중간 규모 수정

#### 🔴 위험 레벨 (전체 교체 권장)
- 100줄 이상 파일의 구조적 변경
- 여러 함수/컴포넌트 동시 수정
- 중요한 설정 파일 (package.json, tsconfig.json 등)

### 2.4 병렬 작업 최적화
- **읽기 작업**: 항상 병렬 실행 (`mcp_filesystem_read_multiple_files`)
- **검색 작업**: 동시 실행 (`grep_search` + `codebase_search`)
- **검증 작업**: `mcp_edit-file-lines_get_file_lines` + `mcp_filesystem_get_file_info` 병렬
- **순차 필수**: 파일 수정 → 검증 → 커밋

## 🔄 3. Git 워크플로우

### 3.1 자동 처리 - Master 브랜치 직접 작업
```bash
파일 수정 → git add → git commit (자동)
```

### 3.2 Git 초기화
- `.git` 없으면 `git init` 실행
- 첫 커밋 시 `.gitignore` 자동 생성

### 3.3 커밋 메시지 규칙
```
feat: 새 기능 추가
fix: 버그 수정
chore: 기타 작업
test: 테스트 관련
docs: 문서 수정
style: 코드 스타일
refactor: 리팩토링
perf: 성능 개선
```

### 3.4 Git 워크플로우 (상세)
- 파일 생성 또는 수정 시: edit-file-lines로 수정 후 git add와 commit 수행
- 파일 삭제시: git rm 및 commit 사용
- 파일 작업 완료 후: pull request 실행
- 테스트 브랜치(test)에서 충분히 검증 후 PR 머지하여 master에 병합

## 🎯 4. TaskManager 모드

### 4.1 TaskPlanner 모드
**트리거**: "계획", "plan", "작업 목록"
```
✅ plan_task로 작업 목록 생성
✅ 1~2일 단위로 쪼갬 (최대 10개)
✅ 의존 관계 명확화
❌ execute_task 호출 절대 금지
```

### 4.2 TaskExecutor 모드
**트리거**: "실행", "execute", "진행"
```
✅ execute_task로 실행
✅ verify_task로 검증
✅ 기준 충족 시 complete_task
✅ 미달 시 피드백 후 반복
```

### 4.3 연속 실행 모드
- **요청 시에만**: 사용자가 "연속", "자동", "일괄" 요청
- **자동 처리**: 여러 작업 순차 실행
- **중단 가능**: 언제든 수동 모드 전환
- **작업 진행 전**: Shrimp Task Manager의 연속 실행 모드 사용 여부 확인

### 4.4 TaskManager 초기화
```
init_project_rules: 프로젝트 표준 설정
- 코딩 스타일 분석
- 아키텍처 규약 생성
- 일관성 유지 규칙
```

### 4.5 새 프로젝트 시작 시
- TaskPlanner로 작동하며 Shrimp Task Manager 프로젝트 초기화 제안
- 초기화 이점: 프로젝트의 코딩 스타일, 규약, 아키텍처 분석하여 맞춤 규칙 생성

## 🛡️ 5. 안전 및 검증

### 5.1 필수 검증 항목
- 파일 존재 여부
- 라인 번호 정확성
- dryRun 결과 검토
- Git 상태 확인

### 5.2 오류 처리 및 복구
```
dryRun 실패 → 전체 교체 방식 전환
get_file_lines 오류 → mcp_filesystem_read_file 대체
TaskExecutor 중단 → 상태 복구 후 재시도
연속 실행 오류 → 수동 모드 전환
```

### 5.3 작업 승인 필수
- **Shrimp 작업 삭제**: 반드시 동의 필요 (매우 중요)
- **프로젝트 초기화**: 반드시 동의 필요  
- **대규모 변경**: 작업 전 동의 필요
- **연속 실행 시작**: 사용자 확인 필요
- **일반 작업**: 임의로 진행하지 말고 작업 전에 동의 받기

## 🔧 6. 도구 사용 우선순위

### 6.1 파일 작업 도구 우선순위
1. **읽기**: 
   - `mcp_filesystem_read_file` (단일 파일)
   - `mcp_filesystem_read_multiple_files` (여러 파일 병렬)

2. **검색**: 
   - `grep_search` + `codebase_search` (병렬 실행)
   - `mcp_edit-file-lines_search_file` (정확한 위치 찾기)

3. **수정**: 유저 룰 기반
   - 주력: `mcp_edit-file-lines_edit_file_lines`
   - 보완: `search_replace` → `mcp_filesystem_edit_file` → `mcp_filesystem_write_file`

4. **폴더 관리**: `mcp_filesystem_*`

### 6.2 데이터베이스 접속
```bash
mysql -u root -e "쿼리" [데이터베이스명]
# 예시: mysql -u root -e "SHOW DATABASES;"
```
- **HOST**: localhost  
- **USER**: root
- **PASSWORD**: (빈값)
- **사용DB**: 프로젝트별 확인 필요

### 6.3 서버 및 로그 정보
- **URL**: `http://localhost` (not /site)
- **로그 경로**: `C:\Users\user\Desktop\T-HOLDEM\logs`
- **에러 로그**: 해당 폴더에 자동 기록

## 🔧 7. 도구 사용 최적화 가이드

### 터미널 명령 안전 실행 패턴

#### 🔴 터미널 무한 대기 문제 해결법
**문제**: 터미널 명령이 완료되어도 AI가 응답 대기 상태로 멈춤

**해결법**:
```bash
# 1. 백그라운드 실행 활용
run_terminal_cmd(command="git push origin master", is_background=true)

# 2. 완료 신호와 함께 실행
"git push origin master && echo 'PUSH_COMPLETED'"

# 3. 타임아웃 추가
"timeout 30 git push origin master || echo 'Command completed'"

# 4. 분할 실행
git status → git push (background) → git log --oneline -1
```

#### 안전한 터미널 실행 체크리스트
- ✅ 긴 명령은 `is_background: true` 설정
- ✅ 완료 신호 추가: `&& echo "COMPLETED"`
- ✅ 타임아웃 설정 고려
- ✅ 분할 실행으로 검증 가능

### 파일 수정 도구 선택 가이드

#### 🔧 도구 선택 결정 트리
```
파일 수정 필요
├── 파일 크기 < 100줄 + 수정 라인 < 3줄
│   └── search_replace ✅ (3초, 안전)
├── 패턴 명확 + 컨텍스트 충분
│   └── mcp_filesystem_edit_file ✅ (10초, 검증됨)
├── 복잡한 수정 또는 불확실
│   └── mcp_filesystem_write_file ✅ (30초, 전체 교체)
└── 최후의 수단
    └── edit_file_lines (dryRun 필수, 단순 수정만)
```

#### 🟢 search_replace 사용 패턴 (권장)
```typescript
// 1단계: 대상 텍스트 확인
grep_search("정확한 텍스트 패턴")

// 2단계: 충분한 컨텍스트 포함
old_string: "이전 줄\n수정할 줄\n다음 줄"
new_string: "이전 줄\n새로운 줄\n다음 줄"

// 3단계: 결과 확인
read_file(수정된 파일)
```

#### 🟡 edit_file_lines 사용 시 필수 절차
```bash
# 1. 파일 상태 확인
get_file_lines(path, lineNumbers, context: 5)

# 2. dryRun 테스트 (필수)
edit_file_lines(dryRun: true)

# 3. diff 검토 후 적용
approve_edit(stateId)

# 4. 결과 검증
get_file_lines(path, lineNumbers, context: 2)
```

### 안전성 단계별 접근법

#### 🟢 완전 안전 (Zero Risk)
- **적용**: 중요 파일, 복잡한 로직, 처음 접하는 코드
- **패턴**: `read → search → replace → verify`
- **도구**: `search_replace` 주 사용
- **보장**: 100% 코드 손상 방지

#### 🟡 검증된 안전 (Verified Safe)
- **적용**: 단순 수정, 패턴이 명확한 경우
- **패턴**: `parallel_read → targeted_edit → immediate_verify`
- **도구**: `mcp_filesystem_edit_file`
- **조건**: 충분한 컨텍스트 + 고유 패턴 확인

#### 🔴 격리된 위험 (Isolated Risk)
- **적용**: 대규모 변경, 새 파일 생성
- **패턴**: `backup → full_replace → compile_test → rollback_ready`
- **도구**: `mcp_filesystem_write_file`
- **조건**: 백업 필수 + 테스트 환경

### 문제 발생 시 복구 절차

#### 터미널 무한 대기 시
1. **사용자 스킵 대기**: Ctrl+C 또는 수동 중단
2. **백그라운드 전환**: `is_background: true` 재실행
3. **분할 실행**: 작은 단위로 나누어 실행
4. **결과 확인**: 별도 명령으로 상태 체크

#### 파일 수정 실패 시
1. **Git 상태 확인**: `git status`
2. **변경사항 되돌리기**: `git checkout -- <파일명>`
3. **안전한 도구 재선택**: `search_replace` 우선
4. **단계별 검증**: 각 수정 후 즉시 확인

#### 코드 손상 발생 시
1. **즉시 중단**: 추가 수정 금지
2. **Git 리셋**: `git reset --hard HEAD`
3. **백업 복원**: 이전 커밋으로 되돌리기
4. **원인 분석**: 도구 선택 재검토

## ⚠️ 8. 중요 금지사항 및 필수사항

### ❌ 절대 금지
- 상대 경로 사용
- dryRun 없는 파일 수정 (mcp_edit-file-lines 사용시)
- 임의 Shrimp 작업 삭제
- 추측 기반 작업
- 동시 여러 부분 수정
- TaskPlanner에서 execute_task 호출
- **터미널 무한 대기 방치** (백그라운드 실행 필수)
- **edit_file_lines dryRun 생략** (안전성 검증 필수)
- **복잡한 파일 수정에 edit_file_lines 사용** (search_replace 우선)

### ✅ 반드시 수행
- 절대 경로 사용
- 사전 확인 절차
- 상황별 최적 도구 선택
- 단계별 승인 요청
- Git 자동 커밋 (master 브랜치)
- 작업 전 파일 위치/내용 재확인
- edit_file_lines 사용 시 항상 dryRun: true 설정
- 파일 읽기/생성/수정은 edit-file-lines 사용, 폴더 생성/파일 조회/파일 이동은 filesystem 사용

## 📝 9. 작업 진행 패턴

### 9.1 단일 작업 모드 (기본)
```
작업 요청 → 확인 → 실행 → 결과 보고 → 다음 지시 대기
```
- 특별한 지시가 없으면 한 번에 하나의 작업만 진행하고 이후 지침 대기
- 특별한 지시가 있으면 그에 따라 행동

### 9.2 계획 수립 모드 (TaskPlanner)
```
"plan task 요청" → plan_task 도구 → 작업 목록 생성 → 사용자 검토
```
- 새로운 기능 개발이나 버그 수정 시 먼저 TaskPlanner로 작동
- "plan task <작업설명>" 형식 사용

### 9.3 실행 모드 (TaskExecutor)  
```
"execute task ID" → execute_task → verify_task → complete_task
```
- 작업 계획 검토 후 실행 준비되면 TaskExecutor로 작동
- "execute task <작업ID 혹은 이름>" 명령으로 특정 작업 실행

### 9.4 연속 실행 모드
```
"연속 실행" 요청 → 확인 → 순차 실행 → 중간 보고 → 완료
```

### 9.5 효율적인 편집 워크플로우
#### 패턴 A: 빠른 수정 (5분 이내)
```
검색(병렬) → edit-file-lines(dryRun) → 즉시 확인
```

#### 패턴 B: 안전한 수정 (10-15분)
```
읽기(병렬) → 섹션별 edit-file-lines + 검증 → 커밋
```

#### 패턴 C: 대규모 수정 (30분+)
```
분석(병렬) → 전체 교체 또는 섹션별 분할 → 단계별 검증 → 커밋
```

## 🚀 10. 개발 집중 방향

### 10.1 개발 원칙
- 이미 개발된 내용의 규모를 키우지 않음
- 테스트 및 오류 수정, 코드 완성도 높이기 작업에 집중
- 기능별 테스트 진행하고 오류 발견 시 에러 제거

### 10.2 소스 관리
- 소스들이 많으므로 꼭 필요한 파일들만 읽은 후 편집 또는 추가 진행
- 파일을 한 번이라도 수정하면 소스가 바뀌어 라인번호도 변경됨
- 각각의 edit_file_lines 전에 반드시 소스 위치 재확인

## 🛡️ 11. 코드 손상 방지 철칙 (추가)

### 11.1 4단계 안전성 시스템
#### 🟢 **레벨 1: 완전 안전 (Zero Risk)**
```bash
read → get_file_lines(context:5) → dryRun → diff 검토 → approve → 검증
```
- **적용**: 중요 파일, 복잡한 로직, 처음 접하는 코드
- **도구**: edit-file-lines만 사용
- **보장**: 100% 코드 손상 방지

#### 🟡 **레벨 2: 검증된 안전 (Verified Safe)**
```bash
parallel_read → pattern_search → targeted_edit → immediate_verify
```
- **적용**: 단순 수정, 패턴이 명확한 경우
- **도구**: search_replace, mcp_filesystem_edit_file
- **조건**: 충분한 컨텍스트 + 고유 패턴 확인

#### 🔴 **레벨 3: 격리된 위험 (Isolated Risk)**
```bash
backup → full_replace → compile_test → rollback_ready
```
- **적용**: 대규모 변경, 새 파일 생성
- **도구**: mcp_filesystem_write_file
- **조건**: 백업 필수 + 테스트 환경

#### ⚫ **레벨 0: 긴급 복구 (Emergency Recovery)**
```bash
git_status → git_diff → git_reset → known_good_state
```
- **적용**: 문제 발생 시 즉시 복구
- **보장**: 항상 이전 상태로 돌아갈 수 있음

### 11.2 스마트 도구 선택 알고리즘
```markdown
IF (파일_크기 < 100줄 AND 수정_라인 < 3)
  → search_replace (3초)
ELIF (패턴_명확 AND 컨텍스트_충분)
  → mcp_filesystem_edit_file (10초)  
ELSE
  → edit-file-lines + dryRun (30초, 100% 안전)
```

### 11.3 예측적 검증 시스템
```bash
# 수정 전 예측
1. 영향도 분석 (의존성, 참조 확인)
2. 테스트 가능성 체크
3. 롤백 복잡도 평가
4. 자동 도구 선택
```

---
**버전**: v3.1  
**최종 수정**: 2025년 1월  
**적용 범위**: T-HOLDEM 프로젝트 전체  
**주요 개선사항**: 유저 룰 기반 + 도구별 최적화, 병렬 작업 지원, 안전성 단계별 접근, 코드 손상 방지 철칙  
**v3.1 신규 추가**: 터미널 무한 대기 문제 해결법, 파일 수정 도구 선택 가이드, 문제 발생 시 복구 절차