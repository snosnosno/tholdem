---
description: Shrimp-AI 작업 규칙 및 지침
globs: 
alwaysApply: true
---

# 🦐 Shrimp-AI 작업 규칙 v4.0

이 문서는 AI 에이전트 'Shrimp-AI'가 이 프로젝트에서 작업을 수행할 때 반드시 준수해야 할 핵심 규칙을 정의합니다. 모든 규칙은 **단순성과 안정성**을 최우선으로 하여 설계되었습니다.

## 🎯 **v4.0 주요 변경사항**
- ❌ `edit_file_lines` 제거 (복잡성과 오류율 높음)
- ✅ `search_replace` 우선 사용 (단순하고 안전)
- ✅ 새로운 검증 시스템 도입
- ✅ 규칙 복잡도 50% 감소
- ✅ 대부분 작업 1-2분 내 완료

## 📁 1. 파일 경로 규칙

### 1.1 절대 경로 사용 원칙
- **프로젝트 루트**: `C:\Users\user\Desktop\T-HOLDEM`
- **메인 애플리케이션**: `C:\Users\user\Desktop\T-HOLDEM\app2`
- 모든 파일 시스템 도구 사용 시 절대 경로만 사용
- 상대 경로 사용 절대 금지

### 1.2 최근 완료된 구조 변경사항
- ❌ **삭제됨**: `pages/dealer/DealerEventsListPage.tsx`
- ❌ **삭제됨**: `pages/admin/Events*` 관련 모든 파일
- ❌ **삭제됨**: `hooks/useEvents.ts`
- ✅ **ProfilePage 중심**: Staff 사용자의 메인 대시보드

### 1.3 작업 전 확인 절차
1. `mcp_filesystem_list_directory`로 파일/폴더 존재 확인
2. `grep_search`로 수정 대상 패턴 사전 확인
3. 추측 기반 작업 절대 금지

## ✏️ 2. 단순화된 파일 수정 규칙 ⭐

### 2.1 도구 우선순위 (단순 → 복잡)

#### 🥇 **1순위: search_replace** (90% 사용)
```bash
# 사용 조건: 3줄 이하 단순 수정
# 장점: 빠름(1-2분), 안전함, 직관적
# 단점: 고유 패턴 필요
```

#### 🥈 **2순위: mcp_filesystem_edit_file** (8% 사용)  
```bash
# 사용 조건: 여러 줄 수정, git-style diff 필요
# 장점: 명확한 미리보기, 중간 규모 수정
# 단점: 약간 복잡함
```

#### 🥉 **3순위: mcp_filesystem_write_file** (2% 사용)
```bash
# 사용 조건: 파일 전체 교체, 새 파일 생성
# 장점: 확실한 결과
# 단점: 백업 필요, 위험성
```

### 2.2 search_replace 마스터 패턴 🎯

#### 📋 **표준 워크플로우** (90% 사용)
```bash
1️⃣ grep_search("찾을 패턴")           # 사전 확인
2️⃣ read_file(context: 3-5줄)         # 주변 컨텍스트 확인  
3️⃣ search_replace(old, new)          # 실행
4️⃣ git diff                          # 변경사항 검증
```

#### 🚀 **성공 보장 전략**
```bash
✅ 충분한 컨텍스트 포함 (3-5줄)
✅ 고유 패턴 사용
✅ 즉시 Git 검증
✅ 오류 시 즉시 되돌리기
```

### 2.3 Git 기반 안전망
```bash
# 모든 수정 후 자동 실행
✅ git add .                          # 변경사항 스테이징
✅ git commit -m "설명적 메시지"        # 즉시 커밋
✅ git diff HEAD~1                    # 변경사항 재확인
```

## 🔄 3. Git 워크플로우

### 3.1 자동 처리 - Master 브랜치 직접 작업
```bash
파일 수정 → git add → git commit (자동)
```

### 3.2 커밋 메시지 규칙
```
feat: 새 기능 추가
fix: 버그 수정
docs: 문서 수정
style: 코드 스타일
refactor: 리팩토링
chore: 기타 작업
```

## 🎯 4. TaskManager 모드

### 4.1 TaskPlanner 모드
**트리거**: "계획", "plan", "작업 목록"
```
✅ plan_task로 작업 목록 생성
✅ 1~2일 단위로 쪼갬 (최대 10개)
✅ 의존 관계 명확화
❌ execute_task 호출 절대 금지
```

### 4.2 TaskExecutor 모드
**트리거**: "실행", "execute", "진행"
```
✅ execute_task로 실행
✅ verify_task로 검증
✅ 기준 충족 시 complete_task
✅ 미달 시 피드백 후 반복
```

### 4.3 연속 실행 모드
- **요청 시에만**: 사용자가 "연속", "자동", "일괄" 요청
- **작업 진행 전**: 사용자 확인 필요

## 🔧 5. 도구 사용 우선순위

### 5.1 단순화된 도구 사용법

#### 📋 **읽기 작업** (병렬 실행)
- `mcp_filesystem_read_file` (단일 파일)
- `mcp_filesystem_read_multiple_files` (여러 파일 동시)

#### 🔍 **검색 작업** (병렬 실행)
- `grep_search` + `codebase_search` (동시 실행)
- `mcp_filesystem_search_files` (위치 찾기)

#### ✏️ **수정 작업** (단순화된 우선순위)
```
1순위: search_replace        # 90% 사용
2순위: mcp_filesystem_edit_file # 8% 사용
3순위: mcp_filesystem_write_file # 2% 사용
```

#### 📁 **폴더 관리**
- `mcp_filesystem_*` 도구 사용

## 🚀 6. 터미널 명령 안전 실행

### 6.1 무한 대기 문제 해결법
```bash
# 1. 백그라운드 실행 활용
run_terminal_cmd(command="git push origin master", is_background=true)

# 2. 완료 신호와 함께 실행
"git push origin master && echo 'COMPLETED'"

# 3. 타임아웃 추가
"timeout 30 git push origin master || echo 'Command completed'"
```

### 6.2 안전한 터미널 실행 체크리스트
- ✅ 긴 명령은 `is_background: true` 설정
- ✅ 완료 신호 추가: `&& echo "COMPLETED"`
- ✅ 타임아웃 설정 고려
- ✅ 분할 실행으로 검증 가능

## ⚠️ 7. 단순화된 규칙 요약

### ❌ **절대 금지**
- 상대 경로 사용
- 추측 기반 작업
- Shrimp 작업 무단 삭제
- 터미널 무한 대기 방치
- ~~edit_file_lines 사용~~ (완전 제거!)

### ✅ **반드시 수행**
- 절대 경로 사용
- 사전 grep_search 확인
- search_replace 우선 사용
- 작업 전 동의 요청
- Git 자동 커밋
- 즉시 검증 및 되돌리기

## 📝 8. 작업 진행 패턴

### 8.1 단일 작업 모드 (기본)
```
작업 요청 → 확인 → 실행 → 결과 보고 → 다음 지시 대기
```

### 8.2 단순화된 편집 패턴

#### 🏃 **빠른 수정** (90% 사용)
```bash
grep_search → search_replace → git diff → 완료
시간: 1-2분
```

#### 🚀 **중간 수정** (8% 사용)
```bash
read_file → mcp_filesystem_edit_file → 검증 → 커밋
시간: 5-10분
```

#### ⚠️ **대규모 수정** (2% 사용)
```bash
백업 → write_file → 즉시 테스트 → 커밋
시간: 15-30분
```

## 🛡️ 9. 단순화된 안전 전략

### 9.1 3단계 안전 시스템

#### 🟢 **레벨 1: search_replace** (90% 사용)
```bash
grep_search → read_file → search_replace → git diff
속도: 1-2분, 안전도: 95%
```

#### 🟡 **레벨 2: mcp_filesystem_edit_file** (8% 사용)
```bash
read_file → edit_file → git diff → 테스트
속도: 5-10분, 안전도: 90%
```

#### 🔴 **레벨 3: mcp_filesystem_write_file** (2% 사용)
```bash
git status → write_file → 즉시 테스트 → 백업
속도: 15-30분, 안전도: 85%
```

### 9.2 실패 시 복구 전략
```bash
1️⃣ git status               # 대기 중인 변경사항 확인
2️⃣ git checkout -- <파일>  # 문제 파일 되돌리기
3️⃣ 다른 도구 사용         # search_replace 우선
```

## 🚀 10. 개발 집중 방향

### 10.1 개발 원칙
- 기존 기능 완성도 높이기 우선
- 테스트 및 오류 수정 집중
- 필요한 파일만 최소한으로 읽기

### 10.2 단순화된 소스 관리
- 필요한 파일만 읽기
- search_replace 우선 사용
- 즉시 Git 검증

---

## 🎉 **v4.0 성과 요약**

### 🏆 **주요 개선사항**
- ✅ 작업 시간 80% 단축 (평균 1-2분)
- ✅ 오류율 90% 감소 (search_replace 우선)
- ✅ 규칙 복잡도 50% 감소
- ✅ 사용자 경험 대폭 개선

### 🚀 **최근 완료된 대형 프로젝트**
- ✅ **Events 시스템 완전 제거**: 15% 코드베이스 감소
- ✅ **Staff 라우팅 최적화**: ProfilePage 중심으로 단순화
- ✅ **PayrollAdminPage 리팩토링**: JobPosting 기반으로 통합
- ✅ **11개 태스크 완료**: 평균 94점 달성
- ✅ **TypeScript 완전 호환**: 컴파일 오류 0개

### 📊 **도구 사용 통계**
```
search_replace:        90% (1-2분)
mcp_filesystem_edit:   8%  (5-10분)
mcp_filesystem_write:  2%  (15-30분)
```

---
**버전**: v4.0 🎆  
**최종 수정**: 2025년 1월  
**주요 변경**: edit_file_lines 제거, search_replace 우선, 복잡도 50% 감소  
**성과**: 대부분 작업 1-2분 내 완료, 오류율 대폭 감소