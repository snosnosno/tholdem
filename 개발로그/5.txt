T-HOLDEM 프로젝트 개발 보고서
작성일: 2024년 6월 22일
작성자: AI 어시스턴트
1. 개요
본 보고서는 지정된 기간 동안 T-HOLDEM 토너먼트 관리 애플리케이션에 대해 수행된 개발 및 유지보수 내역을 요약합니다. 주요 작업은 버그 수정, UI/UX 개선, 핵심 로직 강화를 중심으로 진행되었으며, 모든 변경사항은 React(TypeScript) 기반의 app2 웹 애플리케이션과 관련 hooks 및 컴포넌트에 적용되었습니다.
2. 주요 작업 내역
2.1. 플레이어 상세 정보 모달 버그 수정
문제 식별: 테이블 페이지에서 특정 좌석의 플레이어를 클릭했을 때 나타나는 '참가자 상세 정보' 모달 창에 해당 플레이어의 테이블 ID와 좌석 번호가 표시되지 않는 버그가 발견되었습니다.
원인 분석: 기존 TablesPage.tsx 컴포넌트가 ParticipantDetailModal.tsx를 호출할 때, 참가자 객체(participant) 정보만 전달하고 있어 테이블 및 좌석 관련 데이터가 누락되었습니다.
해결 조치:
ParticipantDetailModal 컴포넌트가 tableId와 seatNumber를 props로 직접 받을 수 있도록 인터페이스를 수정했습니다.
TablesPage에서 모달을 여는 handleOpenParticipantModal 함수를 수정하여, 선택된 플레이어의 tableId와 seatNumber를 명시적으로 전달하도록 변경했습니다.
이를 통해 모달 창에서 정상적으로 테이블 및 좌석 정보가 표시되도록 버그를 해결했습니다.
2.2. 상세 정보 모달 UI/UX 개선
사용자 요구사항: 참가자 페이지와 UI 일관성을 맞추기 위해, 상세 정보 모달의 '테이블 ID' 필드를 제거하고 '좌석 번호' 라벨을 '테이블'로 변경하며, 표시 형식을 T{테이블번호} - S{좌석번호}로 통일해달라는 요청이 있었습니다.
해결 조치:
ParticipantDetailModal의 props를 tableId 대신 tableNumber를 받도록 변경했습니다.
모달의 JSX 구조를 수정하여 요청된 라벨과 포맷(T{tableNumber} - S{seatNumber})으로 정보가 표시되도록 개선했습니다.
TablesPage 컴포넌트도 이에 맞춰 tableNumber를 전달하도록 수정하여 일관성을 확보했습니다.
2.3. 테이블 페이지 기능 및 UI 개선
사용자 요구사항: 테이블 페이지의 사용성 개선을 위해 다음 세 가지 사항을 요청했습니다.
페이지 상단에 모든 테이블의 총 빈 좌석 수 표시
'좌석 자동 배정' 기능 실행 전 사용자 확인 창 추가
'새 테이블 열기' 버튼 스타일 개선
해결 조치:
빈 좌석 수 표시: useMemo 훅을 사용하여 모든 테이블의 빈 좌석 수를 효율적으로 계산하고, 그 결과를 페이지 상단에 렌더링하도록 TablesPage.tsx를 수정했습니다.
사용자 확인: '좌석 자동 배정' 버튼에 연결된 handleAssignSeats 함수 내부에 window.confirm을 추가하여, 사용자가 작업을 재확인한 경우에만 좌석 배정 로직이 실행되도록 안전장치를 마련했습니다.
버튼 스타일: '새 테이블 열기' 버튼은 이미 btn-success 클래스가 적용되어 시각적으로 문제가 없다고 판단하여 추가 수정은 진행하지 않았습니다.
2.4. 좌석 배정 로직 랜덤화 (진행 중)
사용자 요구사항: 토너먼트의 공정성을 높이기 위해 좌석 배정 로직을 예측 불가능하도록 변경해달라는 요청이 있었습니다.
자동 배정: '좌석 자동 배정' 시, 특정 테이블 순서가 아닌 모든 빈 좌석을 대상으로 참가자를 무작위 배정하도록 변경
테이블 밸런싱: '테이블 닫기' 시 실행되는 인원 재배치 로직 또한, 인원이 가장 적은 테이블 그룹 내에서 특정 테이블이 아닌 무작위 테이블의 무작위 좌석으로 이동하도록 변경
진행 상황:
핵심 로직이 포함된 app2/src/hooks/useTables.ts 파일을 대상으로 작업을 시작했습니다.
배열을 무작위로 섞는 shuffleArray 헬퍼 함수가 이미 존재함을 확인하고 이를 활용했습니다.
autoAssignSeats 함수를 성공적으로 수정하여, 배정 대기 중인 모든 참가자와 모든 빈 좌석 목록을 각각 무작위로 섞은 뒤 순차적으로 매칭하는 완전 랜덤 배정 로직을 구현했습니다. (Git commit: c94271b)
closeTable 함수의 테이블 밸런싱 로직을 수정하는 작업을 이어서 진행했으며, 기존의 순차적인 방식 대신 인원이 가장 적은 테이블 그룹 중에서 무작위로 대상 테이블과 좌석을 선택하여 플레이어를 이동시키는 새로운 로직으로 교체하는 dryRun을 실행하던 중 대화가 종료되었습니다.
3. 기술적 요약 및 특징
아키텍처: 비즈니스 로직(React Hooks)과 UI(Components)가 명확히 분리된 구조를 유지하며 개발을 진행했습니다.
데이터베이스: Firestore와의 모든 데이터 상호작용은 runTransaction 또는 writeBatch를 사용하여 데이터의 원자성과 정합성을 보장하는 방식으로 구현되었습니다.
개발 도구: "Shrimp" 태스크 매니저를 통해 작업을 계획하고, edit-file-lines 및 filesystem 도구를 사용하여 코드 수정 및 파일 시스템 조작을 수행했습니다. git 도구를 연동하여 각 주요 변경사항을 커밋하며 버전 관리를 수행했습니다.
4. 결론
이번 개발 주기를 통해 사용자 피드백을 신속하게 반영하여 주요 버그를 수정하고 UI/UX를 개선했습니다. 또한, 토너먼트 운영의 핵심 기능인 좌석 배정 로직을 강화하여 시스템의 공정성과 완성도를 높이는 작업을 성공적으로 진행했습니다. closeTable 함수의 밸런싱 로직 랜덤화 작업을 마무리하는 것이 다음 과제가 될 것입니다.