rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ================= Helper Functions =================
    function isSignedIn() {
      return request.auth != null;
    }
    
    // ================= Security Functions =================
    // 입력 데이터 검증
    function isValidString(field, maxLength) {
      return field is string && field.size() <= maxLength;
    }
    
    // XSS 패턴 검사
    function hasNoXSS(text) {
      return !text.matches('.*<script.*>.*</script>.*') &&
             !text.matches('.*javascript:.*') &&
             !text.matches('.*on\\w+\\s*=.*');
    }
    
    // SQL Injection 패턴 검사
    function hasNoSQLInjection(text) {
      return !text.matches('.*union.*select.*') &&
             !text.matches('.*select.*from.*') &&
             !text.matches('.*insert.*into.*') &&
             !text.matches('.*delete.*from.*') &&
             !text.matches('.*drop.*table.*');
    }
    
    // 안전한 텍스트 검증
    function isSafeText(text, maxLength) {
      return isValidString(text, maxLength) && 
             hasNoXSS(text) && 
             hasNoSQLInjection(text);
    }

    // Updated: Check for 'admin', 'manager', and 'staff' roles
    function isPrivileged() {
      return request.auth.token.role == 'admin' || request.auth.token.role == 'manager';
    }
    
    // Check for any authenticated user with a valid role
    function hasValidRole() {
      return request.auth.token.role == 'admin' || 
             request.auth.token.role == 'manager' || 
             request.auth.token.role == 'staff';
    }
    

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // ================= Collection Rules =================

    // --- Users Collection ---
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());
      allow write: if isSignedIn() && (isOwner(userId) || isPrivileged());
    }

    // --- Events Collection ---
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow write: if isPrivileged();
    }

    // --- Assignments Collection ---
    match /assignments/{assignmentId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.dealerId);
      allow create, update, delete: if isPrivileged();
    }
    
    // --- Payrolls Collection ---
    match /payrolls/{payrollId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.dealerId);
      allow create, update, delete: if isPrivileged();
    }

    // --- Ratings Collection ---
    match /ratings/{ratingId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.dealerId);
      allow create: if isPrivileged();
      allow update, delete: if false; // Ratings are immutable
    }

    // --- Announcements Collection ---
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow write: if isPrivileged();
    }

    // --- Notifications Collection ---
    match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && (isOwner(resource.data.staffId) || isPrivileged());
    }

    // --- Staff Availability ---
    match /staffAvailability/{staffId} {
        allow read: if isSignedIn() && (isOwner(staffId) || isPrivileged());
        allow write: if isSignedIn() && isOwner(staffId);
    }

    // --- Job Postings Collection ---
    match /jobPostings/{postId} {
      // Everyone can read job postings
      allow read: if isSignedIn();
      
      // Admin can create/update any job posting
      // Manager and Staff can create job postings and update their own
      allow create: if hasValidRole() && 
        request.resource.data.keys().hasAll(['title', 'description', 'location', 'status', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid &&
        isSafeText(request.resource.data.title, 200) &&
        isSafeText(request.resource.data.description, 2000) &&
        isSafeText(request.resource.data.location, 200) &&
        request.resource.data.status in ['open', 'closed'] &&
        (!('detailedAddress' in request.resource.data) || isSafeText(request.resource.data.detailedAddress, 500)) &&
        (!('preQuestions' in request.resource.data) || request.resource.data.preQuestions is list) &&
        (!('updatedBy' in request.resource.data) || request.resource.data.updatedBy is string) &&
        (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt is timestamp);
      
      // Admin can update any job posting, Manager/Staff can update their own
      allow update: if (request.auth.token.role == 'admin') || 
        (hasValidRole() && request.auth.uid == resource.data.createdBy) &&
        (!('detailedAddress' in request.resource.data) || request.resource.data.detailedAddress is string) &&
        (!('preQuestions' in request.resource.data) || request.resource.data.preQuestions is list) &&
        (!('updatedBy' in request.resource.data) || request.resource.data.updatedBy is string) &&
        (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt is timestamp);
      
      // Admin can delete any job posting, Manager/Staff can delete their own
      allow delete: if (request.auth.token.role == 'admin') || 
        (hasValidRole() && request.auth.uid == resource.data.createdBy);
        
      // --- Subcollections for Job Postings ---
      // Staff subcollection
      match /staff/{userId} {
        allow read: if isSignedIn();
        allow write: if isPrivileged() || 
          (hasValidRole() && get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid);
      }
      
      // WorkLogs subcollection
      match /workLogs/{workLogId} {
        allow read: if isSignedIn();
        allow write: if isPrivileged() || 
          (hasValidRole() && get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid);
      }
    }

    // --- Applications Collection ---
    match /applications/{applicationId} {
      // All signed-in users can read applications (simplified for better UX)
      // Client-side filtering handles privacy concerns
      allow read: if isSignedIn();
      
      // Users can create applications for themselves (using postId)
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.applicantId &&
        request.resource.data.keys().hasAll(['applicantId', 'postId', 'status']) &&
        (!('preQuestionAnswers' in request.resource.data) || request.resource.data.preQuestionAnswers is list);
      
      // Admin can update any application, job posting owners can update applications to their posts
      allow update: if isPrivileged() || 
        (hasValidRole() && exists(/databases/$(database)/documents/jobPostings/$(resource.data.postId)) &&
         get(/databases/$(database)/documents/jobPostings/$(resource.data.postId)).data.createdBy == request.auth.uid);
      
      // Users can delete their own applications, admin and job posting owners can delete applications
      allow delete: if isSignedIn() && (
        request.auth.uid == resource.data.applicantId ||
        isPrivileged() ||
        (hasValidRole() && exists(/databases/$(database)/documents/jobPostings/$(resource.data.postId)) &&
         get(/databases/$(database)/documents/jobPostings/$(resource.data.postId)).data.createdBy == request.auth.uid)
      );
    }

    // --- Staff Collection --- [DEPRECATED - Use /persons collection instead]
    // Removed - All staff operations should use /persons collection with type='staff' or 'both'

    // --- Work Logs Collection ---
    match /workLogs/{workLogId} {
      allow read: if isSignedIn() && (hasValidRole() || request.auth.uid == resource.data.dealerId);
      allow create, update: if isSignedIn() && hasValidRole();
      allow delete: if isPrivileged();
    }

    // --- Participants Collection ---
    match /participants/{participantId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isPrivileged();
    }

    // --- Tables Collection ---
    match /tables/{tableId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isPrivileged();
    }

    // --- Shift Schedules Collection ---
    match /shiftSchedules/{scheduleId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isPrivileged();
    }

    // --- Attendance Collection ---
    match /attendance/{attendanceId} {
      allow read: if isSignedIn() && (hasValidRole() || request.auth.uid == resource.data.userId);
      allow create, update: if isSignedIn() && hasValidRole();
      allow delete: if isPrivileged();
    }

    // --- Job Posting Templates Collection ---
    match /jobPostingTemplates/{templateId} {
      // Users can read their own templates, privileged users can read all
      allow read: if isSignedIn() && (
        isPrivileged() || 
        (resource != null && isOwner(resource.data.createdBy))
      );
      
      // Users can create templates for themselves, privileged users can create for anyone
      allow create: if isSignedIn() && 
        request.resource.data.keys().hasAll(['name', 'templateData', 'createdBy', 'createdAt']) &&
        (isPrivileged() || isOwner(request.resource.data.createdBy)) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50 &&
        (!('description' in request.resource.data) || request.resource.data.description is string) &&
        request.resource.data.templateData is map &&
        request.resource.data.createdBy is string &&
        (!('usageCount' in request.resource.data) || request.resource.data.usageCount is number) &&
        (!('isPublic' in request.resource.data) || request.resource.data.isPublic is bool);
      
      // Users can update their own templates, privileged users can update all
      allow update: if isSignedIn() && (
        isPrivileged() || 
        (resource != null && isOwner(resource.data.createdBy))
      );
      
      // Users can delete their own templates, privileged users can delete all
      allow delete: if isSignedIn() && (
        isPrivileged() || 
        (resource != null && isOwner(resource.data.createdBy))
      );
    }
    
    // --- Tournaments Collection ---
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isPrivileged();
    }
    
    // --- Attendance Records Collection ---
    match /attendanceRecords/{recordId} {
      allow read: if isSignedIn() && (hasValidRole() || request.auth.uid == resource.data.dealerId);
      allow create, update: if isSignedIn() && hasValidRole();
      allow delete: if isPrivileged();
    }
    
    // --- Persons Collection (통합 인원 관리) ---
    match /persons/{personId} {
      // 모든 로그인 사용자 읽기 가능
      allow read: if isSignedIn();
      // 관리자만 생성/수정/삭제 가능
      allow create, update, delete: if isPrivileged();
    }
    
    // --- Applicants Collection --- [DEPRECATED - Use /persons collection instead]
    // Removed - All applicant operations should use /persons collection with type='applicant' or 'both'
    
    // --- Work Sessions Collection (다중 세션 지원) ---
    match /workSessions/{sessionId} {
      allow read: if isSignedIn() && (hasValidRole() || request.auth.uid == resource.data.personId);
      allow create, update: if isSignedIn() && hasValidRole();
      allow delete: if isPrivileged();
    }
    
    // --- Migration Backups Collection ---
    match /migration_backups/{backupId} {
      // 관리자만 접근 가능
      allow read, write: if request.auth.token.role == 'admin';
    }
    
    // --- Backup Collections (와일드카드 패턴) ---
    // staff_backup_YYYY-MM-DD 형식의 모든 백업 컬렉션
    match /{backupCollection}/{documentId} {
      allow read, write: if request.auth.token.role == 'admin' && 
        (backupCollection.matches('staff_backup_.*') || 
         backupCollection.matches('applicants_backup_.*') ||
         backupCollection.matches('persons_backup_.*'));
    }
    
    // Fallback rule: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
