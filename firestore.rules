rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ================= Helper Functions =================
    function isSignedIn() {
      return request.auth != null;
    }

    // Updated: Check for both 'admin' and 'manager' roles
    function isPrivileged() {
      return request.auth.token.role == 'admin' || request.auth.token.role == 'manager';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // ================= Collection Rules =================

    // --- Users Collection ---
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());
      allow write: if isSignedIn() && (isOwner(userId) || isPrivileged());
    }

    // --- Events Collection ---
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow write: if isPrivileged();
    }

    // --- Assignments Collection ---
    match /assignments/{assignmentId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.dealerId);
      allow create, update, delete: if isPrivileged();
    }
    
    // --- Payrolls Collection ---
    match /payrolls/{payrollId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.dealerId);
      allow create, update, delete: if isPrivileged();
    }

    // --- Ratings Collection ---
    match /ratings/{ratingId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.dealerId);
      allow create: if isPrivileged();
      allow update, delete: if false; // Ratings are immutable
    }

    // --- Announcements Collection ---
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow write: if isPrivileged();
    }

    // --- Notifications Collection ---
    match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && (isOwner(resource.data.staffId) || isPrivileged());
    }

    // --- Staff Availability ---
    match /staffAvailability/{staffId} {
        allow read: if isSignedIn() && (isOwner(staffId) || isPrivileged());
        allow write: if isSignedIn() && isOwner(staffId);
    }

    // --- Job Postings Collection ---
    match /jobPostings/{postId} {
      allow read: if isSignedIn();
      allow write: if isPrivileged();
      
      // Validate required fields and new fields
      allow create: if isPrivileged() && 
        request.resource.data.keys().hasAll(['title', 'description', 'location', 'status']) &&
        (!('detailedAddress' in request.resource.data) || request.resource.data.detailedAddress is string) &&
        (!('preQuestions' in request.resource.data) || request.resource.data.preQuestions is list);
      
      allow update: if isPrivileged() && 
        (!('detailedAddress' in request.resource.data) || request.resource.data.detailedAddress is string) &&
        (!('preQuestions' in request.resource.data) || request.resource.data.preQuestions is list);
    }

    // --- Applications Collection ---
    match /applications/{applicationId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.applicantId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.applicantId &&
        request.resource.data.keys().hasAll(['applicantId', 'postId', 'status']) &&
        (!('preQuestionAnswers' in request.resource.data) || request.resource.data.preQuestionAnswers is list);
      allow update: if isPrivileged();
      allow delete: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.applicantId);
    }
    
    // Fallback rule: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
