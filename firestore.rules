rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ====================
    //  Helper Functions
    // ====================
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      let isTokenAdmin = isSignedIn() && request.auth.token.role == 'admin';
      let isDbAdmin = isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      return isTokenAdmin || isDbAdmin;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // ====================
    //  Collection Rules
    // ====================

    // Users: Contains role information. Readable by self, writable only by functions (for safety).
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if false; // Should be updated via backend functions
    }
    
    // StaffProfiles: Readable by signed-in users. Writable by self or admin.
    match /staffProfiles/{staffId} {
      allow read: if isSignedIn();
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || isOwner(staffId);
    }

    // StaffAvailability: Users can manage their own availability.
    match /staffAvailability/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Tournaments: Managed by admins. Readable by all signed-in users.
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // JobPostings: Managed by admins. Readable by all signed-in users.
    match /jobPostings/{postId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Applications: Users can create their own. Admins manage all.
    match /applications/{appId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.staffId);
      allow update, delete: if isAdmin();
    }

    // Schedules: Managed by admins. Readable by all signed-in users.
    match /schedules/{scheduleId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // WorkLogs: Users create their own. Admins manage all.
    match /workLogs/{logId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.staffId);
      allow update, delete: if isAdmin();
    }

    // Payrolls: Writable only by admin. Readable by self or admin.
    match /payrolls/{payrollId} {
      allow read: if isOwner(request.resource.data.staffId) || isAdmin();
      allow write: if isAdmin();
    }

    // Settings: System-wide settings. Writable only by admin.
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Tables: Live tournament data. Managed by admins.
    match /tables/{tableId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Participants: Live tournament data. Managed by admins.
    match /participants/{participantId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Announcements: Managed by admins.
    match /announcements/{announcementId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // Logs (internal): For backend function logging.
    match /logs/{logId} {
        allow read: if isAdmin();
        allow write: if false; // Only functions can write
    }
  }
}
