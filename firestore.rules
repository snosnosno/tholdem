rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ================= Helper Functions =================
    function isSignedIn() {
      return request.auth != null;
    }
    
    // ================= Security Functions =================
    // 입력 데이터 검증
    function isValidString(field, maxLength) {
      return field is string && field.size() <= maxLength;
    }
    
    // XSS 패턴 검사
    function hasNoXSS(text) {
      return !text.matches('.*<script.*>.*</script>.*') &&
             !text.matches('.*javascript:.*') &&
             !text.matches('.*on\\w+\\s*=.*');
    }
    
    // SQL Injection 패턴 검사
    function hasNoSQLInjection(text) {
      return !text.matches('.*union.*select.*') &&
             !text.matches('.*select.*from.*') &&
             !text.matches('.*insert.*into.*') &&
             !text.matches('.*delete.*from.*') &&
             !text.matches('.*drop.*table.*');
    }
    
    // 안전한 텍스트 검증
    function isSafeText(text, maxLength) {
      return isValidString(text, maxLength) && 
             hasNoXSS(text) && 
             hasNoSQLInjection(text);
    }

    // Updated: Check for 'admin', 'manager', and 'staff' roles
    function isPrivileged() {
      return request.auth.token.role == 'admin' || request.auth.token.role == 'manager';
    }
    
    // Check for any authenticated user with a valid role
    function hasValidRole() {
      return request.auth.token.role == 'admin' || 
             request.auth.token.role == 'manager' || 
             request.auth.token.role == 'staff';
    }
    

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // ================= Collection Rules =================

    // --- Users Collection ---
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());
      allow write: if isSignedIn() && (isOwner(userId) || isPrivileged());

      // Subcollection: myApplications (사용자의 지원 내역)
      match /myApplications/{appId} {
        allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());
        allow write: if isSignedIn() && (isOwner(userId) || isPrivileged());
      }

      // Subcollection: myWorkSessions (사용자의 근무 세션)
      match /myWorkSessions/{sessionId} {
        allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());
        allow write: if isSignedIn() && (isOwner(userId) || isPrivileged());
      }

      // Subcollection: settings (사용자 설정)
      match /settings/{settingId} {
        // 본인의 설정만 읽기/쓰기 가능
        allow read, write: if isSignedIn() && isOwner(userId);
      }
    }

    // --- Events Collection ---
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow write: if isPrivileged();
    }

    // --- Assignments Collection ---
    match /assignments/{assignmentId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.dealerId);
      allow create, update, delete: if isPrivileged();
    }
    
    // --- Payrolls Collection ---
    match /payrolls/{payrollId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.dealerId);
      allow create, update, delete: if isPrivileged();
    }

    // --- Ratings Collection ---
    match /ratings/{ratingId} {
      allow read: if isSignedIn() && (isPrivileged() || request.auth.uid == resource.data.dealerId);
      allow create: if isPrivileged();
      allow update, delete: if false; // Ratings are immutable
    }

    // --- Announcements Collection ---
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow write: if isPrivileged();
    }

    // --- Notifications Collection ---
    // ✅ 보안 강화: 클라이언트 알림 생성 완전 차단 (Cloud Functions만 가능)
    match /notifications/{notificationId} {
      // 본인의 알림만 읽기 가능 (userId 필드 기반)
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;

      // 본인의 알림만 읽음 처리 및 삭제 가능
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId
        && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['isRead', 'readAt']);

      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;

      // ❌ 클라이언트 생성 완전 차단 (Cloud Functions만 가능)
      allow create: if false;
    }

    // --- Staff Availability ---
    match /staffAvailability/{staffId} {
        allow read: if isSignedIn() && (isOwner(staffId) || isPrivileged());
        allow write: if isSignedIn() && isOwner(staffId);
    }

    // --- Job Postings Collection ---
    match /jobPostings/{postId} {
      // Everyone can read job postings
      allow read: if isSignedIn();
      
      // Admin can create/update any job posting
      // Manager and Staff can create job postings and update their own
      allow create: if hasValidRole() && 
        request.resource.data.keys().hasAll(['title', 'description', 'location', 'status', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid &&
        isSafeText(request.resource.data.title, 200) &&
        isSafeText(request.resource.data.description, 2000) &&
        isSafeText(request.resource.data.location, 200) &&
        request.resource.data.status in ['open', 'closed', 'in_progress', 'completed'] &&
        (!('detailedAddress' in request.resource.data) || isSafeText(request.resource.data.detailedAddress, 500)) &&
        (!('preQuestions' in request.resource.data) || request.resource.data.preQuestions is list) &&
        (!('updatedBy' in request.resource.data) || request.resource.data.updatedBy is string) &&
        (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt is timestamp);
      
      // Admin can update any job posting, Manager/Staff can update their own
      allow update: if (request.auth.token.role == 'admin') || 
        (hasValidRole() && request.auth.uid == resource.data.createdBy) &&
        (!('detailedAddress' in request.resource.data) || request.resource.data.detailedAddress is string) &&
        (!('preQuestions' in request.resource.data) || request.resource.data.preQuestions is list) &&
        (!('updatedBy' in request.resource.data) || request.resource.data.updatedBy is string) &&
        (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt is timestamp);
      
      // Admin can delete any job posting, Manager/Staff can delete their own
      allow delete: if (request.auth.token.role == 'admin') || 
        (hasValidRole() && request.auth.uid == resource.data.createdBy);
        
      // --- Subcollections for Job Postings ---
      // Staff subcollection
      match /staff/{userId} {
        allow read: if isSignedIn();
        allow write: if isPrivileged() ||
          (hasValidRole() && get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid);
      }

      // WorkLogs subcollection
      match /workLogs/{workLogId} {
        allow read: if isSignedIn();
        allow write: if isPrivileged() ||
          (hasValidRole() && get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid);
      }

      // Hybrid Architecture: Applications subcollection (공고별 지원서)
      match /applications/{appId} {
        allow read: if isSignedIn() && (
          isPrivileged() ||
          get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid
        );
        allow write: if isSignedIn() && (
          isPrivileged() ||
          get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid
        );
      }

      // Hybrid Architecture: WorkSessions subcollection (공고별 근무 세션)
      match /workSessions/{sessionId} {
        allow read: if isSignedIn() && (
          isPrivileged() ||
          get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid
        );
        allow write: if isSignedIn() && (
          isPrivileged() ||
          get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid
        );
      }

      // Hybrid Architecture: Attendance subcollection (공고별 출석)
      match /attendance/{recordId} {
        allow read: if isSignedIn() && (
          isPrivileged() ||
          get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid
        );
        allow write: if isSignedIn() && (
          isPrivileged() ||
          get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid
        );
      }

      // Hybrid Architecture: Payroll subcollection (공고별 정산)
      match /payroll/{payrollId} {
        allow read: if isSignedIn() && (
          isPrivileged() ||
          get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid
        );
        allow write: if isSignedIn() && (
          isPrivileged() ||
          get(/databases/$(database)/documents/jobPostings/$(postId)).data.createdBy == request.auth.uid
        );
      }
    }

    // --- Applications Collection (표준 필드명 + 최적화 지원) ---
    match /applications/{applicationId} {
      // 인증된 사용자가 읽기 가능 (역할별 필터링은 클라이언트에서 처리)
      allow read: if isSignedIn();

      // 사용자는 본인 지원서 생성 가능 (표준 필드명 지원: eventId)
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.applicantId &&
        request.resource.data.keys().hasAll(['applicantId', 'status']) &&
        (request.resource.data.keys().hasAny(['postId', 'eventId'])) &&  // postId 또는 eventId 중 하나 필수
        (!('preQuestionAnswers' in request.resource.data) || request.resource.data.preQuestionAnswers is list);

      // 관리자 및 구인공고 작성자가 지원서 수정 가능
      allow update: if isPrivileged() ||
        (hasValidRole() && (
          (resource.data.keys().hasAny(['postId']) && exists(/databases/$(database)/documents/jobPostings/$(resource.data.postId)) &&
           get(/databases/$(database)/documents/jobPostings/$(resource.data.postId)).data.createdBy == request.auth.uid) ||
          (resource.data.keys().hasAny(['eventId']) && exists(/databases/$(database)/documents/jobPostings/$(resource.data.eventId)) &&
           get(/databases/$(database)/documents/jobPostings/$(resource.data.eventId)).data.createdBy == request.auth.uid)
        ));

      // 사용자는 본인 지원서 삭제 가능, 관리자 및 구인공고 작성자도 삭제 가능
      allow delete: if isSignedIn() && (
        request.auth.uid == resource.data.applicantId ||
        isPrivileged() ||
        (hasValidRole() && (
          (resource.data.keys().hasAny(['postId']) && exists(/databases/$(database)/documents/jobPostings/$(resource.data.postId)) &&
           get(/databases/$(database)/documents/jobPostings/$(resource.data.postId)).data.createdBy == request.auth.uid) ||
          (resource.data.keys().hasAny(['eventId']) && exists(/databases/$(database)/documents/jobPostings/$(resource.data.eventId)) &&
           get(/databases/$(database)/documents/jobPostings/$(resource.data.eventId)).data.createdBy == request.auth.uid)
        ))
      );
    }

    // --- Staff Collection (최적화 서비스 지원) ---
    match /staff/{staffId} {
      // 인증된 사용자가 스태프 정보 읽기 가능
      allow read: if isSignedIn() && (
        hasValidRole() ||
        request.auth.uid == resource.data.userId ||
        request.auth.uid == staffId
      );

      // 관리자 및 유효한 역할을 가진 사용자가 스태프 정보 생성/수정 가능
      allow create, update: if isSignedIn() && hasValidRole();

      // 관리자만 삭제 가능
      allow delete: if isPrivileged();
    }

    // --- Work Logs Collection (표준 필드명 + 최적화 지원) ---
    match /workLogs/{workLogId} {
      // 표준 필드명 기반 권한 체크 (최적화 쿼리 지원)
      allow read: if isSignedIn() && (
        hasValidRole() ||
        request.auth.uid == resource.data.staffId ||  // 표준 필드명 사용
        (resource.data.keys().hasAny(['staffInfo']) && request.auth.uid == resource.data.staffInfo.userId) ||  // 하위 호환성
        request.auth.uid == resource.data.dealerId  // 레거시 필드 하위 호환성
      );

      // 관리자 및 유효한 역할을 가진 사용자가 생성/수정 가능
      // 표준 필드명 기반 검증 (staffId, eventId 필수)
      allow create: if isSignedIn() && hasValidRole() &&
        request.resource.data.keys().hasAll(['staffId', 'eventId', 'date']) &&
        request.resource.data.staffId is string &&
        request.resource.data.eventId is string &&
        request.resource.data.date is string;

      // 관리자 및 유효한 역할을 가진 사용자가 수정 가능
      allow update: if isSignedIn() && hasValidRole();

      // 관리자만 삭제 가능
      allow delete: if isPrivileged();
    }

    // --- Participants Collection ---
    match /participants/{participantId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isPrivileged();
    }

    // --- Tables Collection ---
    match /tables/{tableId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isPrivileged();
    }

    // --- Shift Schedules Collection ---
    match /shiftSchedules/{scheduleId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isPrivileged();
    }

    // --- Attendance Collection ---
    match /attendance/{attendanceId} {
      allow read: if isSignedIn() && (hasValidRole() || request.auth.uid == resource.data.userId);
      allow create, update: if isSignedIn() && hasValidRole();
      allow delete: if isPrivileged();
    }

    // --- Job Posting Templates Collection ---
    match /jobPostingTemplates/{templateId} {
      // Users can read their own templates, privileged users can read all
      allow read: if isSignedIn() && (
        isPrivileged() || 
        (resource != null && isOwner(resource.data.createdBy))
      );
      
      // Users can create templates for themselves, privileged users can create for anyone
      allow create: if isSignedIn() && 
        request.resource.data.keys().hasAll(['name', 'templateData', 'createdBy', 'createdAt']) &&
        (isPrivileged() || isOwner(request.resource.data.createdBy)) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 2 &&
        request.resource.data.name.size() <= 50 &&
        (!('description' in request.resource.data) || request.resource.data.description is string) &&
        request.resource.data.templateData is map &&
        request.resource.data.createdBy is string &&
        (!('usageCount' in request.resource.data) || request.resource.data.usageCount is number) &&
        (!('isPublic' in request.resource.data) || request.resource.data.isPublic is bool);
      
      // Users can update their own templates, privileged users can update all
      allow update: if isSignedIn() && (
        isPrivileged() || 
        (resource != null && isOwner(resource.data.createdBy))
      );
      
      // Users can delete their own templates, privileged users can delete all
      allow delete: if isSignedIn() && (
        isPrivileged() || 
        (resource != null && isOwner(resource.data.createdBy))
      );
    }
    
    // --- Tournaments Collection ---
    match /tournaments/{tournamentId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isPrivileged();
    }

    // ================= 멀티 테넌트 아키텍처 =================
    // users/{userId}/tournaments/{tournamentId} 구조

    match /users/{userId}/tournaments/{tournamentId} {
      // 본인의 토너먼트만 읽기/쓰기 가능 (관리자는 모든 토너먼트 접근 가능)
      allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());
      allow write: if isSignedIn() && (isOwner(userId) || isPrivileged());

      // --- Participants Subcollection ---
      match /participants/{participantId} {
        allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());
        allow create, update, delete: if isSignedIn() && (isOwner(userId) || isPrivileged());
      }

      // --- Tables Subcollection ---
      match /tables/{tableId} {
        allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());
        allow create, update, delete: if isSignedIn() && (isOwner(userId) || isPrivileged());
      }

      // --- Settings Subcollection ---
      match /settings/{settingId} {
        allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());
        allow create, update: if isSignedIn() && (isOwner(userId) || isPrivileged());
        allow delete: if isPrivileged(); // 관리자만 삭제 가능
      }
    }

    // ================= collectionGroup 쿼리 지원 =================
    // collectionGroup('tables') 등의 쿼리를 위한 규칙
    match /{path=**}/tables/{tableId} {
      // users/{userId}/tournaments/{tournamentId}/tables/{tableId} 경로의 모든 테이블
      // 인증된 사용자만 읽을 수 있음 (본인 또는 관리자)
      allow read: if isSignedIn();
      // 쓰기는 상위 규칙 (users/{userId}/tournaments/{tournamentId}/tables) 적용
    }
    
    // --- Attendance Records Collection (표준 필드명 지원) ---
    match /attendanceRecords/{recordId} {
      // 표준 필드명 기반 권한 체크
      allow read: if isSignedIn() && (
        hasValidRole() ||
        request.auth.uid == resource.data.staffId ||  // 표준 필드명
        request.auth.uid == resource.data.dealerId    // 하위 호환성
      );
      allow create, update: if isSignedIn() && hasValidRole();
      allow delete: if isPrivileged();
    }
    
    // --- Persons Collection --- [DEPRECATED - Use WorkLog.staffInfo instead]
    // Persons 컬렉션이 WorkLog.staffInfo로 통합됨 
    // 하위 호환성을 위해 읽기만 허용, 새로운 생성/수정은 제한
    match /persons/{personId} {
      // 기존 데이터 읽기만 허용 (마이그레이션 및 하위 호환성용)
      allow read: if isSignedIn();
      // 새로운 생성/수정/삭제는 제한 - WorkLog 사용 권장
      allow create, update, delete: if false;
    }
    
    // --- Applicants Collection --- [DEPRECATED - Use /persons collection instead]
    // Removed - All applicant operations should use /persons collection with type='applicant' or 'both'
    
    // --- Work Sessions Collection (다중 세션 지원) ---
    match /workSessions/{sessionId} {
      allow read: if isSignedIn() && (hasValidRole() || request.auth.uid == resource.data.personId);
      allow create, update: if isSignedIn() && hasValidRole();
      allow delete: if isPrivileged();
    }
    
    // --- Migration Backups Collection ---
    match /migration_backups/{backupId} {
      // 관리자만 접근 가능
      allow read, write: if request.auth.token.role == 'admin';
    }
    
    // --- Backup Collections (와일드카드 패턴) ---
    // staff_backup_YYYY-MM-DD 형식의 모든 백업 컬렉션
    match /{backupCollection}/{documentId} {
      allow read, write: if request.auth.token.role == 'admin' &&
        (backupCollection.matches('staff_backup_.*') ||
         backupCollection.matches('applicants_backup_.*') ||
         backupCollection.matches('persons_backup_.*'));
    }

    // --- Login Attempts Collection (보안 기능) ---
    match /loginAttempts/{attemptId} {
      // 로그인 시도 기록은 인증 없이도 가능 (로그인 전 차단 확인용)
      // 필수 필드 검증: ipAddress, timestamp, attemptCount
      allow create: if request.resource.data.keys().hasAll(['ipAddress', 'timestamp', 'attemptCount']) &&
        request.resource.data.ipAddress is string &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.attemptCount is number &&
        request.resource.data.attemptCount >= 0 &&
        request.resource.data.attemptCount <= 100;

      // 본인 데이터 또는 관리자만 읽기 가능
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        isPrivileged()
      );

      // 관리자만 업데이트/삭제 가능 (차단 해제 등)
      allow update, delete: if isPrivileged();
    }

    // --- Inquiries Collection (고객 문의) ---
    match /inquiries/{inquiryId} {
      // 읽기: 본인의 문의는 볼 수 있고, 관리자는 모든 문의를 볼 수 있음
      allow read: if isSignedIn() && (
        isPrivileged() ||
        request.auth.uid == resource.data.userId
      );

      // 생성: 로그인한 사용자가 본인 이름으로 문의 생성 가능
      allow create: if isSignedIn() &&
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['userId', 'userEmail', 'userName', 'category', 'subject', 'message', 'status']) &&
        isSafeText(request.resource.data.subject, 200) &&
        isSafeText(request.resource.data.message, 2000) &&
        request.resource.data.category in ['general', 'account', 'technical', 'payment', 'other', 'report'] &&
        request.resource.data.status == 'open' &&
        request.resource.data.userEmail is string &&
        request.resource.data.userName is string;

      // 수정: 관리자만 문의 상태 변경 및 답변 가능
      allow update: if isPrivileged();

      // 삭제: 관리자만 가능
      allow delete: if isPrivileged();
    }

    // --- Reports Collection (신고) ---
    match /reports/{reportId} {
      // 읽기: 관리자는 모든 신고, 일반 사용자는 본인 신고만
      allow read: if isSignedIn() && (
        isPrivileged() ||
        request.auth.uid == resource.data.reporterId
      );

      // 생성: 로그인한 사용자가 신고 생성 가능
      allow create: if isSignedIn() &&
        request.auth.uid == request.resource.data.reporterId &&
        request.resource.data.keys().hasAll(['reporterId', 'reporterName', 'targetId', 'targetName', 'eventId', 'eventTitle', 'type', 'description']) &&
        isSafeText(request.resource.data.description, 2000) &&
        request.resource.data.type in ['tardiness', 'negligence', 'no_show', 'inappropriate_behavior', 'other'] &&
        request.resource.data.reporterId is string &&
        request.resource.data.reporterName is string &&
        request.resource.data.targetId is string &&
        request.resource.data.targetName is string;

      // 수정: 관리자만 가능 (상태 변경 등)
      allow update: if isPrivileged();

      // 삭제: 관리자만 가능
      allow delete: if isPrivileged();
    }

    // --- Staff-based QR Attendance System Collections (v2.0) ---

    // User QR Metadata Subcollection (users/{userId}/qrMetadata/{docId})
    // 각 사용자의 QR 메타데이터 (보안 코드, 통계)
    match /users/{userId}/qrMetadata/{metadataId} {
      // 읽기: 본인과 관리자만
      allow read: if isSignedIn() && (isOwner(userId) || isPrivileged());

      // 생성/수정: 본인과 관리자만
      allow create, update: if isSignedIn() && (isOwner(userId) || isPrivileged()) &&
        request.resource.data.keys().hasAll(['securityCode', 'createdAt', 'regenerationCount', 'totalScanCount']) &&
        request.resource.data.securityCode is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.regenerationCount is number &&
        request.resource.data.totalScanCount is number &&
        (!('lastUsedAt' in request.resource.data) || request.resource.data.lastUsedAt is timestamp) &&
        (!('lastRegeneratedAt' in request.resource.data) || request.resource.data.lastRegeneratedAt is timestamp);

      // 삭제: 관리자만
      allow delete: if request.auth.token.role == 'admin';
    }

    // Scan History Collection (스캔 이력)
    match /scanHistory/{historyId} {
      // 읽기: 본인의 이력, 관련 이벤트 관리자, 또는 전체 관리자
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.staffId ||
        request.auth.uid == resource.data.scannedBy ||
        isPrivileged()
      );

      // 생성: 모든 인증된 사용자 (스캔 시 자동 생성)
      allow create: if isSignedIn() &&
        request.resource.data.keys().hasAll(['staffId', 'staffName', 'eventId', 'date', 'mode', 'scannedAt', 'workLogId', 'scannedBy']) &&
        request.resource.data.staffId is string &&
        request.resource.data.staffName is string &&
        request.resource.data.eventId is string &&
        request.resource.data.date is string &&
        request.resource.data.mode in ['check-in', 'check-out'] &&
        request.resource.data.scannedAt is timestamp &&
        request.resource.data.workLogId is string &&
        request.resource.data.scannedBy is string &&
        (!('deviceInfo' in request.resource.data) || request.resource.data.deviceInfo is string) &&
        (!('location' in request.resource.data) || request.resource.data.location is map);

      // 수정/삭제: 관리자만
      allow update, delete: if request.auth.token.role == 'admin';
    }

    // Scan Cooldowns Collection (5분 중복 스캔 방지)
    match /scanCooldowns/{cooldownId} {
      // 읽기: 모든 인증된 사용자 (중복 확인용)
      allow read: if isSignedIn();

      // 생성/수정: 모든 인증된 사용자 (스캔 시 자동 생성)
      allow create, update: if isSignedIn() &&
        request.resource.data.keys().hasAll(['key', 'staffId', 'eventId', 'date', 'mode', 'lastScanAt', 'expiresAt']) &&
        request.resource.data.key is string &&
        request.resource.data.staffId is string &&
        request.resource.data.eventId is string &&
        request.resource.data.date is string &&
        request.resource.data.mode in ['check-in', 'check-out'] &&
        request.resource.data.lastScanAt is timestamp &&
        request.resource.data.expiresAt is timestamp;

      // 삭제: 관리자만 (만료된 쿨다운 정리용)
      allow delete: if request.auth.token.role == 'admin';
    }

    // Fallback rule: deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
