// Ï†ïÏÇ∞ÌÉ≠ÏóêÏÑú Î∏åÎùºÏö∞Ï†Ä ÏΩòÏÜîÏóê Î∂ôÏó¨ÎÑ£ÏùÑ ÎîîÎ≤ÑÍπÖ ÏΩîÎìú

// Firebase FirestoreÏóêÏÑú ÏßÅÏ†ë WorkLog Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
import { collection, getDocs } from 'firebase/firestore';
import { db } from './firebase';

async function debugWorkLogs() {
  try {
    const workLogsRef = collection(db, 'workLogs');
    const snapshot = await getDocs(workLogsRef);
    
    console.log('=== WorkLog Îç∞Ïù¥ÌÑ∞ ÎîîÎ≤ÑÍπÖ ===');
    snapshot.docs.forEach(doc => {
      const data = doc.data();
      console.log(`\nüî• WorkLog ID: ${doc.id}`);
      console.log('Raw data:', data);
      
      if (data.scheduledStartTime) {
        console.log('scheduledStartTime:', data.scheduledStartTime);
        console.log('scheduledStartTime type:', typeof data.scheduledStartTime);
        console.log('scheduledStartTime constructor:', data.scheduledStartTime.constructor.name);
        
        if (data.scheduledStartTime.toDate) {
          try {
            const date = data.scheduledStartTime.toDate();
            console.log('toDate() result:', date);
          } catch (error) {
            console.error('toDate() error:', error);
          }
        }
        
        if (data.scheduledStartTime.seconds) {
          console.log('seconds property:', data.scheduledStartTime.seconds);
        }
      }
      
      if (data.scheduledEndTime) {
        console.log('scheduledEndTime:', data.scheduledEndTime);
        console.log('scheduledEndTime type:', typeof data.scheduledEndTime);
        console.log('scheduledEndTime constructor:', data.scheduledEndTime.constructor.name);
      }
    });
  } catch (error) {
    console.error('WorkLog Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', error);
  }
}

// Ïã§Ìñâ
debugWorkLogs();