import { WorkLog } from '../hooks/useShiftSchedule';\nimport { AttendanceException, ExceptionType, DEFAULT_EXCEPTION_SETTINGS, ExceptionSettings } from '../types/attendance';\n\nexport class AttendanceExceptionDetector {\n  private settings: ExceptionSettings;\n\n  constructor(settings: ExceptionSettings = DEFAULT_EXCEPTION_SETTINGS) {\n    this.settings = settings;\n  }\n\n  detectExceptions(workLog: WorkLog): AttendanceException[] {\n    const exceptions: AttendanceException[] = [];\n    const now = new Date();\n    const detectedAt = now.toISOString();\n\n    if (!workLog.startTime && this.isWorkDayPassed(workLog)) {\n      exceptions.push({\n        type: 'absence',\n        description: 'No check-in record found',\n        detectedAt\n      });\n      return exceptions;\n    }\n\n    if (workLog.startTime && workLog.scheduledStartTime) {\n      const lateMinutes = this.calculateLateMinutes(workLog.startTime, workLog.scheduledStartTime);\n      if (lateMinutes > this.settings.lateThresholdMinutes) {\n        exceptions.push({\n          type: 'late',\n          description: `Late arrival: ${lateMinutes} minutes`,\n          detectedAt\n        });\n      }\n    }\n\n    return exceptions;\n  }\n\n  private isWorkDayPassed(workLog: WorkLog): boolean {\n    if (!workLog.date || !workLog.scheduledEndTime) return false;\n    \n    const workDate = new Date(workLog.date);\n    const [hours, minutes] = workLog.scheduledEndTime.split(':').map(Number);\n    const scheduledEndDateTime = new Date(workDate);\n    scheduledEndDateTime.setHours(hours, minutes, 0, 0);\n    \n    return Date.now() > scheduledEndDateTime.getTime();\n  }\n\n  private calculateLateMinutes(actualTime: string, scheduledTime: string): number {\n    const actual = this.timeStringToMinutes(actualTime);\n    const scheduled = this.timeStringToMinutes(scheduledTime);\n    return Math.max(0, actual - scheduled);\n  }\n\n  private timeStringToMinutes(timeString: string): number {\n    const [hours, minutes] = timeString.split(':').map(Number);\n    return hours * 60 + minutes;\n  }\n}\n\nexport const attendanceExceptionDetector = new AttendanceExceptionDetector();\n\nexport const getExceptionIcon = (type: ExceptionType): string => {\n  switch (type) {\n    case 'late': return '⏰';\n    case 'early_leave': return '🚪';\n    case 'absence': return '❌';\n    case 'overtime': return '🕐';\n    default: return '⚠️';\n  }\n};\n\nexport const getExceptionSeverity = (exception: AttendanceException): 'low' | 'medium' | 'high' => {\n  switch (exception.type) {\n    case 'absence': return 'high';\n    case 'late': return 'medium';\n    case 'early_leave': return 'medium';\n    case 'overtime': return 'low';\n    default: return 'medium';\n  }\n};\n"